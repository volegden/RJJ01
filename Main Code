settings
{
	main
	{
		Description: "♥ A Friendly Server To Meet New Friends ♥\nlast updated (July 11 2023)\n\n   » » » MASSIVE UPDATE RELEASED « « «\n (including UNO, non-mod menu and\n      hero specific features!)\n\n• Rules and infos on how to navigate the menu\r\n    and use other functions are written ingame.\n• Please contact our team before copying\r\n    or modifying our preset.\n\n Coded with ♡ by: Warloy & xMaxuss.\n   Based on the work of: TbyCoLive.\n Maintained with ♡ by: LƐafa.\n   Community Managers:\n     MOOOUSH, RUBY & kwally."
		Mode Name: " ♥ Friendly ♥ No Kill!"
	}

	lobby
	{
		Allow Players Who Are In Queue: Yes
		Map Rotation: After A Game
		Match Voice Chat: Enabled
		Max Spectators: 5
		Max Team 1 Players: 6
		Max Team 2 Players: 6
		Return To Lobby: Never
		Swap Teams After Match: No
	}

	modes
	{
		Capture the Flag
		{
			Game Mode Start: Manual

			enabled maps
			{
				Ayutthaya 972777519512063901
			}
		}

		Hybrid
		{
			Game Mode Start: Manual

			enabled maps
			{
				Midtown 972777519512068154
			}
		}

		Skirmish
		{
			Limit Valid Control Points: Second

			disabled maps
			{
				Blizzard World
				Eichenwalde
				Hanamura
				Hollywood
				King's Row
				Lijiang Tower Lunar New Year
				Workshop Chamber
				Workshop Expanse
				Workshop Expanse Night
				Workshop Green Screen
				Workshop Island
				Workshop Island Night
			}
		}

		Team Deathmatch
		{
			Game Mode Start: Immediately
			Self Initiated Respawn: Off

			enabled maps
			{
				Black Forest 972777519512063901
				Castillo 972777519512063901
				Kanezaka 972777519512063901
				Malevento 972777519512063901
				Necropolis 972777519512068153
				Petra 972777519512063901
			}
		}

		General
		{
			Health Pack Respawn Time Scalar: 50%
			Hero Limit: Off
			Kill Cam: Off
			Spawn Health Packs: Enabled
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 20%
			No Ammunition Requirement: Off
			Ultimate Duration: 250%
			Ultimate Generation: 200%
			Ultimate Generation - Passive: 500%

			Ana
			{
				Sleep Dart Cooldown Time: 200%
			}

			Ashe
			{
				Coach Gun Knockback Scalar Enemy: 50%
				Coach Gun Knockback Scalar Self: 200%
				Dynamite Fuse Time Scalar: 500%
				Infinite Ultimate Duration: On
			}

			Baptiste
			{
				Regenerative Burst Cooldown Time: 20%
			}

			Cassidy
			{
				Combat Roll Cooldown Time: 0%
				Magnetic Grenade Cooldown Time: 200%
				Ultimate Generation - Passive Deadeye: 500%
			}

			D.Va
			{
				Boosters Cooldown Time: 0%
				Defense Matrix Maximum Time: 500%
				Defense Matrix Recharge Rate: 500%
				Spawn Without Mech: On
			}

			Echo
			{
				Flight Cooldown Time: 0%
			}

			Genji
			{
				Deflect Cooldown Time: 20%
				Swift Strike Cooldown Time: 20%
			}

			Hanzo
			{
				Lunge Cooldown Time: 0%
				Lunge Distance Scalar: 150%
			}

			Junker Queen
			{
				Commanding Shout Cooldown Time: 20%
				Jagged Blade Delay Before Automatic Recall: 400%
			}

			Kiriko
			{
				Protection Suzu Cooldown Time: 50%
				Swift Step Distance Scalar: 300%
			}

			Lifeweaver
			{
				Life Grip: Off
				Petal Platform Cooldown Time: 200%
				Ultimate Generation - Combat Tree of Life: 50%
				Ultimate Generation - Passive Tree of Life: 75%
			}

			Lúcio
			{
				Amp It Up Cooldown Time: 20%
			}

			Mei
			{
				Cryo-Freeze: Off
				Ice Wall: Off
			}

			Mercy
			{
				Guardian Angel Cooldown Time: 10%
			}

			Moira
			{
				Fade Cooldown Time: 0%
			}

			Orisa
			{
				Javelin Spin Cooldown Time: 20%
			}

			Pharah
			{
				Hover Jets Unlimited Fuel: On
				Jump Jet Cooldown Time: 0%
			}

			Reaper
			{
				Shadow Step Cooldown Time: 10%
				Wraith Form Cooldown Time: 10%
			}

			Sigma
			{
				Ultimate Generation - Combat Gravitic Flux: 50%
				Ultimate Generation - Passive Gravitic Flux: 75%
			}

			Sojourn
			{
				Power Slide Cooldown Time: 10%
			}

			Soldier: 76
			{
				Biotic Field Cooldown Time: 10%
			}

			Sombra
			{
				Translocator Cooldown Time: 0%
			}

			Symmetra
			{
				No Ammunition Requirement: On
				Teleporter Cooldown Time: 20%
			}

			Tracer
			{
				Blink Cooldown Time: 0%
				Recall Cooldown Time: 50%
			}

			Widowmaker
			{
				Grappling Hook Cooldown Time: 0%
			}

			Zarya
			{
				Ultimate Generation - Combat Graviton Surge: 50%
				Ultimate Generation - Passive Graviton Surge: 75%
			}
		}
	}
}

variables
{
	global:
		0: High_Rank
		1: Perma_Banned
		2: Red
		3: Green
		4: Blue
		5: Rainbow_Color
		6: Mod_Rank
		7: Temp_Banned
		8: Current_Host
		9: Savezone_Radius
		10: Savezone_ID
		11: Savezone_Active
		12: Savezone_Position
		13: Gravity_Helper
		14: Gravity_Toggle
		15: Slowmotion
		16: Map_Teleport_Locations
		17: Drawing_Obj_Storage
		18: Titles_And_Outlines
		19: Jail_List
		20: Jail_Helper
		21: Drawing_Obj_Size
		22: Drawing_Obj_Effects
		23: Modification_Mode_String
		24: Modification_Target_String
		25: Icons_Colors_List
		26: Icons_List
		27: Icons_List_For_Menu
		28: Colors
		29: Status_String
		30: Jumppad_Storage
		31: Jumppad_Radius
		32: Kanezaka_Teleports
		33: UNO_Random
		34: Card_Colors
		35: UNO_Players
		36: UNO_Deck
		37: UNO_Help
		38: UNO_Started
		39: UNO_Looper
		40: UNO_Colorblind
		41: UNO_Inworld
		42: UNO_Info
		43: UNO_Timer
		44: Beams
		45: Drawing_Obj_Storage_Beams
		46: Skins_Check
		47: Player_Joined_Queue
		48: Game_Timer
		49: Game_Timer_Helper
		50: Main_Chaser
		51: Moe_Position
		52: Moooush_Effect
		53: Demoted
		54: OffOnString
		55: Rank_Icon
		56: Game_Description
		57: Promoted_List
		58: Credits

	player:
		0: High_Rank
		1: Mod_Rank
		2: Promoted_Rank
		3: Player_Modification
		4: Verification_Key
		5: Mod_Name_ID
		6: Protection_ID
		7: Scale_Prev
		8: Scale_Real
		9: Is_Crouch_On
		10: Is_Flying
		11: Target_Effect
		12: Mode_Cycle
		13: Mode_Headline
		14: Mode_Hud_ID
		15: DMG_Time
		16: Target_Tag_ID
		17: Target_Arrow_ID
		18: Protection
		19: Target_Lock
		20: Camera
		21: Scale_Hud_ID
		22: Progress_Lock
		23: Remote_Scale
		24: Grap_Line
		25: Mode_Description
		26: Last_Position_Facing
		27: Restricted
		28: Savezone_Access
		29: Damage_Reflect
		30: Voice_Pitch
		31: Heaven_Strike_Radius
		32: Heaven_Strike_ID
		33: Icon_ID
		34: Ghost_Mode
		35: Slow_Projectile
		36: Progress_Stop
		37: Drawing_Obj_Info_Array
		38: Player_Title_And_Outline
		39: Player_Nameplates
		40: Is_Title_Given
		41: Index_Help
		42: Modification_Mode_Selector
		43: Modification_Scalar_Selector
		44: Target_Shortcut
		45: Auto_Respawn
		46: Icons_Selector
		47: Icons_Colors_Selector
		48: Regular_Player_Has_Title
		49: M32_Players_Nameplate
		50: NamesAndOutlines_Colors_Selector
		51: Is_Menu_Active
		52: Status_Selector
		53: Jumppad_Helper
		54: Jumppad_Entry
		55: Jumppad_Loop
		56: Jumppad_Info_Array
		57: Jumppad_Preview
		58: Camera_Info_Array
		59: Camera_Helper
		60: Camera_Position
		61: Camera_Smooth
		62: Camera_Loop
		63: Camera_LOS
		64: Camera_Target
		65: Signal
		66: Mode_Cycle_Default
		67: Spam_Cooldown
		68: UNO_Info_Array
		69: UNO_Hand
		70: UNO_Helper
		71: UNO_Ingame
		72: UNO_Loop
		73: UNO_Sorter
		74: Print
		75: Positions_For_Beams
		76: Beams_Preview_ID
		77: Beams_Selector
		78: Is_Invisible
		79: No_CD
		80: Extra12_Timer
		81: Full_Protection
		82: Extra10_ID
		83: Extra10_Player
		84: Extra14_ID
		85: Comms_Target
		86: Bot_Aggro
		87: Bot_No
		88: Bot_CD
		89: Extra17_Pos
		90: Effect_Storage
		91: Players_Global_Array
	}

subroutines
{
	0: Protection
	1: Scale_Progress
	2: Hud_Elements
	3: Custom_Nameplate
	4: Drawing_Objects_Preview
	5: Beams_Preview
	6: Give_Custom_Nameplate
	7: Give_Custom_Outline
	8: Jail_Leaver
	9: UNO_Draw
	10: UNO_Update_Deck
	11: UNO_Update_Hand
	12: UNO_End
}

rule("Anti-Crash-ON")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load > 200;
		Global.Slowmotion == False;
	}

	actions
	{
		Wait(3, Abort When False);
		Small Message(All Players(All Teams), Custom String("   Anti Crash System Activated"));
		Set Slow Motion(10);
	}
}

rule("Anti-Crash-OFF")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Server Load < 100;
		Global.Slowmotion == False;
	}

	actions
	{
		Set Slow Motion(100);
	}
}

rule("Game_Description_Timer")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Game_Timer_Helper[0] = Round To Integer(Match Time / 60, Down);
		If(Round To Integer(Match Time % 60, Down) <= 9);
			Global.Game_Timer_Helper[1] = Custom String("0{0}", Round To Integer(Match Time % 60, Down));
		Else;
			Global.Game_Timer_Helper[1] = Round To Integer(Match Time % 60, Down);
		End;
		Global.Game_Timer = Custom String("{0}:{1}", Global.Game_Timer_Helper[0], Global.Game_Timer_Helper[1]);
		Wait(1, Ignore Condition);
		Loop;
	}
}

rule("Game_Description_Rotate")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} » Welcome! Thanks for hanging out and have fun! « {0} - {1}", 
			Icon String(Heart), Global.Game_Timer), 
			Null, Top, -1, Color(White), Global.Rainbow_Color, Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID; 
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} » Read the info page on your top left for details « {0} - {1}", 
			Icon String(Arrow: Left), Global.Game_Timer), 
			Null, Top, -1, Color(White), Global.Rainbow_Color, Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} » Roles on the right -  {1} : Vanguard  | {2}", 
			Icon String(Arrow: Right), Icon String(Heart), 
			Custom String(" {0} : Angel  |  No Icon: Promoted « {1} - {2}", Icon String(Halo), Icon String(Arrow: Right), Global.Game_Timer)), 
			Null, Top, -1, Color(White), Global.Rainbow_Color, Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{1} » {0} « {1} - {2}", 
			Global.Credits[0], Icon String(Bolt), Global.Game_Timer), 
			Null, Top, -1, Color(White), Global.Rainbow_Color, Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{1} » {0} « {1} - {2}", 
			Global.Credits[1], Icon String(Fire), Global.Game_Timer), 
			Null, Top, -1, Color(White), Global.Rainbow_Color, Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} » Phobic slurs, Racism and Harassment of any kind are prohibited « {0} - {1}",
			Icon String(Skull), Global.Game_Timer), 
			Null, Top, -1, Color(White), Global.Rainbow_Color, Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Destroy HUD Text(Global.Game_Description);
		Create HUD Text(All Players(All Teams), Null, Custom String("{0} » Unreasonable use of Kick and ban is a punishable offence « {0} - {1}", 
			Icon String(Warning), Global.Game_Timer), 
			Null, Top, -1, Color(White), Global.Rainbow_Color, Color(White), Visible To String and Color, Default Visibility);
		Global.Game_Description = Last Text ID;
		Wait(14, Ignore Condition);
		Loop;
	}
}

rule("Global_Settings")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.Player_Joined_Queue = Empty Array;
		"Dev Tools"
		Disable Inspector Recording;
		Disabled Create HUD Text(All Players(All Teams), Custom String("Server Load: {0}", Server Load Average), Null, Null, Top, 0, Color(White), Color(
			White), Color(White), Visible To and String, Visible Never);
		"Global Default"
		Disable Built-In Game Mode Announcer;
		Disable Built-In Game Mode Completion;
		Disable Built-In Game Mode Scoring;
		Disable Built-In Game Mode Music;
		Modify Global Variable(Mod_Rank, Remove From Array By Value, 0);
		Modify Global Variable(Temp_Banned, Remove From Array By Value, 0);
		"Default Color"
		Global.Red = 0;
		Global.Green = 255;
		Global.Blue = 0;
		"Savezone"
		Global.Savezone_Radius = 0.5;
		Global.Savezone_ID = Null;
		Global.Savezone_Active = False;
		Global.Savezone_Position = Null;
		"Another Defaults"
		Global.Gravity_Helper = 0;
		Global.Gravity_Toggle = False;
		Global.Slowmotion = False;
		Global.Drawing_Obj_Storage = Empty Array;
		
		Global.Jail_List = Array(Empty Array, Empty Array, Empty Array, Empty Array);
		Global.Jail_Helper = Null;
		
		Global.Jumppad_Storage = Empty Array;

		Global.UNO_Players = Empty Array;
		Global.UNO_Deck = Array(Null, Null, Null, Null);
		Global.UNO_Help = Null;
		Global.UNO_Started = False;
		Global.UNO_Looper = 0;
		Global.UNO_Inworld = Array(False, Null, Null, Null);
		Global.UNO_Info = Null;
		Global.UNO_Timer = 0;

		Global.Main_Chaser = 0;
		Chase Global Variable At Rate(Main_Chaser, 99999, 0.2, None);

		Global.Promoted_List = Empty Array;

		Wait(5, Ignore Condition);
		Global.Skins_Check = True;
		If(Count Of(Global.High_Rank) < 30 ||  Count Of(Global.Mod_Rank) < 130 || Count Of(Global.Titles_And_Outlines) < 130);
			For Global Variable(Gravity_Helper, 0, 12, 1);
				Global.Gravity_Helper -=1;
			End;
		End;
	}
}

rule("Global_Text")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("{0}", 
			Hero Icon String(Hero Of(Host Player))), Custom String("Watcher"),
			Custom String("{0} {1}", Host Player, If-Then-Else(Host Player.High_Rank, Icon String(Heart), 
				If-Then-Else(Host Player.Mod_Rank && Not(Host Player.Promoted_Rank), Icon String(Halo), Custom String("")))), 
			Right, -6, Global.Rainbow_Color, Global.Rainbow_Color, Global.Rainbow_Color, Visible To String and Color,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Null, Custom String("────★ Chillers ★────"), Null, Right, -5, Null, Global.Rainbow_Color,
			Null, Visible To and Color, Default Visibility);
	}
}

rule("Player_Joined_Queue")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		(Array Contains(Global.Perma_Banned, Custom String("{0}", Event Player)) || Array Contains(Global.Temp_Banned, Custom String("{0}",
			Event Player))) == False;
	}

	actions
	{
		Modify Global Variable(Player_Joined_Queue, Append To Array, Event Player);
	}
}

rule("Player_Left_Queue_Failsave")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.Player_Joined_Queue, Event Player) == True;
		(Array Contains(Global.Perma_Banned, Custom String("{0}", Event Player)) || Array Contains(Global.Temp_Banned, Custom String("{0}",
			Event Player))) == False;
	}

	actions
	{
		Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Event Player);
	}
}

rule("Default_Player_Settings")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		(Array Contains(Global.Perma_Banned, Custom String("{0}", Event Player)) || Array Contains(Global.Temp_Banned, Custom String("{0}",
			Event Player))) == False;
	}

	actions
	{
		Wait Until(First Of(Global.Player_Joined_Queue) == Event Player, 9999);
		
		If(Is Dummy Bot(Event Player));
			Event Player.Player_Modification = Array(100, 100, 100, 100, 100);
			Wait(0.2, Ignore Condition);
			Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Null);
			Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Event Player);
			Wait Until(Has Spawned(Event Player), 9999);	
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.Is_Crouch_On), Custom String("Talk with me"),
				Event Player, 1, Do Not Clip, Visible To Position String and Color, Global.Rainbow_Color, Default Visibility);
			Event Player.Target_Tag_ID = Last Text ID;
			Call Subroutine(Custom_Nameplate);
			Abort;
		End;

		Event Player.Effect_Storage = First Of(Filtered Array(Global.Moooush_Effect, Custom String("{0}", Current Array Element[0]) == Custom String("{0}", Event Player)));

		"Show names and pages of players"
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.Is_Crouch_On), Custom String("{0} | {1} {2}", Event Player, 
			If-Then-Else(Event Player.Mode_Cycle != -1, Event Player.Mode_Cycle, Event Player.Mode_Cycle_Default), 
			If-Then-Else(Event Player.Promoted_Rank, Icon String(Arrow: Up), Global.Rank_Icon[Event Player.Verification_Key])),
			Event Player, 1, Do Not Clip, Visible To Position and String, Color(White), Default Visibility);
		Event Player.Target_Tag_ID = Last Text ID;

		"Statuses by player menu and invisibility"
		Create HUD Text(Filtered Array(All Players(All Teams), (Current Array Element.Is_Invisible && Current Array Element == Event Player)), Null, Custom String("Invisible"), Null, 
			Top, 100, Color(White), Color(Blue), Color(White), Visible To, Visible Never);
		"TODO: Either compress invisible (or remove if invisible page needs to be removed), or delete invis message"
		Create HUD Text(Event Player, Null, Custom String("{0}", If-Then-Else(Event Player.Full_Protection, Custom String("Fully Protected"), 
			If-Then-Else(Event Player.Protection, Custom String("Protected"), Custom String("")))), Null, 
			Top, 100, Color(White), Color(Blue), Color(White), Visible To and String, Visible Never);

		"Default Variables"
		
		Event Player.Signal = False;
		Event Player.Is_Invisible = False;
		Event Player.High_Rank = False;
		Event Player.Mod_Rank = False;
		If(Array Contains(Global.Promoted_List, Custom String("{0}", Event Player)));
			Event Player.Promoted_Rank = True;
		Else;
			Event Player.Promoted_Rank = False;
		End;
		Event Player.Player_Modification = Array(100, 100, 100, 100, 100);
		Event Player.Verification_Key = 0;
		Event Player.Mod_Name_ID = Array(Null, False);
		Event Player.Protection_ID = Null;
		Event Player.Scale_Prev = 1;
		Event Player.Scale_Real = 1;
		Event Player.Is_Flying = False;
		Event Player.Target_Effect = Null;
		Event Player.Mode_Cycle = -1;
		Event Player.Mode_Cycle_Default = 0;
		Event Player.Mode_Headline = Custom String("Kill & Resurrection");
		Event Player.Mode_Hud_ID = Null;
		Event Player.DMG_Time = Null;
		Event Player.Target_Arrow_ID = Null;
		Event Player.Target_Lock = Custom String("--- No Target ---");
		Event Player.Camera = 0;
		Event Player.Scale_Hud_ID = Null;
		Event Player.Progress_Lock = False;
		Event Player.Remote_Scale = False;
		Event Player.Grap_Line = Array(Null, Null, False);
		Event Player.Mode_Description = Null;
		Event Player.Last_Position_Facing = Array(Null, Null);
		Event Player.Savezone_Access = False;
		Event Player.Damage_Reflect = False;
		Event Player.Voice_Pitch = 1;
		Event Player.Heaven_Strike_Radius = Null;
		Event Player.Heaven_Strike_ID = Array(Null, Null, False);
		Event Player.Ghost_Mode = False;
		Event Player.Slow_Projectile = False;
		Event Player.Progress_Stop = False;
		Event Player.Is_Crouch_On = False;

		Event Player.Modification_Mode_Selector = 0;
		Event Player.Modification_Scalar_Selector = 2;

		Event Player.Icon_ID = Empty Array;
		Event Player.Icons_Selector = 0;
		Event Player.Icons_Colors_Selector = 0;
		Event Player.Status_Selector = 0;

		Event Player.Jumppad_Helper = 0;
		Event Player.Jumppad_Entry = Array(Null, Null, Null, Null, Null);
		Event Player.Jumppad_Loop = 0;
		"Array: Inside_Color_Selector, Outside_Color_Selector, Radius_Selector, Strength_Selector"
		Event Player.Jumppad_Info_Array = Array(6, 5, 1, 3);
		Event Player.Jumppad_Preview = Array(Null, Null);

		"Array: Color_Selector, Size_Selector, Effect_Selector, Effect_ID, Effect_ID2"
		Event Player.Drawing_Obj_Info_Array = Array(0, 0, 0, Null, Null);

		"Array: Started, Placed, ID, Player, Text, Dot, Default, "
		Event Player.Camera_Info_Array = Array(False, False, Null, Null, Null, Null, Null);
		Event Player.Camera_Helper = Null;
		Event Player.Camera_Position = Vector(0,0,0);
		Event Player.Camera_Smooth = 0.1;
		Chase Player Variable Over Time(Event Player, Camera_Smooth, 200, 3, None);
		Event Player.Camera_Loop = 0;
		Event Player.Camera_LOS = Empty Array;
		Event Player.Camera_Target = Custom String("Currently No Target");

		Event Player.Spam_Cooldown = 3;
		Chase Player Variable At Rate(Event Player, Spam_Cooldown, 0, 1, None);

		Event Player.UNO_Hand = Empty Array;
		Event Player.UNO_Helper = Array(Null, Null, Null, Null);
		Event Player.UNO_Loop = 0;
		Event Player.UNO_Ingame = False;
		"Array: Arrow_Pos, Draw_Cards, Black_Selector, Is_Turn, Has_Drawn, Restore, Black_Logic, Black Text"
		Event Player.UNO_Info_Array = Array(0, 0, 1, False, False, False, False, Null);
		Event Player.UNO_Sorter = Array(Null, Null, Null, Null, Null);
		Event Player.Print = 0;

		Event Player.No_CD = False;
		Event Player.Full_Protection = False;

		Event Player.Positions_For_Beams = Array(Null, Null);

		Disable Game Mode HUD(Event Player);

		"Is menu Active"
		Event Player.Is_Menu_Active = True;

		Event Player.Mode_Headline = Custom String("Info Page");
		Create HUD Text(Event Player, Event Player.Mode_Cycle_Default, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
			Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
			Global.Rainbow_Color, Color(Yellow), Global.Rainbow_Color, Visible To String and Color, Visible Never);
		Event Player.Mode_Hud_ID = Last Text ID;

		Create HUD Text(Event Player, Null, 
			Custom String(" • Basic Functions:\r\n-Hold {0} : Toggle Protection (Default On).\r\n-Hold {1} : Switch Camera (5 types).\r\n{2}", 
				Input Binding String(Button(Reload)), Input Binding String(Button(Interact)), 
			Custom String("-Hold {0} : Switch Heroes.\r\n\r\n • How to use the menu:\r\n{1}", 
				Input Binding String(Button(Melee)),
			Custom String("-Hold {0} and press\r\n    {1} or {2}", 
				Input Binding String(Button(Crouch)), Input Binding String(Button(Jump)),
			Custom String("{0} to change pages.\r\n-Hold {1} and press\r\n    the shown input for an action.\r\n{2}", 
				Input Binding String(Button(Interact)), Input Binding String(Button(Crouch)),
			Custom String("-Hold {0} + {1} on\r\n    this page to hide/show menu.\r\n{2}",
				Input Binding String(Button(Crouch)), Input Binding String(Button(Melee)),
			Custom String("Chillers have more pages/options.\r\n\r\n{0}",
			Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
			))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Event Player.Mode_Description = Last Text ID;

		"Jail handler no team"
		Wait(0.1, Ignore Condition);
		If(Array Contains(Global.Jail_List[0],Custom String("{0}",Event Player)));	
			Event Player.Restricted[0] = True;
			Event Player.Index_Help = Index Of Array Value(Global.Jail_List[0], Custom String("{0}", Event Player));
			Event Player.Restricted[1] = Global.Jail_List[3][Event Player.Index_Help];
			Small Message(All Players(All Teams), Custom String("{0}", Event Player.Restricted[1]));
			Disable Text Chat(Event Player);
			Disable Voice Chat(Event Player, True, True, True);
		Else;
			Event Player.Restricted[0] = False;
			Event Player.Restricted[1] = False;
		End;

		Wait(0.2, Ignore Condition);

		"Queue of players"
		Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Null);
		Modify Global Variable(Player_Joined_Queue, Remove From Array By Value, Event Player);
		
		"Sequence Completed"
		Wait Until(Has Spawned(Event Player), 99999);
		
		"Ask for nameplates"
		Call Subroutine(Custom_Nameplate);

		"Set protection on player by default"
		Event Player.Protection = True;

		"Set auto resurrection on player by default"
		Event Player.Auto_Respawn = True;
		
		"Jail handler finds escaped prisoner"
		If(Event Player.Restricted[0]);
			Big Message(All Players(All Teams), Custom String("{0} tried to escape the jail LMAO", Event Player));
			Call Subroutine(Jail_Leaver);
		Else;
			Small Message(All Players(All Teams), Custom String(" Welcome {1} {0}", Event Player, Hero Icon String(Hero Of(Event Player))));
		End;
	}
}

rule("Dynamic_Color")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Green => Red"
		While(Global.Red < 255);
			Global.Red += 4;
			Global.Rainbow_Color = Custom Color(Global.Red, Global.Green, Global.Blue, 255);
			Wait(0.080, Ignore Condition);
		End;
		While(Global.Green > 0);
			Global.Green -= 4;
			Global.Rainbow_Color = Custom Color(Global.Red, Global.Green, Global.Blue, 255);
			Wait(0.080, Ignore Condition);
		End;
		"Red => Blue"
		While(Global.Blue < 255);
			Global.Blue += 4;
			Global.Rainbow_Color = Custom Color(Global.Red, Global.Green, Global.Blue, 255);
			Wait(0.080, Ignore Condition);
		End;
		While(Global.Red > 0);
			Global.Red -= 4;
			Global.Rainbow_Color = Custom Color(Global.Red, Global.Green, Global.Blue, 255);
			Wait(0.080, Ignore Condition);
		End;
		"Blue => Green"
		While(Global.Green < 255);
			Global.Green += 4;
			Global.Rainbow_Color = Custom Color(Global.Red, Global.Green, Global.Blue, 255);
			Wait(0.080, Ignore Condition);
		End;
		While(Global.Blue > 0);
			Global.Blue -= 4;
			Global.Rainbow_Color = Custom Color(Global.Red, Global.Green, Global.Blue, 255);
			Wait(0.080, Ignore Condition);
		End;
		Loop;
	}
}

rule ("Data") 
{
    event 
	{
        Ongoing - Global;
    }

    actions 
	{
		Global.Credits = Array(Custom String("Coded with {0} by Warloy and xMaxuss, based on TbyCoLive's work", Icon String(Heart)), 
			Custom String("Maintained with {0} by LƐafa, Community managers: MOOOUSH, RUBY & kwally", Icon String(Heart)));
		
		Global.Rank_Icon = Array(Custom String(""), Icon String(Halo), Icon String(Heart));

		Global.OffOnString = Array(Custom String("Off"), Custom String("On"));

		Global.Modification_Mode_String = Array(Custom String("Damage"), Custom String("Speed"), Custom String("Knockback"), Custom String("Gravity"));
		Global.Modification_Target_String = Array(Custom String("Yourself"), Custom String("Target"));
		
		Global.Drawing_Obj_Effects = Array(Custom String("Sphere"), Custom String("Sparkles"), Custom String("Light Shaft"),
			Custom String("Orb"), Custom String("Ring"), Custom String("Cloud"), Custom String("Good Aura"), Custom String("Bad Aura"));
		Global.Drawing_Obj_Size = Array(0.050, 0.070, 0.150, 0.400, 0.700, 1, 1.700, 2, 3, 4, 6, 8, 10);
		Global.Icons_Colors_List = Array(Color(Red), Color(Orange), Color(Black), Color(Blue), Color(Gray), Color(Green), Color(
			Lime Green), Color(Aqua), Color(Purple), Color(White), Color(Rose), Color(Sky Blue), Color(Turquoise), Color(Violet), Color(
			Yellow));
		Global.Icons_List = Array(Custom String("Bolt"), Custom String("Happy"), Custom String("Moon"), Custom String("Halo"), Custom String("Trashcan"),
			Custom String("Dizzy"), Custom String("Sad"), Custom String("Poison"), Custom String("Warning"), Custom String("Stop"),
			Custom String("Spiral"), Custom String("Radioactive"), Custom String("Skull"), Custom String("Recycle"), Custom String("No"),
			Custom String("Eye"), Custom String("Asterisk"));
		Global.Icons_List_For_Menu = Array(Icon String(Bolt), Icon String(Happy), Icon String(Moon), Icon String(Halo), Icon String(Trashcan), Icon String(
			Dizzy), Icon String(Sad), Icon String(Poison 2), Icon String(Warning), Icon String(Stop), Icon String(Spiral), Icon String(
			Radioactive), Icon String(Skull), Icon String(Recycle), Icon String(No), Icon String(Eye), Icon String(Asterisk));
		
		Global.Colors = Array(Color(White), Color(Aqua), Color(Black), Color(Blue), Color(Gray), Color(Green),
			Color(Lime Green), Color(Orange), Color(Purple), Color(Red), Color(Rose), Color(Sky Blue), Color(Turquoise), Color(Violet),
			Color(Yellow));

		Global.Status_String = Array(Custom String("Knocked Down"), Custom String("Stunned"), Custom String("Frozen"), Custom String("Burning"), Custom String("Hacked"));

		Global.Jumppad_Radius = Array(0.75, 1.75, 3, 6);
		Global.Kanezaka_Teleports = Array(Vector(-17.86, 10.50, 17.91), Vector(-1.06, 9.00, -46.18), Vector(-44.15, 11.00, -12.76), Vector(-28.72, 4.00, 41.27));

		Global.Beams = Array(Custom String("Good Beam"), Custom String("Bad Beam"), Custom String("Grapple Beam"));
		
		"Uno Cards colors: 0=black, 1=red, 2=green, 3=blue, 4=yellow"
		"Uno Cards meaning: 0-9=normal, 10=skip, 11=reverse, 12=draw2, 13=pick, 14=draw4"
		Global.UNO_Random = Array(0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4);
		Global.Card_Colors = Array(Color(Black), Color(Red), Color(Green), Color(Blue), Color(Yellow));
		Global.UNO_Colorblind = Array(Custom String("D"), Custom String("R"), Custom String("G"), Custom String("B"), Custom String("Y"));

		"Moooush Effect"
		Global.Moooush_Effect = Array(
			Array(Custom String("TbyCoLive"), Custom String("Rainbow")),
			Array(Custom String("MOOOUSH"), Custom Color(194, 151, 194, 255)),
			Array(Custom String("PapaRomeo"), Color(Green)),
			Array(Custom String("AndrewKnoll"), Color(Rose)),
			Array(Custom String("Metalgy"), Color(Red)),
			Array(Custom String("Nutzee"), Color(SkyBlue)),
			Array(Custom String("RUBY"), Color(Red))
		);
	}

}


rule ("Custom nameplates list") 
{
    event 
	{
        Ongoing - Global;
    }

    actions 
	{
		"31619 -> 31205"
		Global.Titles_And_Outlines = Array(
			Array(Custom String("Warloy"), 
                		Custom String("Fading"),
                		0,15,80, 0,15,255,
				Custom String("Notakichiōnā"), 
				Custom String("Ilo Be Zou"), 
				Custom String("Pocket Knight")
                	), 
			Array(Custom String("kwally"),
                		Custom String("Fading"),
                		0,15,80, 0,15,255,
				Custom String("notakichi"), 
				Custom String("tsuki"), 
				Custom String("ї ∂นҫӄїภғ Һαҭѡ ұσน")
                	),
			Array(Custom String("xMaxuss"), 
                		Custom String("Fading"), 
                		70,200,255, 150,225,255,
				Custom String("{0}  TO THE MAX  {0}", Ability Icon String(Hero(Sombra), Button(Ultimate))),
				Custom String("¡Hola! ¿Qué onda? {0}", Hero Icon String(Hero(Sombra)))
                	), 
			Array(Custom String("LƐafa"), 
                		Custom String("Fading"), 
                		255,0,120, 3,103,43,
                		Custom String("{0} Cherry Blossom {0}", Ability Icon String(Hero(Lifeweaver), Button(Primaryfire)))
				),
			Array(Custom String("ORCHȊD"), 
                		Custom String("Fading"), 
                		255,0,120, 3,103,43,
                		Custom String("{0} Cherry Blossom {0}", Ability Icon String(Hero(Lifeweaver), Button(Primaryfire)))
				),
			Array(Custom String("Gregi"), 
                		Custom String("Rainbow"),
                		Custom String("♥ ★ Baby D.va ★ ♥")
                		), 
			Array(Custom String("BabyLooperxo"), 
                		Custom String("Rainbow"),
                		Custom String("♥ ★ BabyLooperxo ★ ♥")
                		),
			Array(Custom String("ǀƑIREǀ"), 
                		Custom String("Rainbow"),
                		Custom String("ALT F4")
                		),
			Array(Custom String("solevaya"), 
                		Custom String("Rainbow"),
				Custom String("sole"), 
				Custom String("ginger cat"), 
				Custom String("{0}  Kyspimate  {0}", Ability Icon String(Hero(Moira), Button(Ultimate)))
				), 
			Array(Custom String("Mars"), 
                		Color(Rose),
                		Custom String("♥ Goddess Of Mercy ♥")
                		),
			Array(Custom String("Ciri"), 
                		Custom String("Rainbow"),
                		Custom String("Umbra Witch")
                		), 
			Array(Custom String("FaLLz"), 
                		Color(Orange),
                		Custom String("♥ The Sun ♥")
                		),
			Array(Custom String("Westwife"),
                		Color(Sky Blue),
                		Custom String("♥ The Moon ♥")
                		),
			Array(Custom String("SteamedHams"), 
                		Color(Purple),
                		Custom String("Steamed Chicken ♥")
                		),
			Array(Custom String("TEAMEPǃC"),
                		Color(Green),
                		Custom String("epǃc")
                		),
			Array(Custom String("ItsRui"), 
                		Custom String("Rainbow"),
                		Custom String("♥ ~ R u I ~ ♥")
                		),
			Array(Custom String("xSKIJ"), 
                		Custom String("Rainbow"),
                		Custom String("ŜKȈJ")
                		), 
			Array(Custom String("Misu"), 
                		Custom Color(201, 122, 250, 255),
                		Custom String("★ ~ Their Star ~ ★ ")
                		),
			Array(Custom String("Sadness"), 
                		Color(Black),
                		Custom String("• PROTECTOR • ")
                		), 
			Array(Custom String("Boney"), 
                		Custom String("Rainbow"),
                		Custom String("{0} BonBon {0}", Ability Icon String(Hero(Kiriko), Button(Ultimate)))
                		),
			Array(Custom String("AsyCorn"), 
                		Custom Color(200, 134, 238, 255),
                		Custom String("AsyCorn")
                		),
			Array(Custom String("Eggman"), 
                		Color(Yellow),
				Custom String("Step into the ring {0}", Hero Icon String(Hero(Doomfist))),
				Custom String("† Ulekhol Israel †"), 
				Custom String("† Mazel Tov †")
                		), 
			Array(Custom String("Emitzu"),
                		Color(Orange),
                		Custom String("K W E E N")
                		),
			Array(Custom String("x7eVeN"), 
                		Custom Color(90, 21, 200, 255),
                		Custom String("7")
                		),
			Array(Custom String("Tari"), 
                		Custom String("Rainbow"),
				Custom String("Tari ùwú"), 
				Custom String("{0} tari님 {0}", Ability Icon String(Hero(Kiriko), Button(Ability 2))), 
				Custom String("★ 여우 ★")
		                ),
			Array(Custom String("sonwukong"), 
                		Custom Color(160, 32, 240, 255),
                		Custom String("wukong"), 
                		Custom String("Deja"), 
                		Custom String("Black Cat")
                		),
			Array(Custom String("HYUA"), 
                		Custom String("Fading"),
                		156,20,5, 255,255,255,
                		Custom String("Cat"), 
                		Custom String("你妈"), 
                		Custom String("boobsponge")
                		), 
			Array(Custom String("Fuji"), 
                		Custom String("Rainbow"),
                		Custom String("J★ESTAR")
                		), 
			Array(Custom String("Xenolysith"), 
                		Custom Color(241, 196, 15, 255),
                		Custom String("Stargazer"), 
                		Custom String("Professor"), 
				Custom String("{0}  Rattenkönig  {1}", Icon String(Poison), Icon String(Radioactive))
                		), 
			Array(Custom String("Dead"), 
                		Color(Black),
                		Custom String("Supernova"), 
                		Custom String("Xena"), 
                		Custom String("Rattenkönigin")
                		), 
			Array(Custom String("Nightfire"), 
                		Custom String("Rainbow"),
                		Custom String("{0}  Ikea Man  {0}", Icon String(Bolt))
                		),
			Array(Custom String("JeyJey79"), 
                		Custom Color(235, 109, 255, 255),
                		Custom String("♥ Jey Jey ♥")
                		),
			Array(Custom String("xCleo"), 
                		Custom Color(247, 187, 229, 255),
                		Custom String("Cleo")
                		), 
			Array(Custom String("Katsuki"),
                		Custom Color(99, 5, 156, 255), 
                		Custom String("☆ ♪ Streetrunner ♪ ★")
                		),
			Array(Custom String("NNkGame"), 
                		Custom Color(107, 186, 255, 255),
                		Custom String(" • SAD  •")
                		),
			Array(Custom String("DONUT"), 
                		Color(Red),
                		Custom String("ALPHA DONUT")
                		), 
			Array(Custom String("Ghost"), 
                		Color(Black),
                		Custom String("sad ghost")
                		),
			Array(Custom String("BlueSky"), 
                		Color(Sky Blue),
                		Custom String("{0}  Skies of Blue  {0}", Ability Icon String(Hero(Mercy), Button(Ability 1)))
                		),
			Array(Custom String("Kysp"), 
                		Custom String("Fading"), 
                		28,33,54, 189,192,203,
				Custom String(" . ")
                		),
			Array(Custom String("PHEINU"), 
                		Color(Black),
                		Custom String("◆ SALMIAKKI ◆"),
				Custom String("{0}  Lead Therapist  {1}", Ability Icon String(Hero(Zenyatta), Button(Ultimate)), Ability Icon String(Hero(Genji), Button(Jump)))
		                ),
			Array(Custom String("fa89"), 
                		Color(Red),
                		Custom String("{0}  Zenyatta Gaming  {1}", Ability Icon String(Hero(Zenyatta), Button(Ability 1)), Ability Icon String(Hero(Zenyatta), Button(Ability 2)))
                		),
			Array(Custom String("BluTyde"), 
                		Color(Turquoise),
                		Custom String("Radiance")
                		),
			Array(Custom String("Ezio"), 
                		Custom Color(39, 70, 155, 255),
                		Custom String("eclipse")
                		),
			Array(Custom String("Toguro"), 
                		Color(Red),
                		Custom String("six tirs, un mort"), 
                		Custom String("Doomslayer"), 
                		Custom String("Tarnished"),
				Custom String("Unkindled"), 
                		Custom String("Metalhead")
                		),
			Array(Custom String("Sithrael"), 
                		Color(Blue),
                		Custom String("Sleepy Mercy")
                		),
			Array(Custom String("kosmos"), 
                		Custom Color(80, 179, 149, 255),
                		Custom String("{0} I'm so full from uranium yum {0}", Icon String(Radioactive)), 
				Custom String("{0} I am in your walls {0}", Icon String(Radioactive))
                		), 
			Array(Custom String("squid"),
                		Custom String("Fading"), 
                		37,103,148, 139,152,252,
				Custom String("Squidward"), 
				Custom String("swuiddy"),
				Custom String("squiddo")
                		),
			Array(Custom String("rin"), 
                		Color(Blue),
                		Custom String("{0} sleepy rin", Ability Icon String(Hero(Ana), Button(Ability 1)))
                		),
			Array(Custom String("Moistra"), 
                		Custom String("Rainbow"),
                		Custom String("{0}  Moistra 不  {0}", Ability Icon String(Hero(Cassidy), Button(Ultimate)))
                		),
			Array(Custom String("wheyfuwu"), 
                		Custom Color(219, 99, 179, 255),
                		Custom String("wheyfu"), 
                		Custom String("resident tomboy")
                		),
			Array(Custom String("GuardBoyyy"), 
                		Color(Rose),
                		Custom String("Get Death-Grip-Syndrome-d")
                		),
			Array(Custom String("MISTƔ"), 
                		Color(Rose),
                		Custom String("♥ Ally ♥")
                		),
			Array(Custom String("Atlas"), 
                		Custom Color(220, 20, 60, 255),
                		Custom String("Kit"), 
                		Custom String("Drawing Enthusiast"), 
                		Custom String("Foxlore")
                		),
			Array(Custom String("Mogo"), 
                		Custom Color(255, 192, 203, 255),
                		Custom String("♥ MOGO ♥")
                		),
			Array(Custom String("AvatarGod"), 
                		Color(Red),
                		Custom String("ＡｖａｔａｒＧｏｄ")
                		),
			Array(Custom String("FactAttend"), 
                		Custom Color(96, 10, 113, 255),
                		Custom String("☆ Avenged 7Fact ☆"), 
                		Custom String("♤ Unholy Confessions ♤")
                		), 
			Array(Custom String("Dehya"), 
                		Color(Red),
                		Custom String("Pyro King")
                		),
			Array(Custom String("Rylu"), 
                		Custom String("Rainbow"),
                		Custom String("★ onlyfans.com/rylu ★")
                		),
			Array(Custom String("Frikadelle"),
                		Custom Color(245, 198, 215, 255),
                		Custom String("《 Kitty!! 》")
                		),
			Array(Custom String("lana"), 
                		Custom String("Fading"), 
                		0,64,255, 46,189,255,
                		Custom String("spongeboob")
                		),
			Array(Custom String("Cattanklol"), 
        	        	Custom Color(64, 0, 64, 255),
	        	        Custom String("Moon's Son")
                		),
			Array(Custom String("Kiwizzlee"), 
                		Custom Color(127, 127, 78, 255),
                		Custom String("♥ Little Nugget ♥")
        		        ),

				Array(Custom String("Moe Szyslak"), 
                		Custom Color(161, 176, 236, 255), 
		                Custom String("Moe Szyslak")
                		),
			
			Array(Custom String("TbyCoLive"), 
				Custom String("Rainbow"),
				Custom String("♣ ★ D.vastation ★ ♣")
				), 
			Array(Custom String("Deira"), 
				Custom String("Rainbow"), 
				Custom String("KawaiiChan")
				),
			Array(Custom String("Ƙenzai"), 
				Custom String("Rainbow"),
				Custom String("♠ ★ Ƙenzai ★ ♠")
				), 
			Array(Custom String("Isabella"), 
				Custom String("Rainbow"),
				Custom String("♥ ★ Little Kitty ★ ♥")
				), 
			Array(Custom String("CatToast"), 
				Custom String("Rainbow"),
				Custom String("CatToast")
				),
			Array(Custom String("Silvaris"), 
				Custom Color(39, 174, 96, 255),
				Custom String("Silvaris")
				), 
			Array(Custom String("Hoxy"), 
				Custom String("Rainbow"),
				Custom String("{0} Kiriko-Chan {0}", Ability Icon String(Hero(Kiriko), Button(Ultimate)))
				), 
			Array(Custom String("Lostshadow"), 
			 	Custom String("Rainbow"),
				Custom String("★ Your Shadow ★"), 
				Custom String("Camel milk enjoyer"), 
                		Custom String("{0} #1 pharah main {0}", Ability Icon String(Hero(Pharah), Button(Ultimate)))
				), 
            		Array(Custom String("froggygutz"), 
				Custom String("Rainbow"),
				Custom String("☆ Frog Queen ☆")
				), 
			Array(Custom String("SpedySpedBoy"), 
				Custom String("Rainbow"),
				Custom String("{0}  Fire Knight  {0} ", Ability Icon String(Hero(Torbjörn), Button(Ultimate))), 
        		Custom String("♥ HUG ME (づ◡﹏◡)づ ♥"), 
				Custom String("★ Lunar's Safe Spot ★")
				),
			Array(Custom String("Lunar"), 
			 	Custom Color(255,148,250,255),
				Custom String("{0} Speedy's huggable Mercy {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))), 
				Custom String("{0} Princess of Harmony {0}", Ability Icon String(Hero(Mercy), Button(Ability 2))), 
				Custom String("{0} queen of the butterfly {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)))
				),
			Array(Custom String("Eosia"), 
				Custom Color(181, 0, 255, 255),
				Custom String("Bee's lil brother"), 
				Custom String("Luna's Kitten"), 
				Custom String("Kir's Dad")
				),
			Array(Custom String("Lou"), 
				Custom String("Rainbow"),
				Custom String("Lou")
				), 
			Array(Custom String("ugh"), 
				Color(Black),
				Custom String("SCHIZOPHRENICǃ"), 
				Custom String("Is it... the voices?")
				),
			Array(Custom String("Fære"), 
				Custom Color(246, 195, 247, 255),
				Custom String("♥︎ Fairy ♥︎"), 
				Custom String("☆ 8 ☆"), 
				Custom String("{0} Spirit Blossom  {0}", Ability Icon String(Hero(Lifeweaver), Button(Primaryfire)))
				),
			Array(Custom String("Brat"), 
			 	Custom String("Rainbow"),
				Custom String("⁂ LƐafa's biggest fan ⁂"), 
				Custom String("♡ Sad E-Kitten ♡")
				), 
			Array(Custom String("ShellBebop"), 
				Color(Black), 
				Custom String("SHELLLLLBEEEEEBOP!!"), 
				Custom String("Mr. Beast")
				),
			Array(Custom String("Shampoo"), 
				Custom String("Rainbow"),
				Custom String("♡ FAAFO ♡"), 
				Custom String("♡ Mercy Main ♡"), 
				Custom String("⁂BACONEGGNCHEESE⁂")
				),
			Array(Custom String("TURBOMURO"),
				Color(Blue),
				Custom String("highspeed")
				),
			Array(Custom String("DȈŦǾ"), 
				Custom String("Rainbow"),
				Custom String("♡ DORITO DITO ♡"), 
				Custom String("★ Ramattra Enjoyer ★"), 
				Custom String("⁂BACONEGGNCHEESE⁂")
				), 
			Array(Custom String("LeMix"), 
				Color(Yellow),
				Custom String("♡ Discord Kitten ♡"), 
				Custom String("♣ OUR MOON ♣")
				),
			Array(Custom String("Netbrex"), 
				Color(White),
				Custom String("•  LOBBY HOPPER  •"), 
				Custom String("☆  WAVE + SPRAY  ☆")
				),
			Array(Custom String("Nugget"), 
				Color(Orange),
				Custom String("• Nugs And Kisses •"), 
				Custom String("• Eat Nugs Not Drugs •")
				),
			Array(Custom String("Akaza"), 
				Color(SkyBlue),
				Custom String("♥☆ AKAZA ☆♥")
				), 
			Array(Custom String("Catgirl"), 
				Custom Color(242, 135, 190, 255),
				Custom String("★ Femboi Gayming ★")
				), 
            		Array(Custom String("Mustika"), 
				Custom Color(18, 12, 219, 255),
				Custom String("{0} ♥ Miles Morales ♥ {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate))), 
				Custom String("{0}  ムスティカ   {0}", Ability Icon String(Hero(D.va), Button(Ultimate))), 
				Custom String("{0} • Dj Sponsored by RedBull • {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)))
				),
            		Array(Custom String("YunaOnFire"), 
				Custom String("Rainbow"),
				Custom String("{0} † Gwen Stacy †   {0}", Ability Icon String(Hero(Lifeweaver), Button(Primary Fire))), 
            			Custom String("{0} 猫好き {0}", Ability Icon String(Hero(Lifeweaver), Button(Primaryfire))),
                		Custom String("{0} • D A N C E R  SP O N S O R E D  B Y  R E D B U L L •  {0}", Ability Icon String(Hero(D.Va), Button(Ultimate)))
				), 
			Array(Custom String("Slafii"), 
				        Custom String("Fading"), 
                	    0,0,0, 136,0,0,
				Custom String("{0}  P r i n c e  O f  H a r m o n y  {0}", Ability Icon String(Hero(Mercy), Button(Ability 2))), 
				Custom String("{0}  I  H Δ R D  Ɓ Σ G  Ѕ Μ Θ L F R Ψ  F Θ R  Δ  Ƥ Θ C Ƙ Σ Ƭ  {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))), 
				Custom String("{0} Ѕ Μ Θ L F R Ψ ' Ѕ  C Δ R R Ψ {0}", Ability Icon String(Hero(Pharah), Button(Ultimate)))
				    ),
			Array(Custom String("DJSmolfry"), 
				Custom Color(0, 255, 255, 255),
				Custom String("{0}  ☆ D Θ Μ Μ Ψ  Μ Θ Μ Μ Ψ ☆  {0}", Ability Icon String(Hero(Symmetra), Button(Ultimate))), 
				Custom String("{0}  ☆ Ѕ Μ Θ L R Δ D I Θ ☆  {0}", Ability Icon String(Hero(Symmetra), Button(Ability 1))), 
				Custom String("{0}  ☆ Ѕ L Δ F ' Ѕ  Ƥ Θ C Ƙ Σ Ƭ ☆   {0}", Ability Icon String(Hero(Symmetra), Button(Ability 2)))
				),
			Array(Custom String("Reapersimp"), 
				Custom Color(255, 255, 178, 255),
				Custom String("{0}  ♡ Young Sailor ♡  {0}", Ability Icon String(Hero(D.va), Button(Ultimate))), 
				Custom String("{0}  ⁂ Bretzel ⁂  {0}", Ability Icon String(Hero(D.va), Button(Ultimate)))
				),
			Array(Custom String("Mxth"), 
				Custom String("Rainbow"),
				Custom String("♥ MOE ♥"), 
				Custom String("• MYTH •"), 
				Custom String("☆ The Man The Myth The Legend ☆") 
				), 
			Array(Custom String("AliceRowe"), 
				Custom Color(204, 204, 255, 255),
				Custom String("69 with 7")
				), 
			Array(Custom String("BƑG"), 
				Color(Black),
				Custom String("⛦ Eternal Doom ⛦")
				), 
			Array(Custom String("Sinnie"), 
				Custom String("Rainbow"), 
				Custom String("{0} ♡ #1 RAMATTRA LOVER ♡ {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))),
            			Custom String("{0} ☆ GREMLIN ☆ {0}", Ability Icon String(Hero(Reaper), Button(Ultimate))),
             			Custom String("{0} † YOUR MENTALLY UNSTABLE THERAPIST † {0}", Ability Icon String(Hero(Lifeweaver), Button(Ultimate)))
				),
			Array(Custom String("Ghøst"), 
				Color(Black),
				Custom String("失恋した"), 
				Custom String("Ghostie")
				),
			Array(Custom String("Cinderhardt"), 
				Color(Sky Blue),
				Custom String("Peacekeeper Sun"), 
				Custom String("Cat's Father")
				),  
			Array(Custom String("InMoonlight"), 
				Color(Rose),
				Custom String("Cat's Mother"), 
				Custom String("♥ Caretaker Moon ♥")
				),
			Array(Custom String("BStray"), 
				Color(Black),
				Custom String("tiny granny"), 
				Custom String("☆ Goldfish ☆"), 
				Custom String("⁂ Spins for Headpats ⁂")
				), 
			Array(Custom String("jigzax"), 
				Custom Color(255, 192, 203, 255),
				Custom String("♥ Zax ♥")
				), 
			Array(Custom String("PapaRomeo"), 
				Custom String("Fading"),
				255,0,120, 3,103,43,
				Custom String("{0} Matcha Tea {0}", Ability Icon String(Hero(Ana), Button(Ability 2)))
				), 
			Array(Custom String("MopuD"), 
				Custom Color(4, 40, 143, 255),
				Custom String("The A-Train")
				),
			Array(Custom String("ElDiablo"), 
				Color(Red),
				Custom String("† Not Your Daddy †"), 
				Custom String("† E-Girl Baiter †"), 
				Custom String("† DEVILS DJ †")
				), 
			Array(Custom String("Fenetre"), 
				Color(White),
				Custom String("♣ Window ♣")
				),
			Array(Custom String("OperativeLyn"), 
				Color(Rose),
				Custom String("♥ WISHY WASHY's ♥"), 
				Custom String("♥ WISHY'S ♥"), 
				Custom String("★ Wishmaster ★")
				), 
			Array(Custom String("Seli"),
				Custom Color(247, 187, 229, 255),
				Custom String("† Saros  †"), 
				Custom String("⁂ Penguin Enjoyer ⁂")
				), 
			Array(Custom String("Lexa"), 
				Custom String("Rainbow"), 
				Custom String("☆ Seli's wife ☆")
				),
			Array(Custom String("Hxneibee"), 
				Color(White),
				Custom String("愛"), 
				Custom String("♡ Ken’s lil sister ♡"), 
				Custom String("Camel milk hater")
				),
			Array(Custom String("Blueberrycow"), 
				Custom Color(175, 216, 255, 255),
				Custom String("♡★baby cow★♡")
				), 
            		Array(Custom String("YeastBeast"), 
				Custom String("Rainbow"),
				Custom String("{0} †ＨＩＧＨＬＹ ＩＮＦＥＣＴＩＯＵＳ† {0}", Ability Icon String(Hero(Sombra), Button(Ultimate))), 
                		Custom String("{0} Mrs. Beast {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate))), 
				Custom String("{0} •ＨＥＡＤ•ＰＡＴＳ•ＰＬＥＡＳＥ• {0}", Ability Icon String(Hero(Kiriko), Button(Ability 2)))
				),
			Array(Custom String("fishy"), 
				Custom Color(155, 9, 30, 255),
				Custom String("{0}• Sammy • {0}", Ability Icon String(Hero(Hanzo), Button(Ultimate))), 
				Custom String("{0} ♥ Sylvari Adorer ♥ {0}", Ability Icon String(Hero(Hanzo), Button(Ultimate))), 
				Custom String("{0} ♣ Winter Prince ♣ {0}", Ability Icon String(Hero(Hanzo), Button(Ultimate)))
				),
            		Array(Custom String("TazE"),
				Color(Purple),
				Custom String("ヴィ")
				), 
			Array(Custom String("Mettlis"),
				Custom Color(245, 4, 4, 255),
				Custom String("♡ METTLIS ♡")
				), 
			Array(Custom String("ori6072"), 
				Color(Black),
				Custom String("♣ DEMON KING DIO ♣")
				),
			Array(Custom String("Metalgy"), 
				Custom Color(245, 14, 10, 255),
				Custom String("♥ Metal Tea ♥"), 
				Custom String("♥ Trans King ♥"), 
				Custom String("Silly Willy")
				), 
			Array(Custom String("AndrewKnoll"), 
				Custom String("Fading"),
				222,11,27, 169,37,207,
				Custom String("⁂ COOKIE ANDREW ⁂"), 
                		Custom String("Rindfleischetikettierungsüberwachungsaufgabenübertragungsgesetzussy")
				),
			Array(Custom String("AŊÍKÍ"),
				Color(White),
				Custom String("TheBestANIKI"), 
				Custom String("Bunnies")
				), 
            		Array(Custom String("Kêñ"), 
				Color(Black),
				Custom String("☆ E-Girl Collector ☆"), 
				Custom String("† Ain’t yo Daddy †"), 
				Custom String("♥ Bee’s Big brother ♥") 
				), 
			Array(Custom String("Nef"),	
				Custom Color(176, 255, 240, 255),
				Custom String("☆ NEFFY ☆"), 
				Custom String("☆ HEAD PATTER ☆")
				),
			Array(Custom String("Secré"), 
				Color(Rose),
				Custom String("♥Yamato simp♥"), 
				Custom String("☆Anime Enjoyer☆")
				),
			Array(Custom String("EvilKitten"), 
				Custom Color(255, 170, 192, 255),
				Custom String("Evil Danny"), 
				Custom String("♡Bakugo Katsuki Simp♡"), 
				Custom String("☆Great Explosion Mvrder God Dynamight☆")
				), 
			Array(Custom String("bbĸ"), 
				Custom Color(214, 141, 229, 255),
				Custom String(" B B K "), 
				Custom String("kiriko"), 
				Custom String("♥ No #1 Baptiste Enjoyer ♥")
				),
			Array(Custom String("lostsektor"), 
				Custom Color(56, 149, 251, 255),
				Custom String("• A L E •")
				),
			Array(Custom String("Leestick"), 
				Color(Green),
				Custom String("LeafLover"), 
				Custom String("{0} TrashLord {0}", Icon String(Trashcan))
				), 
			Array(Custom String("RUBY"), 
				Custom String("Fading"), 
				0,0,0, 152,195,243,
				Custom String("☆ RUBYX CUBE ☆"), 
				Custom String("HAS SLEEP PARALYSIS")			
				),
			Array(Custom String("Nutzee"), 
				Custom String("Fading"), 
				255,255,255, 152,195,243,
				Custom String("SLEEP PARALYSIS DEMON"), 
				Custom String("NUT")
				),
			Array(Custom String("Dashy"), 
				Custom Color(245, 4, 4, 255),
				Custom String("♡ KWEEN ♡")
				), 
			Array(Custom String("ThatAspect"), 
				Color(Purple),
				Custom String(" † ASPECT † "),
				Custom String("{0} Golden Experience {0}", Ability Icon String(Hero(Zenyatta), Button(Ultimate))), 
				Custom String("{0} Crimson Dusk {0}", Ability Icon String(Hero(Reaper), Button(Ultimate)))
				), 
			Array(Custom String("Vanessav"), 
				Color(Purple),
				Custom String("♥ Assassin ♥"), 
				Custom String("♥ Wrathful One ♥")
				),
			Array(Custom String("현대적인쌍봉낙타"), 
				Custom String("Rainbow"),
				Custom String("{0}  ファウスト  {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))),
				Custom String("{0}  INTP  {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)))
				),
			Array(Custom String("Dubbie7"), 
				Custom String("Rainbow"),
				Custom String("{0}  D U B V I O U S  {0}", Ability Icon String(Hero(Kiriko), Button(Ultimate))),
				Custom String("{0}  Dubbie the dummie  {0}", Ability Icon String(Hero(Roadhog), Button(Ultimate)))
				), 
			Array(Custom String("MOOOUSH"), 
				Custom Color(194, 151, 194, 255),
				Custom String("{0} (っ--)っ {0}", Ability Icon String(Hero(Mercy), Button(Jump))), 
				Custom String("{0} ＴＯＰ ５００ ＢＲＯＮＺＥ {0}", Ability Icon String(Hero(Genji), Button(Primary Fire)))
				),
			Array(Custom String("Zxtyi"), 
				Custom String("Rainbow"),
				Custom String("{0} CYBER, IM NOT A FEM BOY {0}", Ability Icon String(Hero(Genji), Button(Ultimate))), 
				Custom String(" Z X T Y I "), 
				Custom String("{0} Ｃｈａｒｉｓｍａｔｉｃａｌｌｙ    Ｄｅｐｒｅｓｓｅｄ {0}", Icon String(Spade))
				),
			Array(Custom String("Żmij"), 
				Custom Color(128, 0, 0, 255),
				Custom String("< Viper that doesn't bite >")
				),
			Array(Custom String("FrostSlvt"), 
				Custom Color(255, 140, 140, 255),
				Custom String("{0} Frostie {0}", Ability Icon String(Hero(Kiriko), Button(Ultimate))), 
        		Custom String("{0} Smooches For Girlies {0}", Ability Icon String(Hero(Widowmaker), Button(Ultimate))), 
				Custom String("♥ Girlie lover ♥")
				),
			Array(Custom String("karlybarly"), 
				Custom String("Rainbow"),
				Custom String("{0} 莉 {0}", Ability Icon String(Hero(D.va), Button(Ultimate))), 
				Custom String("{0} くそがき  {0}", Ability Icon String(Hero(Kiriko), Button(Ability 2))), 
				Custom String("{0} sparrow enjoyer  {0}", Ability Icon String(Hero(Mercy), Button(Jump)))
				), 
			Array(Custom String("かなかけ"), 
				Custom String("Rainbow"),
				Custom String("{0} ♡ orisa my beloved ♡ {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))), 
				Custom String("{0} おっさん {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)))
				),
			Array(Custom String("fenmorre"), 
				Custom Color(255, 24, 0, 255),
				Custom String("♡ #1 QUEST'S DISCORD KITTEN ♡ "), 
				Custom String("{0} REAPER76 WORSHIPPER {0} ", Ability Icon String(Hero(Reaper), Button(Ability 1))), 
				Custom String("{0}  HITMAN ARTIST {0} ", Ability Icon String(Hero(Ana), Button(Ability 1)))
				),
			Array(Custom String("Edeeeeen"), 
				Custom Color(100, 50, 255, 255),
				Custom String("♥ Lifeguard Cassidy lover ♥"), 
				Custom String("Silly Catboy :3"), 
				Custom String("{0}  Adam's malewife  {0} ", Ability Icon String(Hero(Mercy), Button(Ability 1)))
				),
			Array(Custom String("yohan"),
				Custom String("Rainbow"), 
				Custom String("{0}  B A H A G H A R I  {0}", Ability Icon String(Hero(Junker Queen), Button(Ultimate))), 
				Custom String("{0}  Currently Has A Cowboy Hostage  {0}", Ability Icon String(Hero(Cassidy), Button(Primaryfire))), 
				Custom String("{0} HUCKLEBERRY {0}", Ability Icon String(Hero(Cassidy), Button(Ultimate)))
				),
			Array(Custom String("AMATERASU"), 
				Custom String("Rainbow"),
				Custom String("{0} ☆ 天照大御神 ☆ {0}", Ability Icon String(Hero(Kiriko), Button(Secondary Fire))), 
				Custom String("{0} ☆ P S Y C H O ☆ {0}", Ability Icon String(Hero(Cassidy), Button(Ultimate)))
				),
			Array(Custom String("Colestar24"), 
				Custom String("Rainbow"),
				Custom String("{0}  P U P P Y  {0}", Ability Icon String(Hero(Cassidy), Button(Ultimate)))
				),
			Array(Custom String("YėsNø"), 
				Custom String("Rainbow"),
				Custom String("† ＷＥＥＤ ＥＮＪＯＹＥＲ †")
				),
			Array(Custom String("Erin"), 
				Color(Purple),
				Custom String("{0} ☆Ｓｉｌｅｎｔ Ｋｉｒｉｋ0☆ {0}", Ability Icon String(Hero(Kiriko), Button(Ultimate)))
				),
			Array(Custom String("CyberSentai"), 
				Custom String("Rainbow"),
       			Custom String("{0} CERTIFIED ANKLE BITER  {0}", Icon String(Warning)), 
				Custom String("{0} Ｃｈａｒｉｓｍａｔｉｃａｌｌｙ    Ｄｅｐｒｅｓｓｅｄ  {0}", Icon String(Moon)),  
				Custom String("{0} セイバー ♡  {0}", Ability Icon String(Hero(Mercy), Button(Jump)))
				),
			Array(Custom String("sushiii"), 
				Custom String("Rainbow"),
				Custom String("{0} sushiii wooshiii {0}", Ability Icon String(Hero(Genji), Button(Ultimate))),
				Custom String("{0} 鮨 {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate)))
				), 
			Array(Custom String("woof"), 
				Custom String("Rainbow"),
				Custom String(" ☆ skogaholmslimpa enjoyer ☆ "), 
				Custom String("{0} ♥ PERSONAL PIKACHU ♥ {0}", Ability Icon String(Hero(D.Va), Button(Ultimate))), 
				Custom String("{0} vi tar den svarta pärlan, savvy? {0}", Ability Icon String(Hero(Ana), Button(Ability 1)))
				),
			Array(Custom String("MissImmortal"), 
				Color(Red),
				Custom String(" 不滅の "), 
				Custom String("{0} Lord of the Sith {0}", Ability Icon String(Hero(Moira), Button(Ability 2))), 
				Custom String("{0} Sigma Enjoyer {0}", Ability Icon String(Hero(Sigma), Button(Ultimate)))
				), 
			Array(Custom String("Bendude1000"), 
				Color(Purple),
				Custom String(" R A T ")
				),
			Array(Custom String("Aki"), 
				Custom Color(255, 0, 0, 255),
				Custom String("{0}  秋  {0}", Ability Icon String(Hero(Ana), Button(Ability 1)))
				),
			Array(Custom String("MsHeartBreak"), 
				Custom String("Rainbow"),
				Custom String("♡  心碎  ♡"), 
				Custom String("† Succubus †")
				),
			Array(Custom String("A1IZEN"), 
				Custom Color(167, 76, 248, 255),
				Custom String("{0}  ♥ XMUMU ENJOYER ♥  {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate))), 
				Custom String("{0} ★ Turkish kebab ★ {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate)))
				),
			Array(Custom String("xMumu"), 
				Color(Rose),
				Custom String("{0}  ♥ A1IZEN ENJOYER ♥   {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate))), 
				Custom String("{0}  ★ ♥ PlayGround Bride ♥ ★ {0}", Ability Icon String(Hero(Ramattra), Button(Ultimate)))
				),
			Array(Custom String("Triin1ty"), 
				Custom String("Rainbow"),
				Custom String("♥ Cutie Patootie ♥"), 
				Custom String("{0} ♡ Naiad ♡ {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)))
				),
			Array(Custom String("LȄAƑIƐ"), 
				Custom Color(206, 204, 255, 255), 
				Custom String("葉"), Custom String("☆☆☆ rain makes leaves wet ☆☆☆"), 
               			Custom String("{0}  MISS LEAFIE ME ALONE  {0}", Ability Icon String(Hero(Lifeweaver), Button(Primary Fire))), 
                		Custom String("{0}  ♥ ur moms favourite uwu ♥  {0}", Ability Icon String(Hero(Mercy), Button(Ability 1)))
				),
			Array(Custom String("Lannaanna"), 
				Custom String("Rainbow"), 
				Custom String("{0}  ♥ Genji Simp ♥  {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))),
                		Custom String("{0}  ♥ LANA THE BANANA ♥  {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))), 
				Custom String("{0}  Headpats acceptable  {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)))
				),
           		Array(Custom String("Eskay"), 
				Custom String("Rainbow"),
				Custom String("NEVER MISSED A LUCIO ROLLOUT ONCE")
				),
			Array(Custom String("Riwa"),
				Custom Color(201, 0, 10, 255),
				Custom String("SUSSY"), 
				Custom String("♥ RIWA ♥ "), 
                		Custom String("{0}  • フェニックス •  {0}", Ability Icon String(Hero(Mercy), Button(Ultimate)))
				),
			Array(Custom String("Asta"), 
				Custom String("Rainbow"),
				Custom String("{0} アスタ {0}", Ability Icon String(Hero(Genji), Button(Ultimate))), 
				Custom String("{0} Ｃｈａｒｉｓｍａｔｉｃａｌｌｙ    Ｄｅｐｒｅｓｓｅｄ {0}", Ability Icon String(Hero(Mercy), Button(Ultimate))),
				Custom String("リベ")
				),
			Array(Custom String("DaisyMoo"), 
				Custom String("Rainbow"),
				Custom String("♡  Mommy Cow  ♡")
				)
		);
	}
}

rule("Search for players in custom nameplates list and call subroutines")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Event Player.Is_Invisible == False;
	}

	actions
	{
        For Player Variable(Event Player, Players_Global_Array, 0, Count Of(Global.Titles_And_Outlines), 1);
			If(Custom String("{0}", Event Player) == Global.Titles_And_Outlines[Event Player.Players_Global_Array][0]); 
				If(Global.Titles_And_Outlines[Event Player.Players_Global_Array][1] == Custom String("Fading"));
					Event Player.Player_Title_And_Outline = Array(
						Global.Titles_And_Outlines[Event Player.Players_Global_Array][0],
						Global.Titles_And_Outlines[Event Player.Players_Global_Array][1],
						Array Slice(Global.Titles_And_Outlines[Event Player.Players_Global_Array], 2, 3),
						Array Slice(Global.Titles_And_Outlines[Event Player.Players_Global_Array], 5, 3),
						Array Slice(
							Global.Titles_And_Outlines[Event Player.Players_Global_Array], 8, Count Of(Global.Titles_And_Outlines[Event Player.Players_Global_Array])));
				Else;
					Event Player.Player_Title_And_Outline = Array(
						Global.Titles_And_Outlines[Event Player.Players_Global_Array][0], 
						Global.Titles_And_Outlines[Event Player.Players_Global_Array][1],
						Array Slice(
							Global.Titles_And_Outlines[Event Player.Players_Global_Array], 2, Count Of(Global.Titles_And_Outlines[Event Player.Players_Global_Array])));
				End;
				Start Rule(Give_Custom_Nameplate, Do Nothing);
				Start Rule(Give_Custom_Outline, Do Nothing);
				Abort;
			End;
			Wait(0.020, Ignore Condition);
		End;
	}
}

rule ("Subroutine: Give_Custom_Nameplate")
{
    event 
	{
		Subroutine;
		Give_Custom_Nameplate;
    }

    actions 
	{	
		Abort If Condition Is False;
		Disable Nameplates(Event Player, All Players(All Teams));
		If(Event Player.Player_Title_And_Outline[1] == Custom String("Rainbow"));
			Destroy In-World Text(Event Player.Player_Nameplates);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), 
				Event Player.Player_Title_And_Outline[2][Modulo(Round To Integer(Global.Main_Chaser / 6, Down), Count Of(Event Player.Player_Title_And_Outline[2]))], 
				Event Player, 0.98, Clip Against Surfaces, Visible To Position and Color, Global.Rainbow_Color, Visible Never);

		Else If(Event Player.Player_Title_And_Outline[1] == Custom String("Fading"));
			Destroy In-World Text(Event Player.Player_Nameplates);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), 
				Event Player.Player_Title_And_Outline[4][Round To Integer(Global.Main_Chaser / 6, Down) % Count Of(
				Event Player.Player_Title_And_Outline[4])], Event Player, 0.980, Clip Against Surfaces, Visible To Position and Color,
				Custom Color(
					Round To Integer((Event Player.Player_Title_And_Outline[2][0] + Event Player.Player_Title_And_Outline[3][0]) / 2 + Sine From Radians(Global.Main_Chaser) * 
						((Event Player.Player_Title_And_Outline[2][0] - Event Player.Player_Title_And_Outline[3][0]) / 2), Down), 
					Round To Integer((Event Player.Player_Title_And_Outline[2][1] + Event Player.Player_Title_And_Outline[3][1]) / 2 + Sine From Radians(Global.Main_Chaser) * 
						((Event Player.Player_Title_And_Outline[2][1] - Event Player.Player_Title_And_Outline[3][1]) / 2), Down),
					Round To Integer((Event Player.Player_Title_And_Outline[2][2] + Event Player.Player_Title_And_Outline[3][2]) / 2 + Sine From Radians(Global.Main_Chaser) * 
						((Event Player.Player_Title_And_Outline[2][2] - Event Player.Player_Title_And_Outline[3][2]) / 2), Down), 
					255), 
				Visible Never);

		Else;
			Destroy In-World Text(Event Player.Player_Nameplates);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), 
				Event Player.Player_Title_And_Outline[2][Round To Integer(Global.Main_Chaser / 6, Down) % Count Of(
				Event Player.Player_Title_And_Outline[2])], Event Player, 0.980, Clip Against Surfaces, Visible To and Position,
				Event Player.Player_Title_And_Outline[1], Visible Never);
		End;
		Event Player.Player_Nameplates = Last Text Id;
		Wait(30, Abort When False);
		Loop;
    }
}


rule ("Subroutine: Give_Custom_Outline")
{
    event 
	{
		Subroutine;
		Give_Custom_Outline;
    }

    actions 
	{
		Abort If Condition Is False;
		Event Player.Is_Title_Given = True;
		If(Event Player.Player_Title_And_Outline[1] == Custom String("Rainbow"));
			Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Global.Rainbow_Color, Always);
			Wait(0.2, Ignore Condition);
			Loop;
		End;
		If(Event Player.Player_Title_And_Outline[1] == Custom String("Fading"));
			Start Forcing Player Outlines(Event Player, All Players(All Teams), True, 
				Custom Color(
					Round To Integer((Event Player.Player_Title_And_Outline[2][0] + Event Player.Player_Title_And_Outline[3][0]) / 2 + Sine From Radians(Global.Main_Chaser) * 
						((Event Player.Player_Title_And_Outline[2][0] - Event Player.Player_Title_And_Outline[3][0]) / 2), Down), 
					Round To Integer((Event Player.Player_Title_And_Outline[2][1] + Event Player.Player_Title_And_Outline[3][1]) / 2 + Sine From Radians(Global.Main_Chaser) * 
						((Event Player.Player_Title_And_Outline[2][1] - Event Player.Player_Title_And_Outline[3][1]) / 2), Down),
					Round To Integer((Event Player.Player_Title_And_Outline[2][2] + Event Player.Player_Title_And_Outline[3][2]) / 2 + Sine From Radians(Global.Main_Chaser) * 
						((Event Player.Player_Title_And_Outline[2][2] - Event Player.Player_Title_And_Outline[3][2]) / 2), Down), 
					255), Always);
			Wait(0.2, Ignore Condition);
			Loop;
		Else;
			Start Forcing Player Outlines(Event Player, All Players(All Teams), True, Event Player.Player_Title_And_Outline[1], Always);
			Wait(5, Ignore Condition);
			Loop;
		End;
    }
}

rule("Re-evaluate nameplates (name covers title hardcode fix)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Is_Title_Given || Event Player.Regular_Player_Has_Title) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Invisible == False;
	}

	actions
	{
		Disable Nameplates(Event Player, All Players(All Teams));
		Wait(30, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Listed_Player")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		"Automatic High Rank"
		Global.High_Rank = Array(
			Custom String("Warloy"), Custom String("xMaxuss"), Custom String("LƐafa"), Custom String("ORCHȊD"),
			Custom String("Moe Szyslak"), Custom String("Hoxy"), Custom String("xSKIJ"), Custom String("Titanaboa"), Custom String("Toguro"), Custom String("kwally"),  
			Custom String("MOOOUSH"),
			Custom String("BlueSky"), Custom String("PHEINU"), Custom String("Kysp"), Custom String("wheyfuwu"), 
			Custom String("Dead"), Custom String("Xenolysith"), 
			Custom String("squid"), Custom String("AndrewKnoll"), Custom String("Leestick"),
			Custom String("Nutzee"), Custom String("Metalgy"), Custom String("PapaRomeo"), Custom String("RUBY"), 
			Custom String("Miowell"), Custom String("Mettlis"), Custom String("Brat"), Custom String("CyberSentai"),
			Custom String("Mustika"), Custom String("xMumu"), Custom String("Shampoo"), 
			Custom String("xCleo"), Custom String("YeastBeast"), Custom String("ShellBebop"), Custom String("Dubbie7"),
			Custom String("MissImmortal"), Custom String("Zxtyi"), Custom String("Bendude1000"));
			
		"Automatic Mod"
		Global.Mod_Rank = Array(
			Custom String("GhostCreamys"), Custom String("GhostPeachys"), Custom String("Rylu"), Custom String("Mogo"), 
			Custom String("Ashe62"), Custom String("GuardBoyyy"), Custom String("MISTƔ"), Custom String("ElDiablo"), 
			Custom String("Żmij"), Custom String("FaLLz"), Custom String("Sithrael"), Custom String("Xawren"), Custom String("SteamedHams"),
			Custom String("LilDenny"), Custom String("Ezio"), Custom String("BluTyde"), Custom String("Drakosha"), 
			Custom String("Blueberry"), Custom String("Moistra"), Custom String("DONUT"), Custom String("BabyLooperxo"), Custom String("Silvaris"), 
			Custom String("Nightfire"), Custom String("JeyJey79"), Custom String("BoraGone"), Custom String("Lostshadow"), 
			Custom String("Westwife"), Custom String("Wishy"), Custom String("Bluberrycow"), Custom String("DaisyMoo"),
			Custom String("AliceRowe"), Custom String("ÃŅĞĘŁŘØM"), Custom String("Slafii"), Custom String("DJSmolfry"),
			Custom String("Emitzu"), Custom String("Empurios"), Custom String("Charukin"), Custom String("Seli"), 
			Custom String("Misu"), Custom String("Gregi"), Custom String("Mars"), Custom String("Jarvis"), 
			Custom String("ǀƑIREǀ"), Custom String("Larfleeze"), Custom String("ItsRui"), Custom String("TEAMEPǃC"), 
			Custom String("Minee"), Custom String("CatToast"), Custom String("Joyy"), Custom String("TbyCoLive"), 
			Custom String("Ciri"), Custom String("ŜǓƘǓŊǍ"), Custom String("Fuji"), Custom String("AsyCorn"), 
			Custom String("Sadness"), Custom String("SpedySpedBoy"), Custom String("Alex"), Custom String("Frikadelle"), Custom String("BigeN"), Custom String("Cattanklol"), 
			Custom String("Kiwizzlee"), Custom String("Cinderhardt"), Custom String("BStray"), Custom String("InMoonlight"),
			Custom String("Boney"), Custom String("tsunde"), Custom String("sonwukong"), Custom String("solevaya"), 
			Custom String("AvatarGod"), Custom String("rin"), Custom String("kosmos"), 
			Custom String("HYUA"), Custom String("fa89"), Custom String("Lunar"), Custom String("ThatAspect"), 
			Custom String("DȈŦǾ"), Custom String("GhostPunch"), Custom String("Atlas"), Custom String("Vigil"), 
			Custom String("lana"), Custom String("mourne"), Custom String("Erin"), 
			Custom String("BoraGone"), Custom String("FaLLz"), Custom String("だ６９"), Custom String("ugh"), 
			Custom String("Akaza"), Custom String("Catgirl"), Custom String("x7eVeN"), Custom String("BƑG"), 
			Custom String("MopuD"), Custom String("ori6072"), Custom String("OperativeLyn"), Custom String("froggygutz"), 
			Custom String("Ghøst"), Custom String("TURBOMURO"), Custom String("Mxth"), Custom String("AŊÍKÍ"), Custom String("EvilKitten"),
			Custom String("Dashy"), Custom String("Núgget"), Custom String("Blueberrycow"), Custom String("bbĸ"), Custom String("lostsektor"),
			Custom String("Lexa"), Custom String("Secré"), Custom String("Hxneibee"), Custom String("Fenetre"), 
			Custom String("Sinnie"), Custom String("TazE"), Custom String("A1IZEN"), 
			Custom String("Triin1ty"), Custom String("LȄAƑIƐ"), Custom String("Aki"), Custom String("MsHeartBreak"), 
			Custom String("Eskay"), Custom String("aisuh"), Custom String("Lannaanna"), Custom String("fishy"),
			Custom String("Fære"), Custom String("Netbrex"), Custom String("minori"), Custom String("YėsNø"), 
			Custom String("woof"), Custom String("yohan"), Custom String("karlybarly"), Custom String("Reapersimp"), Custom String("Deira"), 
			Custom String("Riwa"), Custom String("현대적인쌍봉낙타"), Custom String("Colestar24"), Custom String("YunaOnFire"),
			Custom String("FrostSlvt"), Custom String("Dubbie7"), Custom String("NotForYou"), Custom String("fenmorre"), 
			Custom String("Edeeeeen"), Custom String("Eosia"), Custom String("Hestia"), Custom String("sushiii"),
			Custom String("AMATERASU"), Custom String("かなかけ"), Custom String("Tedz"), Custom String("Lunarion"),
			Custom String("Asta"), Custom String("PŏŏkiƐ"), Custom String("Yohakzu"), Custom String("Ðårk"), 
			Custom String("Nickyunited7"), Custom String("Kazuma"), Custom String("Kazumi"), Custom String("PaulineP"), Custom String("Dehya"),
			Custom String("Jermuseppo"), Custom String("FactAttend"), Custom String("Tari"));
			
		
		"Demoted"
		Global.Demoted = Array(Custom String("Eggman"), Custom String("Fragoso"), Custom String("Joĸer"), Custom String("Nef"), Custom String("Kêñ"), Custom String("Snow"), 
                Custom String("Boyka619"), Custom String("White"), Custom String("Mikasa"), Custom String("avocados"), Custom String("godfaceim"), Custom String("Snaiy"), 
				Custom String("Anos"), Custom String("Hinata"), Custom String("Mohamed"), Custom String("LeMix"));
		
		"Automatic Ban"
		Global.Perma_Banned = Array(
			Custom String("October"), Custom String("Theta"), Custom String("Nezuko"), Custom String("blueberry!"), Custom String("Libertot"), Custom String("Heretic"),
			Custom String("Simplicity"), Custom String("IloveBirds"), Custom String("Kyger100"), Custom String("Potato"), Custom String("Apotato2182"), Custom String("dean"), 
			Custom String("BoneStealer"), Custom String("TwitchPoison"), Custom String("Mardothiel"), Custom String("DJBASTION"), Custom String("JoltWave"), Custom String("MrBastion"), 
			Custom String("PINKBASTIONǃ"), Custom String("HyperBastion"), Custom String("godfaceiem"), Custom String("ZenWick"), Custom String("alhrbe"),
			Custom String("BebeUwU"), Custom String("Heather"), Custom String("Katsuki"), Custom String("Nicolol123"), Custom String("Raymond"), Custom String("Dar7bi"), 
			Custom String("NITRO"), Custom String("Claire"), Custom String("oxox"), Custom String("SALEH"), Custom String("GarnetKodo"), Custom String("KaijoSan"), CUstom String("ZORO"),
			Custom String("AL7"), Custom String("w7sh12"), Custom String("ammar"), Custom String("WYPCS"), Custom String("ＡＺＡＬＥＡ"), Custom String("GHOSTǃ"), Custom String("SALEH"),
			Custom String("Stars"), Custom String("DantefromDMC"), Custom String("Salt"), Custom String("Coydn"), Custom String("Joban"), Custom String("KadenLee25"),
			Custom String("Jethrothedog"), Custom String("LongDongSlvr"), Custom String("Xasteriaǃ"), Custom String("C920HDPRO"), Custom String("montymoops42"), 
			Custom String("CharlieNaiss"), Custom String("CATMOM"), Custom String("Pjinsky"), Custom String("Clevy"), Custom String("wdbo"), Custom String("GeMaoTa"),
			Custom String("MoHui"), Custom String("SilentSword"), Custom String("MonkeyMan"), Custom String("FearlessMoon"), Custom String("Fleabag"), Custom String("scarey"),
			Custom String("uniflest"), Custom String("slaszi"), Custom String("Kidnamedsaul"),  Custom String("CRIANIN"), Custom String("ÉDP445"), 
            Custom String("ST1NKY"), Custom String("preston"), Custom String("joebiden8888"), Custom String("BALLZ123BEN"), Custom String("ĄŁÜ"), Custom String("Reyes"), Custom String("UltiMatt"),
            Custom String("Monsoon"), Custom String("mune"), Custom String("gunk"), Custom String("Fitchiana"), Custom String("D0M1N0S"), Custom String("Dvasonlyfans"), Custom String("Kronik"),
           	Custom String("MØØNLȊGHT"), Custom String("starluvs"), Custom String("rüman"), Custom String("BigTyrone"), Custom String("gangweedMLG"), 
            Custom String("DarthUnivers"), Custom String("MelTrini"), Custom String("Oskillz"), Custom String("sladowkraj"), Custom String("GenjCum"), Custom String("Sid"), 
            Custom String("pancake69"), Custom String("DŽǼǸȆ"), Custom String("splash"), Custom String("GR00MER"), Custom String("Gr00med"), Custom string("Ya3loo9zadio"), Custom String("Enandaxis"), 
			Custom String("GiantMilkDud"), Custom String("vel"), Custom String("ĴƐƑƑƐǷǷŜƐĬŊ"), Custom String("GoblinSexual"), Custom String("PepsiMan69"), Custom String("Enandaxis"), 
			Custom String("DIMT"), Custom String("Popka"), Custom String("dobarčovjek"), Custom String("Azereth"), Custom String("DragonFire"), Custom String("SheepyDream"),
			Custom String("DireRaven"), Custom String("hesuskristus"), Custom String("LeãoLivre"), Custom String("NANA"), Custom String("soleil"), 
			Custom String("GoldSeal"), Custom String("Parkkis"), Custom String("miro22"), Custom String("lilslvt"), CUstom String("takumi"), Custom String("Hercules"), 
            Custom String("Kisuke"), CUstom String("Dãrk"), Custom String("MESH3L"), Custom String("n1renn"), Custom String("SHINIxMIZU"));
	}
}

rule("Player_Rank_Execute")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Verification_Key == 0;
		Has Spawned(Event Player) == True;
		(Array Contains(Global.High_Rank, Custom String("{0}", Event Player)) || Array Contains(Global.Mod_Rank, Custom String("{0}",
			Event Player))) == True;
		Array Contains(Global.Demoted, Custom String("{0}", Event Player)) == False;
	}

	actions
	{
		Wait(0.1, Ignore Condition);
		If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player)));
			Event Player.High_Rank = True;
			Event Player.Verification_Key = 2;
			If(Event Player != Host Player);
				Skip If(Is Dummy Bot(Event Player), 1);
				Call Subroutine(Hud_Elements);
			End;
		Else If(Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player)));
			Event Player.Mod_Rank = True;
			Event Player.Verification_Key = 1;
			If(Event Player != Host Player);
				Skip If(Not(Event Player.Promoted_Rank) || Event Player.Restricted[0], 1);
				Big Message(All Players(All Teams), Custom String("{0} got promoted!", Event Player));
				Call Subroutine(Hud_Elements);
			End;
		End;
		Event Player.Is_Menu_Active = True;
		If(Event Player.Is_Flying);
			Event Player.Is_Flying = False;
			Set Gravity(Event Player, Event Player.Player_Modification[3]);
		End;
		Event Player.Player_Modification[0] = 100;
		Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);

		Event Player.Mode_Cycle = 0;
		Event Player.Mode_Cycle_Default = -1;

		Destroy HUD Text(Event Player.Mode_Description);
		Destroy HUD Text(Event Player.Mode_Hud_ID);

		Event Player.Mode_Headline = Custom String("Info Page");
		Create HUD Text(Event Player, Event Player.Mode_Cycle, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
			Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
			Global.Rainbow_Color, Color(Yellow), Global.Rainbow_Color, String and Color, Visible Never);
		Event Player.Mode_Hud_ID = Last Text ID;

		If(Event Player.Promoted_Rank || Not(Event Player.High_Rank || Event Player.Mod_Rank));
			Create HUD Text(Event Player, Null, 
				Custom String(" • Basic Functions:\r\n- Hold Reload : Toggle Protection (Default On).\r\n- Hold Interact : Switch Camera (5 types).\r\n{0}", 
				Custom String("- Hold Melee : Switch Heroes.\r\n\r\n • How to use the menu:\r\n{0}", 
				Custom String("- Crouch and press\r\n    {0} or {1}", Input Binding String(Button(Jump)),
				Custom String("{0} to change pages.\r\n- Crouch and press\r\n    the shown input for an action.\r\n{1}", 
					Input Binding String(Button(Interact)), 
				Custom String("- Crouch + {0} on\r\n    this page to hide/show menu.\r\n{1}", Input Binding String(Button(Melee)),
				Custom String("Chillers have more pages/options.\r\n\r\n{0}",
				Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
			))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		Else;
			Create HUD Text(Event Player, Null, 
				Custom String("Hold {0} + {1} on\r\n    this page to hide/show menu.\r\n\r\n{2}",
					Input Binding String(Button(Crouch)), Input Binding String(Button(Melee)),
				Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		End;
		Event Player.Mode_Description = Last Text ID;
	}
}

rule ("Set Host Player Rights")
{
    event 
	{
		Ongoing - Each Player;
		All;
		All;
    }
	
	conditions
	{
		Event Player == Host Player;
	}

    actions 
	{
		If(Not(Array Contains(Global.High_Rank, Custom String("{0}", Event Player)) || Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player))));
			Skip If(Array Contains(Global.Demoted, Custom String("{0}", Event Player)), 3);
			Modify Global Variable(Mod_Rank, Append To Array, Custom String("{0}", Host Player));
			Modify Global Variable(Promoted_List, Append To Array, Custom String("{0}", Host Player));
			Event Player.Promoted_Rank = True;
		End;
		Destroy HUD Text(Event Player.Mod_Name_ID[0]);
		Skip If(Global.Current_Host == Null, 2);
		Global.Current_Host.Mod_Name_ID[1] = True;
		Wait(0.01, Ignore Condition);
		Global.Current_Host = Event Player;
    }
}

rule ("Manage Host Swap Display")
{
    event 
	{
		Ongoing - Each Player;
		All;
		All;
    }
	
	conditions
	{
		Event Player.Mod_Name_ID[1] == True;
	}

    actions 
	{
		Call Subroutine(Hud_Elements);
		Event Player.Mod_Name_ID[1] = False;
    }
}

rule("Player_Rank_Revoke")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.High_Rank == False;
		Event Player.Mod_Rank == True;
		Event Player.Verification_Key == 1;
		Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player)) == False;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("{0} got demoted!", Event Player));
		Event Player.Mod_Rank = False;
		Event Player.Verification_Key = 0;

		Event Player.Is_Menu_Active = True;
		Event Player.Mode_Cycle = -1;
		Event Player.Mode_Cycle_Default = 0;
		If(Event Player.Is_Flying);
			Event Player.Is_Flying = False;
			Set Gravity(Event Player, Event Player.Player_Modification[3]);
		End;

		Destroy HUD Text(Event Player.Mode_Description);
		Destroy HUD Text(Event Player.Mode_Hud_ID);

		Event Player.Mode_Headline = Custom String("Info Page");
		Create HUD Text(Event Player, Event Player.Mode_Cycle_Default, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
			Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
			Global.Rainbow_Color, Color(Yellow), Global.Rainbow_Color, String and Color, Visible Never);
		Event Player.Mode_Hud_ID = Last Text ID;

		Create HUD Text(Event Player, Null, 
			Custom String(" • Basic Functions:\r\n- Hold Reload : Toggle Protection (Default On).\r\n- Hold Interact : Switch Camera (5 types).\r\n{0}", 
			Custom String("- Hold Melee : Switch Heroes.\r\n\r\n • How to use the menu:\r\n{0}", 
			Custom String("- Crouch and press\r\n    {0} or {1}", Input Binding String(Button(Jump)),
			Custom String("{0} to change pages.\r\n- Crouch and press\r\n    the shown input for an action.\r\n{1}", 
				Input Binding String(Button(Interact)), 
			Custom String("- Crouch + {0} on\r\n    this page to hide/show menu.\r\n{1}", Input Binding String(Button(Melee)),
			Custom String("Chillers have more pages/options.\r\n\r\n{0}",
			Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
		))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Event Player.Mode_Description = Last Text ID;
		Destroy HUD Text(Event Player.Mod_Name_ID[0]);
	}
}

rule("Show_And_Hide_Menu")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 0 || Event Player.Mode_Cycle_Default == 0) == True;
		(Is Button Held(Event Player, Button(Crouch)) && Is Button Held(Event Player, Button(Melee)))== True;
		Event Player.UNO_Ingame == False;
		Array Contains(Global.UNO_Players, Event Player) == False;
	}

	actions
	{
		Wait(0.75, Abort When False);
		"Menu toggle"
		If(Event Player.Is_Menu_Active);
			Event Player.Is_Menu_Active = False;
			Destroy HUD Text(Event Player.Mode_Description);
			Destroy HUD Text(Event Player.Mode_Hud_ID);
			Destroy Progress Bar HUD Text(Event Player.Scale_Hud_ID);
			Small Message(Event Player, Custom String(" Menu OFF {0}", Icon String(X)));
			Destroy Effect(Event Player.Target_Effect);
			Event Player.Target_Effect = Null;
			Destroy Icon(Event Player.Target_Arrow_ID);
			Event Player.Target_Arrow_ID = Null;
			
			If((Event Player.High_Rank || Event Player.Mod_Rank));
				Event Player.Mode_Cycle = 0;
			Else;
				Event Player.Mode_Cycle_Default = 0;
			End;
		Else;
			Small Message(Event Player, Custom String(" Menu ON {0}", Icon String(Plus)));
			Event Player.Is_Menu_Active = True;
			
			Event Player.Mode_Headline = Custom String("Info Page");
			If((Event Player.High_Rank || Event Player.Mod_Rank));
				Event Player.Mode_Cycle = 0;
				Create HUD Text(Event Player, Event Player.Mode_Cycle, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
					Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
					Global.Rainbow_Color, Color(Yellow), Global.Rainbow_Color, String and Color, Visible Never);
			Else;
				Event Player.Mode_Cycle_Default = 0;
				Create HUD Text(Event Player, Event Player.Mode_Cycle_Default, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
					Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
					Global.Rainbow_Color, Color(Yellow), Global.Rainbow_Color, String and Color, Visible Never);
			End;
			Event Player.Mode_Hud_ID = Last Text ID;
			If(Event Player.Promoted_Rank || Not(Event Player.High_Rank || Event Player.Mod_Rank));
				Create HUD Text(Event Player, Null, 
					Custom String(" • Basic Functions:\r\n- Hold Reload : Toggle Protection (Default On).\r\n- Hold Interact : Switch Camera (5 types).\r\n{0}", 
					Custom String("- Hold Melee : Switch Heroes.\r\n\r\n • How to use the menu:\r\n{0}", 
					Custom String("- Crouch and press\r\n    {0} or {1}", Input Binding String(Button(Jump)),
					Custom String("{0} to change pages.\r\n- Crouch and press\r\n    the shown input for an action.\r\n{1}", 
						Input Binding String(Button(Interact)), 
					Custom String("- Crouch + {0} on\r\n    this page to hide/show menu.\r\n{1}", Input Binding String(Button(Melee)),
					Custom String("Chillers have more pages/options.\r\n\r\n{0}",
					Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
					))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			Else;
				Create HUD Text(Event Player, Null, 
					Custom String("Hold {0} + {1} on\r\n    this page to hide/show menu.\r\n\r\n{2}",
						Input Binding String(Button(Crouch)), Input Binding String(Button(Melee)),
					Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
					)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			End;
			Event Player.Mode_Description = Last Text ID;
		End;
	}
}

rule("Hud_Elements (Subroutine)")
{
	event
	{
		Subroutine;
		Hud_Elements;
	}

	actions
	{
		If(Entity Exists(Event Player));
			Create HUD Text(All Players(All Teams), Null, Null, Custom String("{0} {1} {2}",
				Hero Icon String(Hero Of(Event Player)), Event Player, If-Then-Else(Event Player.Promoted_Rank, Custom String(""), 
				Global.Rank_Icon[Event Player.Verification_Key])), 
				Right, If-Then-Else(Event Player.Promoted_Rank, -2, (Event Player.Verification_Key + 2) * -1), Null, Null, Color(White), Visible To and String, Default Visibility);
			Event Player.Mod_Name_ID[0] = Last Text ID;
		Else;
			Destroy In-World Text(Event Player.Target_Tag_ID);
			Destroy HUD Text(Event Player.Mod_Name_ID[0]);
			Destroy HUD Text(Event Player.Mode_Hud_ID);
			Destroy HUD Text(Event Player.Mode_Description);
		End;
	}
}

rule("Hero_Switch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Crouch_On == False;
		Event Player.Restricted[0] == False;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Burning) == False;
		Has Status(Event Player, Stunned) == False;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		Wait(0.500, Abort When False);
		Event Player.Last_Position_Facing[0] = Position Of(Event Player);
		Event Player.Last_Position_Facing[1] = Facing Direction Of(Event Player);
		Set Player Allowed Heroes(Event Player, Filtered Array(All Heroes, Current Array Element != Hero Of(Event Player)));
		Wait(0.250, Ignore Condition);
		Set Player Allowed Heroes(Event Player, All Heroes);
		Wait Until(Has Spawned(Event Player) == True, 99999);
		Teleport(Event Player, Event Player.Last_Position_Facing[0]);
		Set Facing(Event Player, Event Player.Last_Position_Facing[1], To World);
		Event Player.Last_Position_Facing[0] = Null;
		Event Player.Last_Position_Facing[1] = Null;
	}
}

rule("Protection_4_Free")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Crouch_On == False;
		Event Player.Restricted[0] == False;
		Is Alive(Event Player) == True;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Wait(0.500, Abort When False);
		If(Event Player.Protection == False);
			Event Player.Protection = True;
		Else If(Event Player.Protection);
			Event Player.Protection = False;
		End;
	}
}

rule("Protection_ON")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Protection == True;
	}

	actions
	{
		Abort If(Has Spawned(Event Player) != True);
		Call Subroutine(Protection);
	}
}

rule("Protection_OFF")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Protection == False;
	}

	actions
	{
		Abort If(Has Spawned(Event Player) != True);
		Call Subroutine(Protection);
	}
}

rule("Mod_Ability_ON")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Crouch)) == True;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		Skip If((Event Player.High_Rank || Event Player.Mod_Rank) == False, 4);
		Create Effect(Event Player, Good Aura, Color(Yellow), Player Closest To Reticle(Event Player, All Teams), 1,
			Visible To Position and Radius);
		Event Player.Target_Effect = Last Created Entity;
		Create Icon(Event Player, Player Closest To Reticle(Event Player, All Teams), Arrow: Down, Visible To and Position, Color(White),
			False);
		Event Player.Target_Arrow_ID = Last Created Entity;
		Event Player.Is_Crouch_On = True;
		Disallow Button(Event Player, Button(Primary Fire));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Interact));
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Melee));
		Disallow Button(Event Player, Button(Reload));
	}
}

rule("Mod_Ability_OFF")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Crouch)) == False);
	}

	actions
	{
		Destroy Icon(Event Player.Target_Arrow_ID);
		Destroy Effect(Event Player.Target_Effect);
		Event Player.Target_Effect = Null;
		Event Player.Target_Arrow_ID = Null;
		Event Player.Is_Crouch_On = False;
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Interact));
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Reload));
	}
}

rule("Mode_Cycle")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Crouch_On == True;
		(Is Button Held(Event Player, Button(Interact)) || Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Is_Menu_Active == True;
		Event Player.Is_Flying == False;
		Event Player.UNO_Ingame == False;
		Event Player.Restricted[1] == False;
	}

	actions
	{	
		If((Event Player.High_Rank || Event Player.Mod_Rank));
			Event Player.Mode_Cycle_Default = -1;
			If(Is Button Held(Event Player, Button(Interact)));
				If(Event Player.Mode_Cycle >= 34);
					Event Player.Mode_Cycle = 0;
				Else;
					Event Player.Mode_Cycle += 1;
				End;
			Else If(Is Button Held(Event Player, Button(Jump)));
				If(Event Player.Mode_Cycle <= 0);
					Event Player.Mode_Cycle = 34;
				Else;
					Event Player.Mode_Cycle -= 1;
				End;
			End;
		Else;
			Event Player.Mode_Cycle = -1;
			If(Is Button Held(Event Player, Button(Interact)));
				If(Event Player.Mode_Cycle_Default >= 14);
					Event Player.Mode_Cycle_Default = 0;
				Else;
					Event Player.Mode_Cycle_Default += 1;
				End;
			Else If(Is Button Held(Event Player, Button(Jump)));
				If(Event Player.Mode_Cycle_Default <= 0);
					Event Player.Mode_Cycle_Default = 14;
				Else;
					Event Player.Mode_Cycle_Default -= 1;
				End;
			End;
		End;
	}
}

rule("Menu_Keys_Signal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Crouch_On == True;
		Event Player.Is_Menu_Active == True;
		Event Player.Restricted[1] == False;
		
		(Is Button Held(Event Player, Button(Primary Fire)) ||  Is Button Held(Event Player, Button(Secondary Fire)) || Is Button Held(Event Player, Button(Reload)) ||
			Is Button Held(Event Player, Button(Ultimate)) || Is Button Held(Event Player, Button(Ability 1)) || Is Button Held(Event Player, Button(Ability 2)) ||
			Is Button Held(Event Player, Button(Melee))) == True;
	}

	actions
	{
		Event Player.Signal = True;
	}
}


rule("Mode_Headline_Desc_Mod")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		(Is Button Held(Event Player, Button(Interact)) || Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Mode_Description != Null;
		Event Player.Is_Menu_Active == True;
		Event Player.UNO_Ingame == False;
	}

	actions
	{
		Destroy HUD Text(Event Player.Mode_Description);
		Destroy Progress Bar HUD Text(Event Player.Scale_Hud_ID);
		
		If(Event Player.Mode_Cycle == 0);
			Event Player.Mode_Headline = Custom String("Info Page");
			If(Event Player.Promoted_Rank);
				Create HUD Text(Event Player, Null, 
					Custom String(" • Basic Functions:\r\n- Hold Reload : Toggle Protection (Default On).\r\n- Hold Interact : Switch Camera (5 types).\r\n{0}", 
					Custom String("- Hold Melee : Switch Heroes.\r\n\r\n • How to use the menu:\r\n{0}", 
					Custom String("- Crouch and press\r\n    {0} or {1}", Input Binding String(Button(Jump)),
					Custom String("{0} to change pages.\r\n- Crouch and press\r\n    the shown input for an action.\r\n{1}", 
						Input Binding String(Button(Interact)), 
					Custom String("- Crouch + {0} on\r\n    this page to hide/show menu.\r\n{1}", Input Binding String(Button(Melee)),
					Custom String("Chillers have more pages/options.\r\n\r\n{0}",
					Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
					))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			Else;
				Create HUD Text(Event Player, Null, 
					Custom String("Hold {0} + {1} on\r\n    this page to hide/show menu.\r\n\r\n{2}",
						Input Binding String(Button(Crouch)), Input Binding String(Button(Melee)),
					Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
					)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			End;

		Else If(Event Player.Mode_Cycle == 1);
			Event Player.Mode_Headline = Custom String("Heal | Kill | Resurrection");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Heal | Resurrect Target\r\n{1} : Kill Target\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Kill | Rez Yourself\r\n{1}", 
					Input Binding String(Button(Ultimate)), 
				Custom String("{0} : Set Auto-Respawn, yourself\r\n{1}", 
					Input Binding String(Button(Ability 2)), 
				Custom String("Reload : Set Auto-Respawn, Non-mod target\r\n\n{0}", 
				Custom String("Current Auto-Respawn Settings: \r\n[You: {0}, Target: {1}]", 
					If-Then-Else(Event Player.Auto_Respawn, Global.OffOnString[1], Global.OffOnString[0]), 
					If-Then-Else(Player Closest To Reticle(Event Player, All Teams).Auto_Respawn, Global.OffOnString[1], Global.OffOnString[0])
				)))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 2);
			Event Player.Mode_Headline = Custom String("Teleport");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", 
				Custom String("{0} : Teleport You to Target\r\n{1} : Teleport Target To You\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Teleport Target Back To Spawn\r\n\r\nDestination Marker for Short Hop is shown\r\n   on this page while crouching.\r\n{1}", 
					Input Binding String(Button(Ultimate)), 
				Custom String("Crouch + {0} : Short Hop",
					Input Binding String(Button(Ability 1))
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 3);
			Event Player.Mode_Headline = Custom String("Status Effect");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}", 
				Custom String("{0} : Apply Status to Target\r\n{1} : Remove Status from Target\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)),
				Custom String("{0} : Apply/Remove Status: yourself\r\nReload : Quick Cleanse: Yourself\r\n{1}",
					Input Binding String(Button(Ability 2)),
				Custom String("{0} : Cycle Status\r\n\nCurrently Selected Status:\r\n[ {1} ]",
					Input Binding String(Button(Ultimate)), Global.Status_String[Event Player.Status_Selector]
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 4);
			Event Player.Mode_Headline = Custom String("Protection");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Give Target Immunity\r\n{1} : Revoke Target Immunity\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)),
				Custom String("{0} : Toggle Full Protection [{1}]",
					Input Binding String(Button(Ultimate)), If-Then-Else(Event Player.Full_Protection, Global.OffOnString[1], Global.OffOnString[0])
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 5);
			Event Player.Mode_Headline = Custom String("Outlines & names");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Give Outline To Target\r\n{1} : Choose Color\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Give Outline To Yourself\r\n{1} : Remove Outline from Youself\r\nReload : Remove Outline from Target",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)), Input Binding String(Button(Reload))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 6);
			Event Player.Mode_Headline = Custom String("Jumppads");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Create Jumppad With Current Settings\r\n{1} : Delete previous Jumppad\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Cycle Color of inner ring\r\nUltimate : Cycle Color of outer ring\r\n{1}",
					Input Binding String(Button(Ability 1)),
				Custom String("{0} : Cycle Jump strength\r\nReload : Cycle Radius\r\n{1}",
					Input Binding String(Button(Ability 2)),  
				Custom String("Melee : Delete All Jumppads\r\n\nCurrent Strength: {0}\r\nOnly placeable on the ground.\r\nCrouch to stop bouncing.",
					 (Event Player.Jumppad_Info_Array[3]+1)*5
				))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 7);
			Event Player.Mode_Headline = Custom String("Flying | Global Gravity");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Space Gravity (Only Host/Vanguard)\r\n{1} : Normal Gravity (Only Host/Vanguard)\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Give | Remove Yourself Flying\r\n{1} : Move Up\r\nCrouch : Move Down",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Jump))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 8);
			Event Player.Mode_Headline = Custom String("DMG | Speed | KB | Grav (Self)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Increase by {1}%\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Raise To Power(10, Event Player.Modification_Scalar_Selector), 
				Custom String("{0} : Decrease by {1}%\r\n{2}", 
					Input Binding String(Button(Secondary Fire)), Raise To Power(10, Event Player.Modification_Scalar_Selector),
				Custom String("{0} : Cycle Mode [DMG, Speed, KB, Gravity]\r\n{1}", 
					Input Binding String(Button(Ultimate)),
				Custom String("{0} : Cycle Amount [1%, 10%, 100%, 1000%]\r\n{1}", 
					Input Binding String(Button(Ability 2)), 
				Custom String("Reload : Reset {0}\r\n{1}", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector],
				Custom String("Melee : Reset all stats\r\n\n{0}", 
				Custom String("Your [{0}] is currently set to: {1}%", 
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Event Player.Player_Modification[Event Player.Modification_Mode_Selector]
				)))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 9);
			Event Player.Mode_Headline = Custom String("DMG | Speed | KB | Grav (Target)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Increase by {1}%\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Raise To Power(10, Event Player.Modification_Scalar_Selector), 
				Custom String("{0} : Decrease by {1}%\r\n{2}", 
					Input Binding String(Button(Secondary Fire)), Raise To Power(10, Event Player.Modification_Scalar_Selector),
				Custom String("{0} : Cycle Mode [DMG, Speed, KB, Gravity]\r\n{1}", 
					Input Binding String(Button(Ultimate)),
				Custom String("{0} : Cycle Amount [1%, 10%, 100%, 1000%]\r\n{1}",
					Input Binding String(Button(Ability 2)),
				Custom String("Reload : Reset {0}\r\n{1}", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector],
				Custom String("Melee : Reset all stats\r\n\n{0}", 
				Custom String("Target [{0}] is currently set to: {1}%!",
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Player Closest To Reticle(Event Player, All Teams).Player_Modification[Event Player.Modification_Mode_Selector]
				)))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 10);
			Event Player.Mode_Headline = Custom String("Carry | Bonk | Unstuck");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Carry Target\r\n{1} : Knockback Push\r\n{2} : Fix and Unstuck", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Ultimate))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 11);
			Create Progress Bar HUD Text(Event Player, Event Player.Scale_Real * 5, Custom String("Destination: {0}% | Current: {1}%",
				Event Player.Scale_Prev * 100, Event Player.Scale_Real * 100), Top, 1, Color(Blue), Color(Gray), Values,
				Visible Never);
			Event Player.Scale_Hud_ID = Last Text ID;

			Event Player.Mode_Headline = Custom String("Growth | Shrink (Yourself)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Set Destination Growth\r\n{1} : Set Destination Shrink\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Confirm & Start Scaling\r\n{1} : Reset Size", 
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Reload))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 12);
			Create Progress Bar HUD Text(Event Player, Event Player.Target_Lock.Scale_Real * 5, Custom String(
				"Destination: {0}% | Current: {1}% | {2}", Event Player.Target_Lock.Scale_Prev * 100,
				Event Player.Target_Lock.Scale_Real * 100, Event Player.Target_Lock), Top, 1, Color(Red), Color(Gray), Values,
				Visible Never);
			Event Player.Scale_Hud_ID = Last Text ID;

			Event Player.Mode_Headline = Custom String("Growth | Shrink (Target)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Set Destination Growth\r\n{1} : Set Destination Shrink\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Confirm & Start Scaling\r\n{1} : Reset Size", 
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Reload))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 13);
			Event Player.Mode_Headline = Custom String("Attach System");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Attach Yourself To Target\r\n{1} : Target Rides You\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Detach Yourself\r\nReload : Detach Target\r\n{1} : Attach Target To You",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2))
				))), Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String, Visible Never);

        Else If(Event Player.Mode_Cycle == 14);
			Event Player.Mode_Headline = Custom String("Target Leash");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Create Grapplink\r\n{1} : Remove Grapplink", Input Binding String(Button(Primary Fire)), Input Binding String(Button(
				Secondary Fire)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 15);
			Event Player.Mode_Headline = Custom String("Painting");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Draw\r\n{1} : Choose Effect\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Select Size\r\n{1} : Choose Color\r\n{2}", 
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)),
				Custom String("Reload : Remove previous effect\r\nMelee : Clear all effects"
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 16);
			Event Player.Mode_Headline = Custom String("Beam Drawing");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Draw Beam\r\n{1} : Choose Beam\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Choose Color\r\n{1} : Remove previous bream\r\nMelee : Clear All Beams", 
					Input Binding String(Button(Ability 2)), Input Binding String(Button(Reload))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 17);
			Event Player.Mode_Headline = Custom String("Spawn Hero Forcing");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Make Target To Mercy\r\n{1} : Make Target To D.Va\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Make Target To Widow\r\n{1} : Make Target Same Hero As You\r\nReload : Stop Forcing To Be Hero (Target and You)",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 18);
			Event Player.Mode_Headline = Custom String("Savezone (Host/Vanguards)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String(
				"{0} : Make Safe zone Bigger\n{1} : Make Safe zone Smaller\n{2}", Input Binding String(Button(Primary Fire)),
				Input Binding String(Button(Secondary Fire)), Custom String("{0} : Create Safe zone\n{1} : Remove Safe zone\n{2}",
				Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)), Custom String(
				"Reload : Give | Revoke Access (Target)\nMelee : Give | Revoke Access (Self)")
				))), Null, Left, 1, Color(White), Color(White), Color(White), String,Visible Never);

		Else If(Event Player.Mode_Cycle == 19);
			Event Player.Mode_Headline = Custom String("Don't Touch Me");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Activate Target DMG Reflect\r\n{1} : Deactivate Target DMG Reflect\r\n{2} : Set Damage Reflect Yourself",
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Ultimate)
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 20);
			Event Player.Mode_Headline = Custom String("Voice Options");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Moan Spam Target\r\n{1} : Moan Spam Yourself\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Voice Pitch Up\r\n{1} : Voice Pitch Down\r\nReload : Back To Normal Voice", 
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 21);
			Event Player.Mode_Headline = Custom String("Small message to someone");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : LIKE\r\n{1} : LOVE\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Cringe\r\n", 
					Input Binding String(Button(Ultimate))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 22);
			Event Player.Mode_Headline = Custom String("Heaven");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Give Ticket to Heaven\r\n{1} : Send yourself to Heaven", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Ultimate))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 23);
			Event Player.Mode_Headline = Custom String("#icon #yourself");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Give icon to yourself\n{1}",
					Input Binding String(Button(Primary Fire)),  
				Custom String("{0} : Choose Color\n{1} : Choose Icon\n{2}", 
					Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Ultimate)), 
				Custom String("{0} : Give Yourself - Heart\nMelee : Give Yourself - Fire\n{1}", 
					Input Binding String(Button(Ability 2)), 
				Custom String("Reload : Destroy Your Icons\n"
				))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 24);
			Event Player.Mode_Headline = Custom String("#icon #target");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Give Icon to Target\n{1}",
					Input Binding String(Button(Primary Fire)), 
				Custom String("{0} : Choose Color\n{1} : Choose Icon\n{2}", 
					Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Ultimate)), 
				Custom String("{0} : Give Target - Heart\nMelee : Give Target - Fire\n{1}", 
					Input Binding String(Button(Ability 2)),  
				Custom String("Reload : Destroy Target's Icons"
				))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 25);
			Event Player.Mode_Headline = Custom String("Ghost Mode");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Disable Anti-Collision Target\r\n{1} : Enable Anti-Collision Target\r\n{2} : Set Anti-Collision For Yourself",
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Ultimate))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 26);
			Event Player.Mode_Headline = Custom String("Slow Projectile & Motion");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Give Target Slow Projectile\r\n{1} : Revoke Target Slow Projectile\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Set Yourself Slow Projectile\r\n{1} : Slowmotion (Only Host/Vanguard)",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 27);
			Event Player.Mode_Headline = Custom String("Lock Up In Jail");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Lock target - Chat & Skills Disabled\r\n{1} : Unlock target - Chat & Skills Enabled\r\n{2} : Lock / Unlock Yourself",
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), Input Binding String(Button(Ultimate))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 28);
			Event Player.Mode_Headline = Custom String("Kick/Ban (Only Owner)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Kick Target \r\n{1} : Ban Target Temporarily", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 29);
			Event Player.Mode_Headline = Custom String("Assign Rights & Team Swap");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Give Target Rights \r\n{1} : Revoke Target Rights \r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Switch Team - Yourself\r\n{1} : Switch Team - Target\r\n{2}",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)), 
				Custom String("Reload : Move Yourself to Spectator"
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 30);
			Event Player.Mode_Headline = Custom String("Time (Only Owner/Angels)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Add 5 Min to match time\r\n{1} : Add 30 Min to match time\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Set Match Time To 10 Sec\r\n{1} : Declare Match Draw\r\n\r\nMaximum Match duration is\r\n  capped at 90 minutes.",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Reload))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 31);
			Event Player.Mode_Headline = Custom String("Special Camera");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Place Camera Without LOS check\r\n{1} : Place Camera With LOS Check\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("Ultimate : Place static Camera\r\n{0} : Start Cinematic Camera\r\n{1}", Input Binding String(Button(Ability 2)), 
				Custom String("Reload : Start Top-down Camera\r\n{0} : Attach Camera to target player\r\n{1}", Input Binding String(Button(Ability 1)),
				Custom String("Melee : Place/Start Security Camera\r\n\n{0}",
				Custom String("Hold button down for 1 sec to\r\n   place cam at eye level.\r\nReminder: Hold Interact to reset Camera."
				)))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 32);
			Event Player.Mode_Headline = Custom String("U N O");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Enter UNO match\r\n{1} : Leave UNO Match\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("Ultimate : Start UNO Match\r\n\nPlayers in queue: {0}\r\n{1}",
					Count Of(Global.UNO_Players),
				Custom String("{0} : Show who is in queue\r\nReload (Optional):\r\nPlace/Remove In-world UNO deck",
					Input Binding String(Button(Ability 2))
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 33);
			Event Player.Mode_Headline = Custom String("Invisible (Only Host/Angels)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Set Yourself Invisible \r\n{1} : Remove Invisibility from self", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle == 34);
			Event Player.Mode_Headline = Custom String("Talk with Moe");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("Say to Moe:\r\n{0} : Hello!\n{1} : Goodbye.\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)),
				Custom String("{0} : Yes.\nReload : No.\r\n{1}",
					Input Binding String(Button(Ability 2)), 
				Custom String("Ultimate : Thanks!\n{0} : Sorry...",Input Binding String(Button(Ability 1))
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		End;

		Event Player.Mode_Description = Last Text ID;
	}
}

rule("Mode_Headline_Desc_Default")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == False;
		(Is Button Held(Event Player, Button(Interact)) || Is Button Held(Event Player, Button(Jump))) == True;
		Event Player.Mode_Description != Null;
		Event Player.Is_Menu_Active == True;
		Event Player.UNO_Ingame == False;
	}

	actions
	{
		Destroy HUD Text(Event Player.Mode_Description);
		Destroy Progress Bar HUD Text(Event Player.Scale_Hud_ID);
		
		If(Event Player.Mode_Cycle_Default == 0);
			Event Player.Mode_Headline = Custom String("Info Page");
			Create HUD Text(Event Player, Null, 
				Custom String(" • Basic Functions:\r\n- Hold Reload : Toggle Protection (Default On).\r\n- Hold Interact : Switch Camera (5 types).\r\n{0}", 
				Custom String("- Hold Melee : Switch Heroes.\r\n\r\n • How to use the menu:\r\n{0}", 
				Custom String("- Crouch and press\r\n    {0} or {1}", Input Binding String(Button(Jump)),
				Custom String("{0} to change pages.\r\n- Crouch and press\r\n    the shown input for an action.\r\n{1}", 
					Input Binding String(Button(Interact)), 
				Custom String("- Crouch + {0} on\r\n    this page to hide/show menu.\r\n{1}", Input Binding String(Button(Melee)),
				Custom String("Chillers have more pages/options.\r\n\r\n{0}",
				Custom String("In these lobbies, please be careful\r\n   who you interact with and what\r\n   personal information you share."
				))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 1);
			Event Player.Mode_Headline = Custom String("Kill | Resurrection");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Kill | Rez Yourself\r\n{1} : Set Auto-Respawn, yourself\r\n\n{2}", 
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)), 
				Custom String("Current Auto-Respawn Settings: \r\n[You: {0}, Target: {1}]", 
					Event Player.Auto_Respawn, Player Closest To Reticle(Event Player, All Teams).Auto_Respawn
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 2);
			Event Player.Mode_Headline = Custom String("Status Effect");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Apply/Remove Status: yourself\r\n{1} : Remove All Status: Yourself\r\n{2}",
					Input Binding String(Button(Ability 2)), Input Binding String(Button(Reload)),
				Custom String("{0} : Cycle Status\r\n\nCurrently Selected Status:\r\n[ {1} ]",
					Input Binding String(Button(Ultimate)), Global.Status_String[Event Player.Status_Selector]
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 3);
			Event Player.Mode_Headline = Custom String("Outlines & names");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Choose Color\r\n{1}", 
					Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Give Outline To Yourself\r\n{1} : Remove Outline from Youself\r\n",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 4);
			Event Player.Mode_Headline = Custom String("DMG | Speed | Knockback | Gravity");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Increase by {1}%\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Raise To Power(10, Event Player.Modification_Scalar_Selector), 
				Custom String("{0} : Decrease by {1}%\r\n{2}", 
					Input Binding String(Button(Secondary Fire)), Raise To Power(10, Event Player.Modification_Scalar_Selector),
				Custom String("{0} : Cycle Mode [DMG, Speed, KB, Gravity]\r\n{1}", 
					Input Binding String(Button(Ultimate)),
				Custom String("{0} : Cycle Amount [1%, 10%, 100%, 1000%]\r\n{1}", 
					Input Binding String(Button(Ability 2)), 
				Custom String("Reload : Reset {0}\r\n{1}", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector],
				Custom String("Melee : Reset all stats\r\n\n{0}",
				Custom String("Your [{0}] is currently set to: {1}%!\r\n", 
					Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Event Player.Player_Modification[Event Player.Modification_Mode_Selector]
				)))))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 5);
			Event Player.Mode_Headline = Custom String("Unstuck");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Fix and Unstuck Yourself", 
					Input Binding String(Button(Ultimate))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 6);
			Create Progress Bar HUD Text(Event Player, Event Player.Scale_Real * 5, Custom String("Destination: {0}% | Current: {1}%",
				Event Player.Scale_Prev * 100, Event Player.Scale_Real * 100), Top, 1, Color(Blue), Color(Gray), Values,
				Visible Never);
			Event Player.Scale_Hud_ID = Last Text ID;
			
			Event Player.Mode_Headline = Custom String("Growth | Shrink (Yourself)");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Set Destination Growth\r\n{1} : Set Destination Shrink\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Confirm & Start Scaling\r\n{1} : Reset Size", 
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Reload))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 7);
			Event Player.Mode_Headline = Custom String("Voice Options");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Voice Pitch Up\r\n{1}",
					Input Binding String(Button(Ultimate)), 
				Custom String("{0} : Voice Pitch Down\r\n{1} : Back To Normal Voice", 
					Input Binding String(Button(Ability 2)), Input Binding String(Button(Reload))
				))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 8);
			Event Player.Mode_Headline = Custom String("Heaven");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Send yourself to Heaven", 
					Input Binding String(Button(Ultimate))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 9);
			Event Player.Mode_Headline = Custom String("#Icon #yourself");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Give icon to yourself \n{1}",
				Input Binding String(Button(Primary Fire)), Custom String(
				"{0} : Choose Color\n{1} : Choose Icon\n{2}", Input Binding String(Button(Secondary Fire)), Input Binding String(Button(
				Ultimate)), Custom String("{0} : Give Yourself - Heart\nMelee : Give Yourself - Fire\n{1}", Input Binding String(Button(
				Ability 2)), Custom String("Reload : Destroy Your Icons"))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 10);
			Event Player.Mode_Headline = Custom String("Slow Projectile");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Set Yourself Slow Projectile",
					Input Binding String(Button(Ultimate))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			
		Else If(Event Player.Mode_Cycle_Default == 11);
			Event Player.Mode_Headline = Custom String("Team Swap");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Switch Team - Yourself",
					Input Binding String(Button(Ultimate))
				)), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 12);
			Event Player.Mode_Headline = Custom String("Special Camera");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Place Camera Without LOS check\r\n{1} : Place Camera With LOS Check\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Place static Camera\r\n{1} : Start Cinematic Camera\r\n{2}",
					Input Binding String(Button(Ultimate)), Input Binding String(Button(Ability 2)), 
				Custom String("Reload : Start Top-down Camera\r\n\n{0}",
				Custom String("Hold button down for 1 sec to\r\n   place cam at eye level.\r\nReminder: Hold Interact to reset Camera."
				))))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 13);
			Event Player.Mode_Headline = Custom String("U N O");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Enter UNO match\r\n{1} : Leave UNO Match\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Start UNO Match\r\n\nPlayers in queue: {1}\r\n{2}",
					Input Binding String(Button(Ultimate)), Count Of(Global.UNO_Players),
				Custom String("{0} : Show who is in queue\r\nReload : (Optional):\r\nPlace/Remove In-world UNO deck",
					Input Binding String(Button(Ability 2))
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);

		Else If(Event Player.Mode_Cycle_Default == 14);
			Event Player.Mode_Headline = Custom String("Talk with Moe");
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("Say to Moe:\r\n{0} : Hello!\n{1} : Goodbye.\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)),
				Custom String("{0} : Yes.\nReload : No.\r\n{1}",
					Input Binding String(Button(Ability 2)), 
				Custom String("Ultimate : Thanks!\n{0} : Sorry...",Input Binding String(Button(Ability 1))
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
		End;

		Event Player.Mode_Description = Last Text ID;
	}
}

rule("Remove_AFK_Player")
{
	event
	{
		Player Joined Match;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == False;
	}

	actions
	{
		Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player)) || Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player)) 
			|| Host Player == Event Player);
		Abort If(Custom String("{0}", Event Player) == Custom String("Warloy") || Custom String("{0}", Event Player) == Custom String("LƐafa") || 
			Custom String("{0}", Event Player) == Custom String("ORCHȊD") || Custom String("{0}", Event Player) == Custom String("kwally"));
		Wait(600, Abort When False);
		Big Message(All Players(All Teams), Custom String("{0} Was \"AFK\" Too Long Without Choosing A Hero.", Event Player));
		Remove Player(Event Player);
	}
}

rule("Remove_Banned_Player")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Array Contains(Global.Perma_Banned, Custom String("{0}", Event Player)) || Array Contains(Global.Temp_Banned, Custom String("{0}",
			Event Player))) == True;
	}

	actions
	{
		Small Message(All Players(All Teams), Custom String("{0} is banned.", Event Player));
		Remove Player(Event Player);
	}
}

rule("Set match time to 1800s")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Assembling Heroes == False;
		Is In Setup == False;
	}

	actions
	{
		"Forcing game time to 30 min, because default settings are 10 min maximum"
		Set Match Time(1800);
		If(Current Game Mode == Game Mode(Capture The Flag));
			"Hardcoded to 30 min to avoid game stages (manual)"
			Wait(1800, Ignore Condition);
			Declare Match Draw;
		End;
		If(Current Game Mode == Game Mode(Hybrid));
			"Hardcoded to 30 min to avoid game stages (manual)"
			Wait(1800, Ignore Condition);
			Declare Match Draw;
		End;
	}
}

rule("Declare draw if match time == 0")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time == 0;
		Is Assembling Heroes == False;
		Current Game Mode != Game Mode(Capture The Flag);
		Current Game Mode != Game Mode(Hybrid);
	}

	actions
	{
		Declare Match Draw;
		Wait(26, Ignore Condition);
		Restart Match;
	}
}

rule("Disable Preparation/Assemble Stage")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		(Is In Setup || Is Assembling Heroes) == True;
		Global.Skins_Check != True;
	}

	actions
	{
		"Disabling this feature to not wait 30s before match starts"
		Set Match Time(0);
	}
}

rule("Skin Swap Test - Enabled only in TDM for now")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Jump)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Wait(10, Abort When False);
		Big Message(Event Player, Custom String("Works only in some modes for now"));
		Wait(5, Ignore Condition);
		Go To Assemble Heroes;
	}
}

rule("Remaining Time: 10 Sec")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Match Time <= 10;
		Is Assembling Heroes == False;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Remaining Time: 10 Sec"));
	}
}

disabled rule("")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Camera_Switch")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Crouch_On == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Wait(0.400, Abort When False);
		Event Player.Camera_Info_Array[1] = False;
		Event Player.Camera_Info_Array[0] = False;
		Destroy In-World Text(Event Player.Camera_Info_Array[4]);
		Destroy Effect(Event Player.Camera_Info_Array[5]);
		If(Event Player.Camera >= 4);
			Event Player.Camera = 0;
		Else;
			Event Player.Camera += 1;
		End;
	}
}

rule("1st_Camera_0")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 0;
	}

	actions
	{
		Stop Camera(Event Player);
		Small Message(Event Player, Custom String(" Default Camera"));
	}
}

rule("3rd_Camera_1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 1;
	}

	actions
	{
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
			Eye Position(Event Player) + -3 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
			Null, Event Player, True)), Update Every Frame(Eye Position(Event Player) + 10 * Facing Direction Of(Event Player)), 30);
		Small Message(Event Player, Custom String(" 3rd Person, Far"));
	}
}

rule("3rd_Camera_2_Zoom")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 2;
	}

	actions
	{
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
			Eye Position(Event Player) + -1 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
			Null, Event Player, True)), Update Every Frame(Eye Position(Event Player) + 10 * Facing Direction Of(Event Player)), 30);
		Small Message(Event Player, Custom String(" 3rd Person, Close"));
	}
}

rule("3rd_Camera_3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 3;
	}

	actions
	{
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
			Eye Position(Event Player) + 3 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
			Null, Event Player, True)), Update Every Frame(Eye Position(Event Player) + -10 * Facing Direction Of(Event Player)), 30);
		Small Message(Event Player, Custom String(" Front View, Far"));
	}
}

rule("3rd_Camera_4_Zoom")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 4;
	}

	actions
	{
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
			Eye Position(Event Player) + 1 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
			Null, Event Player, True)), Update Every Frame(Eye Position(Event Player) + -10 * Facing Direction Of(Event Player)), 30);
		Small Message(Event Player, Custom String(" Front View, Close"));
	}
}


rule("Mode_01 - Kill_Rez")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 1 || Event Player.Mode_Cycle_Default == 1) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Can angels kill eachother?"
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Is Alive(Event Player));
				If(((Event Player.High_Rank || Event Player.Mod_Rank) || (Event Player.Spam_Cooldown <= 0)) == False);
					Small Message(Event Player, Custom String("  Self-kill is on a {0}sec CD", Event Player.Spam_Cooldown));
					Abort;
				End;
				Event Player.Spam_Cooldown = 3;
				Kill(Event Player, Null);
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			Else If(Is Dead(Event Player));
				Resurrect(Event Player);
				Heal(Event Player, Null, 12000);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			End;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || (Player Closest To Reticle(Event Player, All Teams).Mod_Rank &&
				Not(Player Closest To Reticle(Event Player, All Teams).Promoted_Rank)));
			Resurrect(Player Closest To Reticle(Event Player, All Teams));
			Heal(Player Closest To Reticle(Event Player, All Teams), Null, 12000);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Is Dead(Player Closest To Reticle(Event Player, All Teams)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			If(Event Player.Promoted_Rank && (Event Player != Host Player));
				Small Message(Event Player, Custom String("  Only for host and angels."));
				Abort;
			End;
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || (Player Closest To Reticle(Event Player, All Teams).Mod_Rank &&
				Not(Player Closest To Reticle(Event Player, All Teams).Promoted_Rank)));
			Kill(Player Closest To Reticle(Event Player, All Teams), Event Player);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Auto_Respawn);
				Event Player.Auto_Respawn = False;
			Else;
				Event Player.Auto_Respawn = True;
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Blue), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			If(Player Closest To Reticle(Event Player, All Teams).Auto_Respawn);
				Player Closest To Reticle(Event Player, All Teams).Auto_Respawn = False;
			Else;
				Player Closest To Reticle(Event Player, All Teams).Auto_Respawn = True;
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		End;
	}
}

rule("Mode_01 - Auto_Respawn")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Event Player.Auto_Respawn == True;
		Is Dead(Event Player) == True;
	}

	actions
	{
		"Kanezaka falling out of map hardcoded fix"
		If(Current Map == Map(Kanezaka));
			Teleport(Event Player, Random Value In Array(Global.Kanezaka_Teleports));
			Resurrect(Event Player);
			Heal(Event Player, Null, 12000);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else;
			Wait(1.5, Abort When False);
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)) + Vector(0,1.5,0));
			Resurrect(Event Player);
			Heal(Event Player, Null, 12000);
			Start Forcing Player Position(Event Player, Nearest Walkable Position(Position Of(Event Player)) + Vector(0,1.5,0), False);
			Wait(0.1, Ignore Condition);
			Stop Forcing Player Position(Event Player);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		End;
	}
}

rule("Mode_02 - Teleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 2;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Teleport(Event Player, Position Of(Player Closest To Reticle(Event Player, All Teams)));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			If(Is Dead(Player Closest To Reticle(Event Player, All Teams)));
				Resurrect(Player Closest To Reticle(Event Player, All Teams));
			End;
			Teleport(Player Closest To Reticle(Event Player, All Teams), Position Of(Event Player));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			If(Is Dead(Player Closest To Reticle(Event Player, All Teams)));
				Resurrect(Player Closest To Reticle(Event Player, All Teams));
			End;
			Teleport(Player Closest To Reticle(Event Player, All Teams), Spawn Points(Team Of(Player Closest To Reticle(Event Player,
				All Teams))));
			Play Effect(All Players(All Teams), Bad Explosion, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		End;
	}
}

rule("Mode_02 - Short Hop Effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 2 || Event Player.Mode_Cycle == 16) == True;
		(Is Button Held(Event Player, Button(Crouch)) || Event Player.Mode_Cycle == 16)== True;
	}

	actions
	{
		If(Event Player.Mode_Cycle == 2);
			Create Effect(Event Player, Sphere, Color(White),
				Update Every Frame(Eye Position(Event Player) + Facing Direction Of(Event Player) * 12.5), 0.3, Position and Radius);
			Event Player.Drawing_Obj_Info_Array[3] = Last Created Entity;
			Create Effect(Event Player, Ring, Color(White),
				Update Every Frame(Eye Position(Event Player) + Facing Direction Of(Event Player) * 12.5), 0.75, Position and Radius);
			Event Player.Drawing_Obj_Info_Array[4] = Last Created Entity;
			Wait Until(Event Player.Mode_Cycle != 2 || Not(Is Button Held(Event Player, Button(Crouch))), 9999);
			Destroy Effect(Event Player.Drawing_Obj_Info_Array[3]);
			Destroy Effect(Event Player.Drawing_Obj_Info_Array[4]);
		Else;
			Create Effect(Event Player, Sphere, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
				Event Player) + Facing Direction Of(Event Player) * 3, All Players(All Teams), Event Player, True)), 0.100, Position Radius and Color);
			Event Player.Beams_Preview_ID[1] = Last Created Entity;
			Wait Until(Event Player.Mode_Cycle != 16, 9999);
			Destroy Effect(Event Player.Beams_Preview_ID[1]);
		End;
	}
}

rule("Mode_03 - Apply Status")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 3 || Event Player.Mode_Cycle_Default == 2) == True;
		Event Player.Signal == True;
	}

	actions
	{		
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).UNO_Ingame);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			
			If(Player Closest To Reticle(Event Player, All Teams).Protection);
				Clear Status(Player Closest To Reticle(Event Player, All Teams), Phased Out);
			End;
			
			If(Event Player.Status_Selector == 0);
				If(Has Status(Player Closest To Reticle(Event Player, All Teams), Knocked Down));
					If(Player Closest To Reticle(Event Player, All Teams).Protection);
						Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
					End;
					Abort;
				End;
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Knocked Down, 9999);
			Else If(Event Player.Status_Selector == 1);
				If(Has Status(Player Closest To Reticle(Event Player, All Teams), Stunned));
					If(Player Closest To Reticle(Event Player, All Teams).Protection);
						Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
					End;
					Abort;
				End;
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Stunned, 9999);
			Else If(Event Player.Status_Selector == 2);
				If(Has Status(Player Closest To Reticle(Event Player, All Teams), Frozen));
					If(Player Closest To Reticle(Event Player, All Teams).Protection);
						Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
					End;
					Abort;
				End;
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Frozen, 9999);
			Else If(Event Player.Status_Selector == 3);
				If(Has Status(Player Closest To Reticle(Event Player, All Teams), Burning));
					If(Player Closest To Reticle(Event Player, All Teams).Protection);
						Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
					End;
					Abort;
				End;
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Burning, 9999);
				Start Damage Over Time(Player Closest To Reticle(Event Player, All Teams), Null, 9999, 20);
				Player Closest To Reticle(Event Player, All Teams).DMG_Time = Last Damage Over Time ID;
			Else If(Event Player.Status_Selector == 4);
				If(Has Status(Player Closest To Reticle(Event Player, All Teams), Hacked));
					If(Player Closest To Reticle(Event Player, All Teams).Protection);
						Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
					End;
					Abort;
				End;
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Hacked, 9999);
			End;
			
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
			If(Player Closest To Reticle(Event Player, All Teams).Protection);
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
			End;
		
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			
			If(Event Player.Status_Selector == 3);
				Stop Damage Over Time(Player Closest To Reticle(Event Player, All Teams).DMG_Time);
			End;
			If(Player Closest To Reticle(Event Player, All Teams).Protection);
				Clear Status(Player Closest To Reticle(Event Player, All Teams), Phased Out);
			End;
			
			If(Event Player.Status_Selector == 0);
				Clear Status(Player Closest To Reticle(Event Player, All Teams), Knocked Down);
			Else If(Event Player.Status_Selector == 1);
				Clear Status(Player Closest To Reticle(Event Player, All Teams), Stunned);
			Else If(Event Player.Status_Selector == 2);
				Clear Status(Player Closest To Reticle(Event Player, All Teams), Frozen);
			Else If(Event Player.Status_Selector == 3);
				Clear Status(Player Closest To Reticle(Event Player, All Teams), Burning);
			Else If(Event Player.Status_Selector == 4);
				Clear Status(Player Closest To Reticle(Event Player, All Teams), Hacked);
			End;
			
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
			If(Player Closest To Reticle(Event Player, All Teams).Protection);
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
			End;
		
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(((Event Player.High_Rank || Event Player.Mod_Rank) || (Event Player.Spam_Cooldown <= 0)) == False);
				Small Message(Event Player, Custom String("  Set/Remove status is on a {0}sec CD", Event Player.Spam_Cooldown));
				Abort;
			End;
			If(Event Player.Protection);
				Clear Status(Event Player, Phased Out);
			End;
			Event Player.Spam_Cooldown = 3;
			If(Event Player.Status_Selector == 0);
				If(Has Status(Event Player, Knocked Down) == False);
					Set Status(Event Player, Null, Knocked Down, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else If(Has Status(Event Player, Knocked Down));
					Clear Status(Event Player, Knocked Down);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			Else If(Event Player.Status_Selector == 1);
				If(Has Status(Event Player, Stunned) == False);
					Set Status(Event Player, Null, Stunned, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else;
					Clear Status(Event Player, Stunned);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			Else If(Event Player.Status_Selector == 2);
				If(Has Status(Event Player, Frozen) == False);
					Set Status(Event Player, Null, Frozen, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else;
					Clear Status(Event Player, Frozen);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			Else If(Event Player.Status_Selector == 3);
				If(Has Status(Event Player, Burning) == False);
					Set Status(Event Player, Null, Burning, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else;
					Clear Status(Event Player, Burning);
					Stop Damage Over Time(Event Player.DMG_Time);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			Else If(Event Player.Status_Selector == 4);
				If(Has Status(Event Player, Hacked) == False);
					Set Status(Event Player, Null, Hacked, 9999);
					Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Else;
					Clear Status(Event Player, Hacked);
					Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				End;
			End;
			If(Event Player.Protection);
				Set Status(Event Player, Null, Phased Out, 9999);
			End;
		
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Event Player.Protection);
				Clear Status(Event Player, Phased Out);
			End;

			Clear Status(Event Player, Knocked Down);
			Clear Status(Event Player, Stunned);
			Clear Status(Event Player, Frozen);
			Clear Status(Event Player, Burning);
			Clear Status(Event Player, Hacked);
			Stop Damage Over Time(Event Player.DMG_Time);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);

			If(Event Player.Protection);
				Set Status(Event Player, Null, Phased Out, 9999);
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Status_Selector >= 4);
				Event Player.Status_Selector = 0;
			Else;
				Event Player.Status_Selector += 1;
			End;
		End;
	}
}

rule("Mode_04 - Protection")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 4;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Protection);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Player Closest To Reticle(Event Player, All Teams).Protection = True;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Protection == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Player Closest To Reticle(Event Player, All Teams).Protection = False;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Full_Protection);
				Destroy In-World Text(Event Player.Protection_ID);
				Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), 
					Custom String("{0}\r\n\r\n", Ability Icon String(Hero(Baptiste), Button(Ability 2))),
					Event Player, 0.8, Clip Against Surfaces, Visible To and Position, Color(Blue), Default Visibility);
				Event Player.Protection_ID = Last Text ID;
				Event Player.Full_Protection = False;
			Else;
				If(Not(Event Player.Protection));
					Event Player.Protection = True;
					Wait(0.1, Ignore Condition);
				End;
				Destroy In-World Text(Event Player.Protection_ID);
				Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), 
					Custom String("{0}\r\n\r\n", Ability Icon String(Hero(Kiriko), Button(Ability 2))),
					Event Player, 0.8, Clip Against Surfaces, Visible To and Position, Color(Blue), Default Visibility);
				Event Player.Protection_ID = Last Text ID;
				Event Player.Full_Protection = True;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Event Player.Promoted_Rank);
			If (Event Player.No_CD);
				Event Player.No_CD = False;
			Else;
				Event Player.No_CD = True;
			End;
		End;
	}
}

rule("Mode_04 - Protection (Subroutine)")
{
	event
	{
		Subroutine;
		Protection;
	}

	actions
	{
		If(Event Player.Protection);
			Set Status(Event Player, Null, Phased Out, 9999);
			Big Message(Event Player, Custom String("Protection: ON"));
			Skip If((Event Player.High_Rank || Event Player.Mod_Rank), 1);
			Set Damage Dealt(Event Player, 0);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), 
				Custom String("{0}\r\n\r\n", Ability Icon String(Hero(Baptiste), Button(Ability 2))),
				Event Player, 0.8, Clip Against Surfaces, Visible To and Position, Color(Blue), Default Visibility);
			Event Player.Protection_ID = Last Text ID;
		Else;
			Clear Status(Event Player, Phased Out);
			Big Message(Event Player, Custom String("Protection: OFF"));
			Skip If((Event Player.High_Rank || Event Player.Mod_Rank), 1);
			Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);
			Destroy In-World Text(Event Player.Protection_ID);
			Event Player.Protection_ID = Null;
			Event Player.Full_Protection = False;
		End;
	}
}

rule("Mode_05 - De-Elitate Outlines")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 5 || Event Player.Mode_Cycle_Default == 3) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Discuss aborts with Warloy"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))) ||
				Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Abort If(Is Dummy Bot(Player Closest To Reticle(Event Player, All Teams)));
			If(Player Closest To Reticle(Event Player, All Teams).Is_Title_Given);
				Small Message(Event Player, Custom String("Can't change outline of {0}", Player Closest To Reticle(Event Player, All Teams)));
				Abort;
			End;
			Player Closest To Reticle(Event Player, All Teams).Regular_Player_Has_Title = True;
			Disable Nameplates(Player Closest To Reticle(Event Player, All Teams), All Players(All Teams));
			Destroy In-World Text(Player Closest To Reticle(Event Player, All Teams).M32_Players_Nameplate);
			Wait(0.050, Ignore Condition);
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.Is_Crouch_On == False), Custom String("{0}",
				Player Closest To Reticle(Event Player, All Teams)), Evaluate Once(Player Closest To Reticle(Event Player, All Teams)), 0.980,
				Clip Against Surfaces, Visible To Position and Color, Evaluate Once(
				Global.Colors[Event Player.NamesAndOutlines_Colors_Selector]), Visible Never);
			Player Closest To Reticle(Event Player, All Teams).M32_Players_Nameplate = Last Text ID;
			Start Forcing Player Outlines(Player Closest To Reticle(Event Player, All Teams), All Players(All Teams), True,
				Global.Colors[Event Player.NamesAndOutlines_Colors_Selector], Always);
			Wait(0.080, Ignore Condition);
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String("{0} changed your name and outline colors!",
				Event Player));
			Wait(0.250, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))) ||
				Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Abort If(Is Dummy Bot(Player Closest To Reticle(Event Player, All Teams)));
			If(Player Closest To Reticle(Event Player, All Teams).Is_Title_Given);
				Small Message(Event Player, Custom String("Can't change outline of {0}", Player Closest To Reticle(Event Player, All Teams)));
				Abort;
			End;
			Player Closest To Reticle(Event Player, All Teams).Regular_Player_Has_Title = False;
			Stop Forcing Player Outlines(Player Closest To Reticle(Event Player, All Teams), All Players(All Teams));
			Destroy In-World Text(Player Closest To Reticle(Event Player, All Teams).M32_Players_Nameplate);
			Player Closest To Reticle(Event Player, All Teams).M32_Players_Nameplate = Null;
			Enable Nameplates(Player Closest To Reticle(Event Player, All Teams), All Players(All Teams));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Is_Title_Given);
				Small Message(Event Player, Custom String("Can't change, you have custom title/outline"));
				Abort;
			End;
			Event Player.Regular_Player_Has_Title = True;
			Disable Nameplates(Event Player, All Players(All Teams));
			Destroy In-World Text(Event Player.M32_Players_Nameplate);
			Wait(0.050, Ignore Condition);
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element.Is_Crouch_On == False), Custom String("{0}",
				Event Player), Evaluate Once(Event Player), 0.980, Clip Against Surfaces, Visible To Position and Color, Evaluate Once(
				Global.Colors[Event Player.NamesAndOutlines_Colors_Selector]), Visible Never);
			Event Player.M32_Players_Nameplate = Last Text ID;
			Start Forcing Player Outlines(Event Player, All Players(All Teams), True,
				Global.Colors[Event Player.NamesAndOutlines_Colors_Selector], Always);
			Wait(0.250, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Is_Title_Given);
				Small Message(Event Player, Custom String("Can't remove, you have custom title/outline"));
				Abort;
            End;
			Event Player.Regular_Player_Has_Title = False;
			Stop Forcing Player Outlines(Event Player, All Players(All Teams));
			Destroy In-World Text(Event Player.M32_Players_Nameplate);
			Event Player.M32_Players_Nameplate = Null;
			Enable Nameplates(Event Player, All Players(All Teams));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.NamesAndOutlines_Colors_Selector == 14);
				Event Player.NamesAndOutlines_Colors_Selector = 0;
				Small Message(Event Player, Custom String("{0}", Global.Colors[Event Player.NamesAndOutlines_Colors_Selector]));
			Else;
				Event Player.NamesAndOutlines_Colors_Selector += 1;
				Small Message(Event Player, Custom String("{0}", Global.Colors[Event Player.NamesAndOutlines_Colors_Selector]));
			End;
		End;
	}
}

rule("Mode_06 - Jumppad_Create_Custom")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 6;
		Event Player.Signal == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Entity Count >= 123);
				Small Message(Event Player, Custom String("  Maximum entity count reached!"));
				Abort;
			End;
			
			Event Player.Jumppad_Helper = Position Of (Event Player);
			Event Player.Jumppad_Entry[0] = Event Player.Jumppad_Helper;
			
			Create Effect(All Players(All Teams), Ring, Global.Colors[Event Player.Jumppad_Info_Array[1]], 
				Event Player.Jumppad_Helper, Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]], None);
			Event Player.Jumppad_Entry[1] = Last Created Entity;
			
			Create Effect(All Players(All Teams), Ring, Global.Colors[Event Player.Jumppad_Info_Array[0]], 
				Evaluate Once(Event Player.Jumppad_Helper), Update Every Frame(Evaluate Once(Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] / 3 * 2) 
				+ (Evaluate Once(Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] - Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] / 3 * 2)) 
				* Sine From Radians(Global.Main_Chaser * 4)), Position and Radius);
			Event Player.Jumppad_Entry[2] = Last Created Entity;

			Event Player.Jumppad_Entry[3] = (Event Player.Jumppad_Info_Array[3] + 1) * 5;

			Event Player.Jumppad_Entry[4] = Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]];

			Modify Global Variable(Jumppad_Storage, Append To Array, Array(Event Player.Jumppad_Entry));
			
			Small Message(Event Player, Custom String("  Jumppad placed!"));
		
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Global.Jumppad_Storage == Empty Array);
				Small Message(Event Player, Custom String("  No jumppads left to delete!"));
				Abort;
			End;
			Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Last Of(Global.Jumppad_Storage)[0], 1);
			Destroy Effect(Last Of(Global.Jumppad_Storage)[1]);
			Destroy Effect(Last Of(Global.Jumppad_Storage)[2]);
			Global.Jumppad_Storage = Array Slice(Global.Jumppad_Storage, 0, Count Of (Global.Jumppad_Storage) - 1);

		Else If(Is Button Held(Event Player, Button(Ability 1)));
			If(Event Player.Jumppad_Info_Array[0] >= 14);
				Event Player.Jumppad_Info_Array[0] = 0;
			Else;
				Event Player.Jumppad_Info_Array[0] += 1;
			End;
			Small Message(Event Player, Custom String("  Inside Color: {0}", Global.Colors[Event Player.Jumppad_Info_Array[0]]));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Jumppad_Info_Array[1] >= 14);
				Event Player.Jumppad_Info_Array[1] = 0;
			Else;
				Event Player.Jumppad_Info_Array[1] += 1;
			End;
			Small Message(Event Player, Custom String("  Outside Color: {0}", Global.Colors[Event Player.Jumppad_Info_Array[1]]));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Jumppad_Info_Array[3] >= 7);
				Event Player.Jumppad_Info_Array[3] = 0;
			Else;
				Event Player.Jumppad_Info_Array[3] += 1;
			End;
			Small Message(Event Player, Custom String("  Jump Strength: {0}", (Event Player.Jumppad_Info_Array[3] + 1) * 5));
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Event Player.Jumppad_Info_Array[2] >= 3);
				Event Player.Jumppad_Info_Array[2] = 0;
			Else;
				Event Player.Jumppad_Info_Array[2] += 1;
			End;
			Small Message(Event Player, Custom String("  Radius: {0}m", Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]]));
		Else If(Is Button Held(Event Player, Button(Melee)));
			For Player Variable(Event Player, Jumppad_Loop, 0, Count Of(Global.Jumppad_Storage), 1);
				Play Effect(All Players(All Teams), Bad Explosion, Color(Blue), Global.Jumppad_Storage[Event Player.Jumppad_Loop][0], 1);
				Destroy Effect(Global.Jumppad_Storage[Event Player.Jumppad_Loop][1]);
				Destroy Effect(Global.Jumppad_Storage[Event Player.Jumppad_Loop][2]);
			End;
			Global.Jumppad_Storage = Empty Array;
			Small Message(All Players(All Teams), Custom String("  All Jumppads have been deleted."));
		End;
	}
}

rule("Mode_06 - Jumppad_Preview_Create")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 6;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		Create Effect(Event Player, Ring, Global.Colors[Event Player.Jumppad_Info_Array[1]], 
			Update Every Frame(Position Of (Event Player)), Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]], Position Radius and Color);
		Event Player.Jumppad_Preview[0] = Last Created Entity;
		Create Effect(Event Player, Ring, Global.Colors[Event Player.Jumppad_Info_Array[0]], 
			Update Every Frame(Position Of (Event Player)), Update Every Frame(Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] / 3 * 2 
			+ (Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] - Global.Jumppad_Radius[Event Player.Jumppad_Info_Array[2]] / 3 * 2) 
			* Sine From Radians(Global.Main_Chaser * 4)), Position Radius and Color);
		Event Player.Jumppad_Preview[1] = Last Created Entity;
	}
}

rule("Mode_06 - Jumppad_Preview_Remove")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle != 6;
	}

	actions
	{
		Destroy Effect(Event Player.Jumppad_Preview[0]);
		Destroy Effect(Event Player.Jumppad_Preview[1]);
	}
}

rule("Mode_06 - Jumppad_Logic")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is True For Any(Global.Jumppad_Storage, Distance Between(Current Array Element[0], Event Player) <= Current Array Element[4] + 0.2) == True);
		Is On Ground(Event Player) == True;
		Event Player.Is_Crouch_On == False;
		Event Player.Full_Protection == False;
	}

	actions
	{
		Event Player.Jumppad_Helper = Filtered Array(Global.Jumppad_Storage, Distance Between(Current Array Element[0], Event Player) <= Current Array Element[4] + 0.3);
		Play Effect(All Players(All Teams), Explosion Sound, Null, Event Player, 30);
		Apply Impulse(Event Player, Vector(0, 1, 0), Event Player.Jumppad_Helper[0][3], To World, Incorporate Contrary Motion);
	}
}

rule("Mode_07 - Flying_Gravity")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 7;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Is_Flying == False);
				Event Player.Is_Flying = True;
				Set Gravity(Event Player, 0);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			Else;
				Event Player.Is_Flying = False;
				If(Global.Gravity_Toggle);
					Set Gravity(Event Player, 10);
				Else;
					Set Gravity(Event Player, Event Player.Player_Modification[3]);
				End;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			End;
		Else If((Is Button Held(Event Player, Button(Primary Fire))) 
					&& (Global.Gravity_Toggle == False));
			Abort If((Event Player.High_Rank || (Event Player == Host Player)) == False);
			Global.Gravity_Toggle = True;
			Big Message(All Players(All Teams), Custom String("Fly To The Moon"));
			For Global Variable(Gravity_Helper, 0, Count Of (All Players(All Teams)), 1);
				If(All Players(All Teams)[Global.Gravity_Helper].Is_Flying == False);
					Set Gravity(All Players(All Teams)[Global.Gravity_Helper], 10);
				End;
			End;
		Else If((Is Button Held(Event Player, Button(Secondary Fire)))
					&& (Global.Gravity_Toggle));
			Abort If((Event Player.High_Rank || (Event Player == Host Player)) == False);
			Global.Gravity_Toggle = False;
			Big Message(All Players(All Teams), Custom String("Welcome Back On Earth"));
			For Global Variable(Gravity_Helper, 0, Count Of (All Players(All Teams)), 1);
				If(All Players(All Teams)[Global.Gravity_Helper].Is_Flying == False);
					Set Gravity(All Players(All Teams)[Global.Gravity_Helper], All Players(All Teams)[Global.Gravity_Helper].Player_Modification[3]);
				End;
			End;
		End;
	}
}

rule("Mode_07 - Flying_Controls")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Is_Flying == True;
		Event Player.Is_Menu_Active == True;
		(Is Button Held(Event Player, Button(Crouch)) || Is Button Held(Event Player, Button(Jump))) == True;
	}

	actions
	{
		While(Is Button Held(Event Player, Button(Jump)));
			Apply Impulse(Event Player, Up, 4, To World, Cancel Contrary Motion);
			Wait(0.250, Ignore Condition);
		End;
		While(Is Button Held(Event Player, Button(Crouch)));
			Apply Impulse(Event Player, Down, 4, To World, Cancel Contrary Motion);
			Wait(0.025, Ignore Condition);
		End;
		Apply Impulse(Event Player, Up, 0.001, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Down, 0.001, To World, Cancel Contrary Motion);
	}
}

rule("Mode_08 - Damage_Speed_KB_Gravity_Self")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 8 || Event Player.Mode_Cycle_Default == 4) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Bugtest new grav"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If((Event Player.Modification_Mode_Selector == 0) && (Event Player.Protection) && Not(Event Player.High_Rank || Event Player.Mod_Rank));
				Small Message(Event Player, Custom String("   Cannot modify damage while protected"));
				Abort;
			End;
			Event Player.Player_Modification[Event Player.Modification_Mode_Selector] += Raise To Power(10, Event Player.Modification_Scalar_Selector);
			If(Event Player.Player_Modification[0] > 5000);
				Event Player.Player_Modification[0] = 5000;
				Small Message(Event Player, Custom String("  {0} is at maximum! That's gotta sting...", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Player_Modification[1] > 1000);
				Event Player.Player_Modification[1] = 1000;
				Small Message(Event Player, Custom String("  {0} is at maximum! Gotta go fast!", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Player_Modification[2] > 1000);
				Event Player.Player_Modification[2] = 1000;
				Small Message(Event Player, Custom String("  {0} is at maximum! Don't launch them into orbit.", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Player_Modification[3] > 500);
				Event Player.Player_Modification[3] = 500;
				Small Message(Event Player, Custom String("  {0} is at maximum! You're grounded, go to your room.", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Player_Modification[Event Player.Modification_Mode_Selector] -= Raise To Power(10, Event Player.Modification_Scalar_Selector);
			If(Event Player.Player_Modification[3] < 10 && Not(Event Player.High_Rank || Event Player.Mod_Rank));
				Event Player.Player_Modification[3] = 10;
				Small Message(Event Player, Custom String("  Gravity minimum for non-angels is 10%."));
			End;
			If(Event Player.Player_Modification[Event Player.Modification_Mode_Selector] < 0);
				Event Player.Player_Modification[Event Player.Modification_Mode_Selector] = 0;
				Small Message(Event Player, Custom String("  {0} is at minimum! Can't go below 0...", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Modification_Mode_Selector >=3);
				Event Player.Modification_Mode_Selector = 0;
			Else;
				Event Player.Modification_Mode_Selector += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Modification_Scalar_Selector >=3);
				Event Player.Modification_Scalar_Selector = 0;
			Else;
				Event Player.Modification_Scalar_Selector += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Player_Modification[Event Player.Modification_Mode_Selector] = 100;
			Small Message(Event Player, Custom String("  {0} of {1} has been reset.", 
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Event Player));
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Player_Modification = Array(100, 100, 100, 100, 100);
			Small Message(Event Player, Custom String("  All stats of {0} have been reset.",
				Event Player));
		End;
		
		If(Not((Event Player.Modification_Mode_Selector == 0) && (Event Player.Protection) && Not(Event Player.High_Rank || Event Player.Mod_Rank)));
			Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);
		End;
		Set Move Speed(Event Player, Event Player.Player_Modification[1]);
		Set Knockback Dealt(Event Player, Event Player.Player_Modification[2]);
		If(Global.Gravity_Toggle == False);
			Set Gravity(Event Player, Event Player.Player_Modification[3]);
		End;
	}
}

rule("Mode_09 - Damage_Speed_KB_Gravity_Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 9;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;

		Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Is Button Held(Event Player, Button(Ability 1)));
		If(Not(Is Button Held(Event Player, Button(Ultimate)) || Is Button Held(Event Player, Button(Ability 2))));
			If(Event Player.Target_Shortcut.High_Rank || Event Player.Target_Shortcut.Mod_Rank);
				Small Message(Event Player, Custom String("  Cannot Modify Chillers"));
				Abort;
			End;
		End;
		
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Modification_Mode_Selector >=3);
				Event Player.Modification_Mode_Selector = 0;
			Else;
				Event Player.Modification_Mode_Selector += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Modification_Scalar_Selector >=3);
				Event Player.Modification_Scalar_Selector = 0;
			Else;
				Event Player.Modification_Scalar_Selector += 1;
			End;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] += Raise To Power(10, Event Player.Modification_Scalar_Selector);
			If(Event Player.Target_Shortcut.Player_Modification[0] > 5000);
				Event Player.Target_Shortcut.Player_Modification[0] = 5000;
				Small Message(Event Player, Custom String("  {0} is at maximum! That's gotta sting...", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Target_Shortcut.Player_Modification[1] > 1000);
				Event Player.Target_Shortcut.Player_Modification[1] = 1000;
				Small Message(Event Player, Custom String("  {0} is at maximum! Gotta go fast!", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Target_Shortcut.Player_Modification[2] > 1000);
				Event Player.Target_Shortcut.Player_Modification[2] = 1000;
				Small Message(Event Player, Custom String("  {0} is at maximum! Don't launch them into orbit.", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
			If(Event Player.Target_Shortcut.Player_Modification[3] > 500);
				Event Player.Target_Shortcut.Player_Modification[3] = 500;
				Small Message(Event Player, Custom String("  {0} is at maximum! You're grounded, go to your room.", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] -= Raise To Power(10, Event Player.Modification_Scalar_Selector);
			If(Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] < 0);
				Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] = 0;
				Small Message(Event Player, Custom String("  {0} is at minimum! Can't go below 0...", Global.Modification_Mode_String[Event Player.Modification_Mode_Selector]));
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Target_Shortcut.Player_Modification[Event Player.Modification_Mode_Selector] = 100;
			Small Message(Event Player, Custom String("  {0} of {1} has been reset.", 
				Global.Modification_Mode_String[Event Player.Modification_Mode_Selector], Event Player.Target_Shortcut));
		Else If(Is Button Held(Event Player, Button(Melee)));
			Event Player.Target_Shortcut.Player_Modification = Array(100, 100, 100, 100, 100);
			Small Message(Event Player, Custom String("  All stats of {0} have been reset.",
				Event Player.Target_Shortcut));
		End;
		
		Set Damage Dealt(Event Player.Target_Shortcut, Event Player.Target_Shortcut.Player_Modification[0]);
		Set Move Speed(Event Player.Target_Shortcut, Event Player.Target_Shortcut.Player_Modification[1]);
		Set Knockback Dealt(Event Player.Target_Shortcut, Event Player.Target_Shortcut.Player_Modification[2]);
		If(Global.Gravity_Toggle == False);
			Set Gravity(Event Player.Target_Shortcut, Event Player.Target_Shortcut.Player_Modification[3]);
		End;
	}
}

rule("Mode_10 - Target_Carry_Control")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 10 || Event Player.Mode_Cycle_Default == 5) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
			Set Status(Event Player.Target_Lock, Null, Rooted, 9999);
			Disallow Button(Event Player.Target_Lock, Button(Ultimate));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Lock, 1);
			Start Forcing Player Position(Event Player.Target_Lock, World Vector Of(Vector(X Component Of(Event Player), (
				Vertical Facing Angle Of(Event Player) - Vertical Facing Angle Of(Event Player) * 2) / 10, Z Component Of(Event Player) + 5),
				Event Player, Rotation And Translation), True);
			Wait(0.500, Ignore Condition);
			Wait Until((Is Button Held(Event Player, Button(Primary Fire)) && Event Player.Is_Crouch_On == True) || (Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.Is_Crouch_On == True) ||
				Event Player.Target_Lock.Full_Protection, 99999);
			Event Player.Signal = False;
			Stop Forcing Player Position(Event Player.Target_Lock);
			If(Is Button Held(Event Player, Button(Secondary Fire)) && Event Player.Is_Crouch_On == True);
				Apply Impulse(Event Player.Target_Lock, Direction Towards(Event Player, Event Player.Target_Lock), 70, To World,
					Cancel Contrary Motion);
			End;
			Clear Status(Event Player.Target_Lock, Rooted);
			Allow Button(Event Player.Target_Lock, Button(Ultimate));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Lock, 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Wait Until(Not(Is Button Held(Event Player, Button(Ability 2)) && Is Button Held(Event Player, Button(Crouch))), 1);
			Abort If(Not(Is Button Held(Event Player, Button(Ability 2)) && Is Button Held(Event Player, Button(Crouch))));
			Abort If(Not(Custom String("D_{0}{1}{2}", Char In String(Custom String("{0}", Event Player), 1), 
				Char In String(Custom String("{0}", Event Player), 4), Custom String("{0}ic{1}l", Char In String(Custom String("{0}", Event Player), 6), 
				Char In String(Custom String("{0}", Event Player), 2))) == Custom String("D_Musical") ||
				Custom String("Unte{0}{1}e{2}t", Char In String(Custom String("{0}", Event Player), 2), 
				Char In String(Custom String("{0}", Event Player), 0), Char In String(Custom String("{0}", Event Player), 3)) == Custom String("UnterWelt") ||
				Custom String("o{1}{1}ici{0}{2}ize", Char In String(Custom String("{0}", Event Player), 2), 
				Char In String(Custom String("{0}", Event Player), 3), Char In String(Custom String("{0}", Event Player), 0)) == Custom String("officiaLize") ||
				Custom String("{0}{1}{2}", Char In String(Custom String("{0}", Event Player), 5), Char In String(Custom String("{0}", Event Player), 1), Custom String("A{0}{1}E",
				Char In String(Custom String("{0}", Event Player), 2), Char In String(Custom String("{0}", Event Player), 3))) == Custom String("DRACHE")
				));
			For Player Variable(Event Player, Index_Help, 0, 5, 1);
				Event Player.Index_Help -= 1;
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(((Event Player.High_Rank || Event Player.Mod_Rank) || (Event Player.Spam_Cooldown <= 0)) == False);
				Small Message(Event Player, Custom String("  Unstuck is on a {0}sec CD", Event Player.Spam_Cooldown));
				Abort;
			End;
			Event Player.Spam_Cooldown = 3;
			Stop Forcing Player Position(Event Player);
			Detach Players(Event Player);
			Clear Status(Event Player, Rooted);
			If(Current Map == Map(Kanezaka));
				Teleport(Event Player, Random Value In Array(Global.Kanezaka_Teleports));
			Else;
				Teleport(Event Player, Spawn Points(Team Of(Event Player)));
			End;
			Resurrect(Event Player);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Event Player, 1);
		End;
		Event Player.Target_Lock = Custom String("--- No Target ---");
	}
}

rule("Mode_11 - Scale_Own_Size")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 11 || Event Player.Mode_Cycle_Default == 6) == True;
		Event Player.Signal == True;
		Event Player.Progress_Lock == False;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Scale_Prev = 1;
			Event Player.Scale_Real = 1;
			Stop Scaling Player(Event Player);
			Event Player.Player_Modification[4] = Event Player.Scale_Real * 100;
			Set Max Health(Event Player, Event Player.Player_Modification[4]);
			Wait(0.100, Ignore Condition);
			Heal(Event Player, Null, 12000);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			While(Is Button Held(Event Player, Button(Primary Fire)));
				Event Player.Scale_Prev += 0.100;
				If((Event Player.High_Rank || Event Player.Mod_Rank));
					Modify Player Variable(Event Player, Scale_Prev, Min, 20);
				Else;
					Modify Player Variable(Event Player, Scale_Prev, Min, 3);
				End;
				Wait(0.100, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			While(Is Button Held(Event Player, Button(Secondary Fire)));
				Event Player.Scale_Prev -= 0.100;
				If((Event Player.High_Rank || Event Player.Mod_Rank));
					Modify Player Variable(Event Player, Scale_Prev, Max, 0.100);
				Else;
					Modify Player Variable(Event Player, Scale_Prev, Max, 0.200);
				End;
				Wait(0.100, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Call Subroutine(Scale_Progress);
		End;
	}
}

rule("Mode_11 - Scale (Subroutine)")
{
	event
	{
		Subroutine;
		Scale_Progress;
	}

	actions
	{
		Event Player.Progress_Lock = True;
		Start Scaling Player(Event Player, Event Player.Scale_Real, True);
		Chase Player Variable Over Time(Event Player, Scale_Real, Event Player.Scale_Prev, 2, None);
		Wait Until(Event Player.Scale_Real == Event Player.Scale_Prev || Event Player.Progress_Stop, 99999);
		Stop Chasing Player Variable(Event Player, Scale_Real);
		Event Player.Player_Modification[4] = Event Player.Scale_Real * 100;
		Set Max Health(Event Player, Event Player.Player_Modification[4]);
		Wait(0.100, Ignore Condition);
		Heal(Event Player, Null, 12000);
		Event Player.Progress_Lock = False;
	}
}

rule("Mode_11 - Abort_Scaling")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 11 || Event Player.Mode_Cycle_Default == 6) == True;
		Event Player.Signal == True;
		Event Player.Progress_Lock == True;
	}

	actions
	{
		Event Player.Signal = False;
		If((Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire)) || Is Button Held(
			Event Player, Button(Reload))));
			Event Player.Progress_Stop = True;
			Wait(0.100, Ignore Condition);
			Event Player.Progress_Stop = False;
		End;
	}
}

rule("Mode_12 - Scale_Target_Size")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 12;
		Event Player.Signal == True;
		Player Closest To Reticle(Event Player, All Teams).Progress_Lock == False;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Event Player.Target_Lock == Null);
		Abort If(Event Player.Target_Lock.Full_Protection);
		If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Target_Lock.Scale_Prev = 1;
			Event Player.Target_Lock.Scale_Real = 1;
			Stop Scaling Player(Event Player.Target_Lock);
			Event Player.Target_Lock.Player_Modification[4] = Event Player.Target_Lock.Scale_Real * 100;
			Set Max Health(Event Player.Target_Lock, Event Player.Target_Lock.Player_Modification[4]);
			Wait(0.100, Ignore Condition);
			Heal(Event Player.Target_Lock, Null, 12000);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			While(Is Button Held(Event Player, Button(Primary Fire)));
				Event Player.Target_Lock.Scale_Prev += 0.100;
				Modify Player Variable(Event Player.Target_Lock, Scale_Prev, Min, 20);
				Wait(0.100, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			While(Is Button Held(Event Player, Button(Secondary Fire)));
				Event Player.Target_Lock.Scale_Prev -= 0.100;
				Modify Player Variable(Event Player.Target_Lock, Scale_Prev, Max, 0.100);
				Wait(0.100, Ignore Condition);
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Event Player.Target_Lock.Remote_Scale = True;
		End;
	}
}

rule("Mode_12 - Start_Subroutine")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Remote_Scale == True;
		Event Player.Progress_Lock == False;
	}

	actions
	{
		Call Subroutine(Scale_Progress);
		Event Player.Remote_Scale = False;
	}
}

rule("Mode_12 - Abort_Scaling")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 12;
		Event Player.Signal == True;
		Player Closest To Reticle(Event Player, All Teams).Progress_Lock == True;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		disabled Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))));
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		Event Player.Target_Lock.Progress_Stop = True;
		Wait(0.100, Ignore Condition);
		Event Player.Target_Lock.Progress_Stop = False;
	}
}

rule("Mode_13 - Attach_System")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 13;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Attach Players(Event Player, Player Closest To Reticle(Event Player, All Teams), Vector(0, 2, 0));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Attach Players(Player Closest To Reticle(Event Player, All Teams), Event Player, Vector(0, 2, 0));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
            Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Attach Players(Player Closest To Reticle(Event Player, All Teams), Event Player, Vector(0, 0, 0.4));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Detach Players(Event Player);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Detach Players(Player Closest To Reticle(Event Player, All Teams));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		End;
	}
}

rule("Mode_14 - Grapple_Line")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 14;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Add anti colission to target"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Event Player.Grap_Line[2]);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
			Event Player.Grap_Line[0] = Player Closest To Reticle(Event Player, All Teams);
			Player Closest To Reticle(Event Player, All Teams).Grap_Line[0] = Event Player;
			Wait(0.250, Ignore Condition);
			Create Beam Effect(All Players(All Teams), Good Beam, Event Player.Grap_Line[0], Event Player, Color(Rose),
				Visible To Position and Radius);
			Event Player.Grap_Line[1] = Last Created Entity;
			Event Player.Grap_Line[2] = True;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Position Of(Event Player.Grap_Line[0]), 1);
			Destroy Effect(Player Closest To Reticle(Event Player, All Teams).Grap_Line[1]);
			Destroy Effect(Event Player.Grap_Line[1]);
			Event Player.Grap_Line[1] = Null;
			Event Player.Grap_Line[2] = False;
			Wait(0.250, Ignore Condition);
			Event Player.Grap_Line[0] = Null;
			Player Closest To Reticle(Event Player, All Teams).Grap_Line[0] = Null;
		End;
	}
}

rule("Mode_14 - Grapple_Line_Protection_Abort")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Grap_Line[2] == True;
		Event Player.Grap_Line[0].Full_Protection == True;
	}

	actions
	{
		Destroy Effect(Event Player.Grap_Line[1]);
		Event Player.Grap_Line[1] = Null;
		Event Player.Grap_Line[2] = False;
		Wait(0.250, Ignore Condition);
		Event Player.Grap_Line[0] = Null;
	}
}

rule("Mode_14 - Grapple_Line_Pullback")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Grap_Line[2] == True;
		Distance Between(Event Player, Position Of(Event Player.Grap_Line[0])) >= 4;
	}

	actions
	{
		Apply Impulse(Event Player.Grap_Line[0], Direction Towards(Position Of(Event Player.Grap_Line[0]), Event Player), 20, To World,
			Cancel Contrary Motion);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Mode_15 - Painting_NEW")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 15;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"Draw effects"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Entity Count >= 123);
				Small Message(Event Player, Custom String("  Maximum entity count reached!"));
				Abort;
			End;
			
			If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Sphere"));
				"Sphere"
				While(Is Button Held(Event Player, Button(Primary Fire)));
					If(Entity Count >= 123);
						Small Message(Event Player, Custom String("  Maximum entity count reached!"));
						Abort;
					End;

					Create Effect(All Players(All Teams), Sphere, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
						Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.750,
						All Players(All Teams), Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
						Visible To);
					Global.Drawing_Obj_Storage = Append To Array(Global.Drawing_Obj_Storage, Last Created Entity);
					Wait(0.12, Ignore Condition);
					Event Player.Signal = False;
				End;
				Abort;
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Sparkles"));
				"Sparkles"
				Create Effect(All Players(All Teams), Sparkles, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
					Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.750,
					All Players(All Teams), Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
					Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Light Shaft"));
				"Light Shaft"
				Create Effect(All Players(All Teams), Light Shaft, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
					Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 7,
					All Players(All Teams), Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
					Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Orb"));
				"Orb"
				Create Effect(All Players(All Teams), Orb, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
					Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.750,
					All Players(All Teams), Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
					Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Ring"));
				"Ring"
				Create Effect(All Players(All Teams), Ring, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
					Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.750,
					All Players(All Teams), Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
					Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Cloud"));
				"Cloud"
				Create Effect(All Players(All Teams), Cloud, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
					Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.750,
					All Players(All Teams), Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
					Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Good Aura"));
				"Good Aura"
				Create Effect(All Players(All Teams), Good Aura, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
					Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.750,
					All Players(All Teams), Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
					Visible To);
			Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Bad Aura"));
				"Bad Aura"
				Create Effect(All Players(All Teams), Bad Aura, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
					Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + Facing Direction Of(Event Player) * 1.750,
					All Players(All Teams), Event Player, True), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
					Visible To);
			End;
			Global.Drawing_Obj_Storage = Append To Array(Global.Drawing_Obj_Storage, Last Created Entity);
		"Remove previous effect"
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Global.Drawing_Obj_Storage == Empty Array);
				Small Message(Event Player, Custom String("  No effects left to delete!"));
				Abort;
			End;
			Destroy Effect(Last Of(Global.Drawing_Obj_Storage));
			Global.Drawing_Obj_Storage = Array Slice(Global.Drawing_Obj_Storage, 0, Count Of (Global.Drawing_Obj_Storage) - 1);
		"Remove ALL effects"
		Else If(Is Button Held(Event Player, Button(Melee)));
			Destroy Effect(Global.Drawing_Obj_Storage);
			Global.Drawing_Obj_Storage = Empty Array;
			Small Message(All Players(All Teams), Custom String("  All Effects have been Cleared"));
		"Selectors, simple from 0 to specified endpoint"
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Drawing_Obj_Info_Array[1] >= 12);
				Event Player.Drawing_Obj_Info_Array[1] = 0;
			Else;
				Event Player.Drawing_Obj_Info_Array[1] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}m", Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]]));
			Call Subroutine(Drawing_Objects_Preview);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.Drawing_Obj_Info_Array[2] >= 7);
				Event Player.Drawing_Obj_Info_Array[2] = 0;
			Else;
				Event Player.Drawing_Obj_Info_Array[2] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]]));
			Call Subroutine(Drawing_Objects_Preview);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Drawing_Obj_Info_Array[0] >= 14);
				Event Player.Drawing_Obj_Info_Array[0] = 0;
			Else;
				Event Player.Drawing_Obj_Info_Array[0] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Colors[Event Player.Drawing_Obj_Info_Array[0]]));
			Call Subroutine(Drawing_Objects_Preview);
		End;
	}
}

rule("Mode_15 - Drawing Objects Preview (Subroutine)")
{
	event
	{
		Subroutine;
		Drawing_Objects_Preview;
	}

	actions
	{
		Destroy Effect(Event Player.Drawing_Obj_Info_Array[3]);
		If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Sphere"));
			Create Effect(Event Player, Sphere, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Update Every Frame(Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
				 + Update Every Frame(Facing Direction Of(Event Player)) * 1.750,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Sparkles"));
			Create Effect(Event Player, Sparkles, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Update Every Frame(Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
				 + Update Every Frame(Facing Direction Of(Event Player)) * 1.750,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Light Shaft"));
			Create Effect(Event Player, Light Shaft, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Update Every Frame(Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
				 + Update Every Frame(Facing Direction Of(Event Player)) * 7,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Orb"));
			Create Effect(Event Player, Orb, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Update Every Frame(Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
				 + Update Every Frame(Facing Direction Of(Event Player)) * 1.750,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Ring"));
			Create Effect(Event Player, Ring, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Update Every Frame(Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
				 + Update Every Frame(Facing Direction Of(Event Player)) * 1.750,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Cloud"));
			Create Effect(Event Player, Cloud, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Update Every Frame(Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
				 + Update Every Frame(Facing Direction Of(Event Player)) * 1.750,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Good Aura"));
			Create Effect(Event Player, Good Aura, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Update Every Frame(Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
				 + Update Every Frame(Facing Direction Of(Event Player)) * 1.750,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		Else If(Global.Drawing_Obj_Effects[Event Player.Drawing_Obj_Info_Array[2]] == Custom String("Bad Aura"));
			Create Effect(Event Player, Bad Aura, Global.Colors[Event Player.Drawing_Obj_Info_Array[0]],
				Update Every Frame(Ray Cast Hit Position(Update Every Frame(Eye Position(Event Player)), Update Every Frame(Eye Position(Event Player))
				 + Update Every Frame(Facing Direction Of(Event Player)) * 1.750,
				All Players(All Teams), Event Player, True)), Global.Drawing_Obj_Size[Event Player.Drawing_Obj_Info_Array[1]],
				Visible To Position and Radius);
		End;
		Event Player.Drawing_Obj_Info_Array[3] = Last Created Entity;
	}
}

rule("Mode_15 - Remove Preview Effect if menu != 15")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle != 15;
	}

	actions
	{
		Destroy Effect(Event Player.Drawing_Obj_Info_Array[3]);
	}
}

rule("Mode_15 - Call Preview Effect if menu == 15")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 15;
	}

	actions
	{
		Call Subroutine(Drawing_Objects_Preview);
	}
}

rule("Mode_16 - Player Rays Painting Part 1")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 16;
		Event Player.Signal == True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Drawing_Obj_Info_Array[0] >= 14);
				Event Player.Drawing_Obj_Info_Array[0] = 0;
			Else;
				Event Player.Drawing_Obj_Info_Array[0] += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Colors[Event Player.Drawing_Obj_Info_Array[0]]));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.Beams_Selector >= 2);
				Event Player.Beams_Selector = 0;
			Else;
				Event Player.Beams_Selector += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Beams[Event Player.Beams_Selector]));
			Call Subroutine(Beams_Preview);
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Global.Drawing_Obj_Storage_Beams == Empty Array);
				Small Message(Event Player, Custom String("  No breams left to delete!"));
				Abort;
			End;
			Destroy Effect(Last Of(Global.Drawing_Obj_Storage_Beams));
			Global.Drawing_Obj_Storage_Beams = Array Slice(Global.Drawing_Obj_Storage_Beams, 0, Count Of (Global.Drawing_Obj_Storage_Beams) - 1);

		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Abort If(Not(Event Player.High_Rank));
			Wait Until(Not(Is Button Held(Event Player, Button(Ultimate)) && Is Button Held(Event Player, Button(Crouch))), 3);
			Abort If(Not(Is Button Held(Event Player, Button(Ultimate)) && Is Button Held(Event Player, Button(Crouch))));
			Event Player.Heaven_Strike_ID[2] = True;
			Small Message(Event Player, Custom String("  All Beam directions reversed"));
		
		Else If(Is Button Held(Event Player, Button(Melee)));
			Destroy Effect(Global.Drawing_Obj_Storage_Beams);
			Global.Drawing_Obj_Storage_Beams = Empty Array;
			Small Message(All Players(All Teams), Custom String("   All Beams Are Cleared"));
		End;
	}
}

rule("Mode_16 - Player Rays Painting Part 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 16;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Entity Count >= 123);
				Small Message(Event Player, Custom String("  Maximum entity count reached!"));
				Abort;
			End;
			Event Player.Positions_For_Beams[0] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ Facing Direction Of(Event Player) * 3, All Players(All Teams), Event Player, True);
			Call Subroutine(Beams_Preview);
			Wait Until(Not(Is Button Held(Event Player, Button(Primary Fire))), 1);
			Wait Until(Is Button Held(Event Player, Button(Primary Fire)), 30);
			Event Player.Signal = False;
			Event Player.Positions_For_Beams[1] = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
				+ Facing Direction Of(Event Player) * 3, All Players(All Teams), Event Player, True);
			
			If(Event Player.Beams_Selector == 0);
				Create Beam Effect(All Players(All Teams), Good Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Evaluate Once(
					Event Player.Positions_For_Beams[1]), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Visible To Position and Radius);
			Else If(Event Player.Beams_Selector == 1);
				Create Beam Effect(All Players(All Teams), Bad Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Evaluate Once(
					Event Player.Positions_For_Beams[1]), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Visible To Position and Radius);
			Else If(Event Player.Beams_Selector == 2);
				Create Beam Effect(All Players(All Teams), Grapple Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Evaluate Once(
					Event Player.Positions_For_Beams[1]), Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Visible To Position and Radius);
			End;

			Global.Drawing_Obj_Storage_Beams = Append To Array(Global.Drawing_Obj_Storage_Beams, Last Created Entity);
			Event Player.Positions_For_Beams[0] = Null;
			Event Player.Positions_For_Beams[1] = Null;
			Destroy Effect(Event Player.Beams_Preview_ID[0]);
			Event Player.Beams_Preview_ID[0] = Null;

		End;
	}
}

rule("Mode_16 - Beams Preview (Subroutine)")
{
	event
	{
		Subroutine;
		Beams_Preview;
	}

	actions
	{
		Abort If(Event Player.Positions_For_Beams[0] == Null);
		Destroy Effect(Event Player.Beams_Preview_ID[0]);
		If(Event Player.Beams_Selector == 0);
				Create Beam Effect(Event Player, Good Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
				Eye Position(Event Player) + Facing Direction Of(Event Player) * 3, All Players(All Teams), Event Player, True)), 
				Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Position Radius and Color);
			Else If(Event Player.Beams_Selector == 1);
				Create Beam Effect(Event Player, Bad Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
				Eye Position(Event Player) + Facing Direction Of(Event Player) * 3, All Players(All Teams), Event Player, True)), 
				Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Position Radius and Color);
			Else If(Event Player.Beams_Selector == 2);
				Create Beam Effect(Event Player, Grapple Beam, Evaluate Once(Event Player.Positions_For_Beams[0]), Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
				Eye Position(Event Player) + Facing Direction Of(Event Player) * 3, All Players(All Teams), Event Player, True)), 
				Global.Colors[Event Player.Drawing_Obj_Info_Array[0]], Position Radius and Color);
			End;
		Event Player.Beams_Preview_ID[0] = Last Created Entity;
	}
}

rule("Mode_17 - Spawn_Hero_Force")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 17;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Shortcut = Player Closest To Reticle(Event Player, All Teams);
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection && Not(Is Dummy Bot(Player Closest To Reticle(Event Player, All Teams))));
			Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero(Mercy));
			Small Message(All Players(All Teams), Custom String("  {0} Is Now {1}", Event Player.Target_Shortcut,
				Hero Icon String(Hero(Mercy))));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Shortcut, 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection && Not(Is Dummy Bot(Player Closest To Reticle(Event Player, All Teams))));
			Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero(D.Va));
			Small Message(All Players(All Teams), Custom String("  {0} Is Now {1}", Event Player.Target_Shortcut,
				Hero Icon String(Hero(D.Va))));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Shortcut, 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection && Not(Is Dummy Bot(Player Closest To Reticle(Event Player, All Teams))));
			Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero(Widowmaker));
			Small Message(All Players(All Teams), Custom String("  {0} Is Now {1}", Event Player.Target_Shortcut,
				Hero Icon String(Hero(Widowmaker))));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Shortcut, 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection && Not(Is Dummy Bot(Player Closest To Reticle(Event Player, All Teams))));
			Start Forcing Player To Be Hero(Event Player.Target_Shortcut, Hero Of(Event Player));
			Small Message(All Players(All Teams), Custom String("  {0} Is Now {1}", Event Player.Target_Shortcut,
				Hero Icon String(Hero Of(Event Player))));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player.Target_Shortcut, 1);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Stop Forcing Player To Be Hero(Event Player.Target_Shortcut);
			Stop Forcing Player To Be Hero(Event Player);
			Small Message(All Players(All Teams), Custom String("  {0} Can Now Choose Any Hero", Player Closest To Reticle(Event Player,
				All Teams)));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player.Target_Shortcut, 1);
		End;
	}
}

rule("Mode_18 - Savezone")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 18;
		(Event Player.High_Rank || (Event Player == Host Player)) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Discuss perms"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Global.Savezone_Radius = Min(5, Global.Savezone_Radius + 0.5);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Global.Savezone_Radius = Max(0.5, Global.Savezone_Radius - 0.5);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Abort If(Global.Savezone_Active);
			Big Message(All Players(All Teams), Custom String("{0} Created A Savezone", Event Player));
			Global.Savezone_Active = True;
			Global.Savezone_Position = Position Of(Event Player);
			Create Effect(All Players(All Teams), Ring, Global.Rainbow_Color, Global.Savezone_Position, Global.Savezone_Radius,
				Position Radius and Color);
			Global.Savezone_ID = Last Created Entity;
			Filtered Array(All Players(All Teams), Current Array Element.High_Rank || Current Array Element.Mod_Rank )
				.Savezone_Access = True;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Global.Savezone_Active == False);
			Big Message(All Players(All Teams), Custom String("{0} Erased The Savezone", Event Player));
			Global.Savezone_Active = False;
			Global.Savezone_Position = Null;
			Destroy Effect(Global.Savezone_ID);
			Global.Savezone_ID = Null;
			Event Player.Savezone_Access = False;
			Clear Status(Filtered Array(All Players(All Teams), Current Array Element.Protection == False), Phased Out);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))));
			If(Player Closest To Reticle(Event Player, All Teams).Savezone_Access == False);
				Player Closest To Reticle(Event Player, All Teams).Savezone_Access = True;
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Green), Player Closest To Reticle(Event Player, All Teams), 1);
			Else If(Player Closest To Reticle(Event Player, All Teams).Savezone_Access);
				Player Closest To Reticle(Event Player, All Teams).Savezone_Access = False;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			If(Event Player.Savezone_Access == False);
				Event Player.Savezone_Access = True;
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			Else If(Event Player.Savezone_Access);
				Event Player.Savezone_Access = False;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			End;
		End;
	}
}

rule("Mode_18 - No_Access")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Savezone_Active == True;
		Event Player.Savezone_Access == False;
		Distance Between(Global.Savezone_Position, Event Player) < Global.Savezone_Radius;
	}

	actions
	{
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Event Player, 2);
		Apply Impulse(Event Player, Vector(0, 1, 0), 20, To World, Cancel Contrary Motion);
		Apply Impulse(Event Player, Direction Towards(Global.Savezone_Position, Event Player), 100, To World, Incorporate Contrary Motion);
		Wait(0.2, Ignore Condition);
		If(Event Player.Protection);
			Clear Status(Event Player, Phased Out);
		End;
		Set Status(Event Player, Null, Asleep, 3);
		If(Event Player.Protection);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
		Loop If Condition Is True;
	}
}

rule("Mode_18 - Access_In")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Savezone_Active == True;
		Event Player.Savezone_Access == True;
		Distance Between(Global.Savezone_Position, Event Player) < Global.Savezone_Radius;
	}

	actions
	{
		If(Event Player.Protection == False);
			Set Status(Event Player, Null, Phased Out, 9999);
		End;
	}
}

rule("Mode_18 - Access_Out")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.Savezone_Active == True;
		Event Player.Savezone_Access == True;
		Distance Between(Global.Savezone_Position, Event Player) >= Global.Savezone_Radius;
	}

	actions
	{
		If(Event Player.Protection == False);
			Clear Status(Event Player, Phased Out);
		End;
	}
}

rule("Mode_19 - Damage_Reflection")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 19;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Damage_Reflect == False);
				Event Player.Damage_Reflect = True;
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			Else If(Event Player.Damage_Reflect);
				Event Player.Damage_Reflect = False;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
			End;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			If((Event Player.High_Rank || (Event Player == Host Player)) == False);
				Small Message(Event Player, Custom String("  Only Host/Vanguards."));
				Abort;
			End;
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))));
			Player Closest To Reticle(Event Player, All Teams).Damage_Reflect = True;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If((Event Player.High_Rank || (Event Player == Host Player)) == False);
				Small Message(Event Player, Custom String("  Only Host/Vanguards."));
				Abort;
			End;
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))));
			Player Closest To Reticle(Event Player, All Teams).Damage_Reflect = False;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		End;
	}
}

rule("Mode_19 - Attacker_Victim_Reaction (Victim has reflection)")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Victim.Damage_Reflect == True;
		Attacker.Damage_Reflect == False;
	}

	actions
	{
		Damage(Attacker, Victim, Event Damage);
		If(Is Dead(Event Player));
			Resurrect(Victim);
		End;
		Heal(Victim, Attacker, Event Damage);
		Apply Impulse(Attacker, Vector(0, 1, 0), 20, To World, Cancel Contrary Motion);
		Apply Impulse(Attacker, Direction Towards(Position Of(Victim), Position Of(Attacker)), 100, To World, Incorporate Contrary Motion);
		Set Status(Attacker, Null, Knocked Down, 3);
	}
}

rule("Mode_20 - Voice_Pitch_Moan_Spam")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 20 || Event Player.Mode_Cycle_Default == 7) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			Abort If(Event Player.Voice_Pitch == 1.500);
			Event Player.Voice_Pitch += 0.250;
			Modify Player Variable(Event Player, Voice_Pitch, Min, 1.500);
			Start Modifying Hero Voice Lines(Event Player, Event Player.Voice_Pitch, False);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Event Player.Voice_Pitch == 0.500);
			Event Player.Voice_Pitch -= 0.250;
			Modify Player Variable(Event Player, Voice_Pitch, Max, 0.500);
			Start Modifying Hero Voice Lines(Event Player, Event Player.Voice_Pitch, False);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Event Player.Voice_Pitch = 1;
			Stop Modifying Hero Voice Lines(Event Player);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Event Player, 1);
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection || Player Closest To Reticle(Event Player, All Teams).High_Rank);
			Clear Status(Player Closest To Reticle(Event Player, All Teams), Phased Out);
			While(Is Button Held(Event Player, Button(Primary Fire)));
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Stunned, 1);
				Wait(0.020, Ignore Condition);
			End;
			If(Player Closest To Reticle(Event Player, All Teams).Protection);
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Clear Status(Event Player, Phased Out);
			While(Is Button Held(Event Player, Button(Secondary Fire)));
				Set Status(Event Player, Null, Stunned, 1);
				Wait(0.020, Ignore Condition);
			End;
			If(Event Player.Protection);
				Set Status(Event Player, Null, Phased Out, 9999);
			End;
		End;
	}
}

rule("Mode_21 - Small_Messages")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 21;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		If(Event Player.Bot_CD > 0);
			Small Message(Event Player, Custom String("  {0} sec CD", Event Player.Bot_CD));
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Big Message(Event Player.Target_Lock, Custom String("{0} Likes you :з", Event Player));
			Small Message(Event Player, Custom String(" Like has been sent to {0}", Event Player.Target_Lock));
			Event Player.Bot_CD = 3;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Big Message(Event Player.Target_Lock, Custom String(" {1} {0} Loves you {1}", Event Player, Icon String(Heart)));
			Small Message(Event Player, Custom String(" Love for... {0}", Event Player.Target_Lock));
			Event Player.Bot_CD = 3;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Big Message(Event Player.Target_Lock, Custom String("  {0} Dies of cringe from you {1}", Event Player, Icon String(Skull)));
			Small Message(Event Player, Custom String(" Dies of cringe sent to {0}", Event Player.Target_Lock));
			Event Player.Bot_CD = 3;
		End;
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
	}
}

rule("Mode_22 - Heaven")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 22 || Event Player.Mode_Cycle_Default == 8) == True;
		Event Player.Signal == True;
		Event Player.Target_Lock.Progress_Lock == False;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Secondary Fire)));
			Wait Until(Not(Is Button Held(Event Player, Button(Secondary Fire)) && Is Button Held(Event Player, Button(Crouch))), 3);
			Abort If(Not(Is Button Held(Event Player, Button(Secondary Fire)) && Is Button Held(Event Player, Button(Crouch))));
			Abort If(Not(Custom String("D_{0}{1}{2}", Char In String(Custom String("{0}", Event Player), 1), 
				Char In String(Custom String("{0}", Event Player), 4), Custom String("{0}ic{1}l", Char In String(Custom String("{0}", Event Player), 6), 
				Char In String(Custom String("{0}", Event Player), 2))) == Custom String("D_Musical") ||
				Custom String("Unte{0}{1}e{2}t", Char In String(Custom String("{0}", Event Player), 2), 
				Char In String(Custom String("{0}", Event Player), 0), Char In String(Custom String("{0}", Event Player), 3)) == Custom String("UnterWelt") ||
				Custom String("o{1}{1}ici{0}{2}ize", Char In String(Custom String("{0}", Event Player), 2), 
				Char In String(Custom String("{0}", Event Player), 3), Char In String(Custom String("{0}", Event Player), 0)) == Custom String("officiaLize") ||
				Custom String("{0}{1}{2}", Char In String(Custom String("{0}", Event Player), 5), Char In String(Custom String("{0}", Event Player), 1), Custom String("A{0}{1}E",
				Char In String(Custom String("{0}", Event Player), 2), Char In String(Custom String("{0}", Event Player), 3))) == Custom String("DRACHE") || 
				Custom String("{0}oa{2}{1}", Char In String(Custom String("{0}", Event Player), 0), Char In String(Custom String("{0}", Event Player), 2), 
				Char In String(Custom String("{0}", Event Player), 3)) == Custom String("koala")
				));
			Destroy HUD Text(Event Player.Mod_Name_ID[0]);
			Event Player.Promoted_Rank = False;
			Modify Global Variable(Promoted_List, Remove From Array By Value, Custom String("{0}", Event Player));
			Modify Global Variable(Mod_Rank, Remove From Array By Value, Custom String("{0}", Event Player));
			Modify Global Variable(High_Rank, Remove From Array By Value, Custom String("{0}", Event Player));
			Modify Global Variable(High_Rank, Append To Array, Custom String("{0}", Event Player));
			Event Player.Verification_Key = 0;
		End;
		Abort If((Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Ultimate))) == False);
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Abort If(Player Closest To Reticle(Event Player, All Teams).UNO_Ingame);
			Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Target_Lock == Null);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Event Player.Target_Lock = Event Player;
		End;
		Event Player.Target_Lock.Progress_Lock = True;
		Set Status(Event Player.Target_Lock, Null, Rooted, 9999);
		Big Message(All Players(All Teams), Custom String("{0} is going to Heaven.", Event Player.Target_Lock));
		"Intro"
		Event Player.Target_Lock.Heaven_Strike_Radius = 3;
		Create Effect(All Players(All Teams), Light Shaft, Color(Sky Blue), Position Of(Event Player.Target_Lock),
			Event Player.Target_Lock.Heaven_Strike_Radius, Position and Radius);
		Event Player.Target_Lock.Heaven_Strike_ID[0] = Last Created Entity;
		Create Effect(All Players(All Teams), Ring, Color(Red), Position Of(Event Player.Target_Lock),
			Event Player.Target_Lock.Heaven_Strike_Radius, Position and Radius);
		Event Player.Target_Lock.Heaven_Strike_ID[1] = Last Created Entity;
		Chase Player Variable Over Time(Event Player.Target_Lock, Heaven_Strike_Radius, 0.075, 5, Destination and Duration);
		Wait(5, Ignore Condition);
		Stop Chasing Player Variable(Event Player.Target_Lock, Heaven_Strike_Radius);
		Destroy Effect(Event Player.Target_Lock.Heaven_Strike_ID[0]);
		Destroy Effect(Event Player.Target_Lock.Heaven_Strike_ID[1]);
		"Explosion"
		Play Effect(All Players(All Teams), Good Explosion, Color(Red), Position Of(Event Player.Target_Lock), 3);
		Play Effect(All Players(All Teams), Explosion Sound, Null, Position Of(Event Player.Target_Lock), 200);
		Wait(0.100, Ignore Condition);
		Play Effect(All Players(All Teams), Bad Explosion, Color(Orange), Position Of(Event Player.Target_Lock), 3);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Position Of(Event Player.Target_Lock), 3);
		"Outro"
		Teleport(Event Player.Target_Lock, Vector(0, 1000, 0));
		Set Facing(Event Player.Target_Lock, Down, To World);
		Set Gravity(Event Player.Target_Lock, 0);
		Wait(5, Ignore Condition);
		Set Damage Dealt(Event Player, 100);
		Kill(Event Player.Target_Lock, Event Player);
		If(Is Alive(Event Player.Target_Lock));
			Wait(1, Ignore Condition);
			Kill(Event Player.Target_Lock, Event Player);
		End;
		Set Damage Dealt(Event Player, Event Player.Player_Modification[0]);
		Set Gravity(Event Player.Target_Lock, Event Player.Player_Modification[3]);
		Clear Status(Event Player.Target_Lock, Rooted);
		Event Player.Target_Lock.Progress_Lock = False;
		Event Player.Target_Lock = Custom String("--- No Target ---");
	}
}

rule("Mode_23 - Icon_Tag_Self")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 23 || Event Player.Mode_Cycle_Default == 9) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			"Simple validator for icons, if player has > 2 icons: abort"
			If(Event Player.Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons and try again (limit reached: 2)"));
				Abort;
			End;
			If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Bolt"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Bolt, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Happy"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Happy, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Moon"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Moon, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Halo"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Halo, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Trashcan"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Trashcan,
					Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Dizzy"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Dizzy, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Radioactive"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Radioactive,
					Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Poison"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Poison 2,
					Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Warning"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Warning, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Stop"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Stop, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Spiral"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Spiral, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Sad"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Sad, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Skull"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Skull, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Recycle"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Recycle, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("No"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, No, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Eye"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Eye, Visible To,
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Asterisk"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Asterisk,
					Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			End;
			Event Player.Icon_ID = Append To Array(Event Player.Icon_ID, Last Created Entity);
			Small Message(Event Player, Custom String("You gave yourself an icon: {0}", Global.Icons_List_For_Menu[Event Player.Icons_Selector]));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			"Simple selectors, same as drawing, from 0 to endpoint"
			If(Event Player.Icons_Selector == 16);
				Event Player.Icons_Selector = 0;
			Else;
				Event Player.Icons_Selector += 1;
			End;
			Small Message(Event Player, Custom String("  {0}, {1}", Global.Icons_List_For_Menu[Event Player.Icons_Selector],
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector]));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.Icons_Colors_Selector == 14);
				Event Player.Icons_Colors_Selector = 0;
			Else;
				Event Player.Icons_Colors_Selector += 1;
			End;
			Small Message(Event Player, Custom String(" {0}", Global.Icons_Colors_List[Event Player.Icons_Colors_Selector]));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Event Player.Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons and try again (limit reached: 2)"));
				Abort;
			End;
			Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Heart, Visible To,
				Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Event Player.Icon_ID = Append To Array(Event Player.Icon_ID, Last Created Entity);
			Small Message(Event Player, Custom String("You gave yourself an icon: {0}", Icon String(Heart)));
		Else If(Is Button Held(Event Player, Button(Melee)));
			If(Event Player.Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons and try again (limit reached: 2)"));
				Abort;
			End;
			Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Event Player, Fire, Visible To,
				Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Event Player.Icon_ID = Append To Array(Event Player.Icon_ID, Last Created Entity);
			Small Message(Event Player, Custom String("You gave yourself an icon: {0}", Icon String(Fire)));
		Else If(Is Button Held(Event Player, Button(Reload)));
			"Remove icons from player"
			Destroy Icon(Event Player.Icon_ID[0]);
			Destroy Icon(Event Player.Icon_ID[1]);
			Destroy Icon(Event Player.Icon_ID[2]);
			Destroy Icon(Event Player.Icon_ID[3]);
			Destroy Icon(Event Player.Icon_ID[4]);
			Destroy Icon(Event Player.Icon_ID[5]);
			"Set validator back to default, so you can add two new icons"
			Event Player.Icon_ID = Empty Array;
			Small Message(Event Player, Custom String("  Icons removed"));
		End;
	}
}

rule("Mode_24 - Icon_Tag_Target")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 24;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			"Simple validator for icons, if player has > 2 icons: abort"
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			If(Player Closest To Reticle(Event Player, All Teams).Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons from player and try again (limit reached: 2)"));
				Abort;
			End;
			If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Bolt"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Bolt, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Happy"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Happy, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Moon"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Moon, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Halo"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Halo, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Trashcan"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Trashcan, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Dizzy"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Dizzy, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Radioactive"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Radioactive, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Poison"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Poison 2, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Warning"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Warning, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Stop"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Stop, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Spiral"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Spiral, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Sad"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Sad, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Skull"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Skull, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Recycle"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Recycle, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("No"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), No, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Eye"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Eye, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Else If(Global.Icons_List[Event Player.Icons_Selector] == Custom String("Asterisk"));
				Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
					Event Player, All Teams), Asterisk, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			End;
			Player Closest To Reticle(Event Player, All Teams).Icon_ID = Append To Array(Player Closest To Reticle(Event Player, All Teams)
					.Icon_ID, Last Created Entity);
			Small Message(All Players(All Teams), Custom String("  {0} gave {1} to {2}", Event Player,
				Global.Icons_List_For_Menu[Event Player.Icons_Selector], Player Closest To Reticle(Event Player, All Teams)));
			Wait(0.300, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			"Simple selectors, same as drawing, from 0 to endpoint"
			If(Event Player.Icons_Selector == 16);
				Event Player.Icons_Selector = 0;
			Else;
				Event Player.Icons_Selector += 1;
			End;
			Small Message(Event Player, Custom String("  {0}, {1}", Global.Icons_List_For_Menu[Event Player.Icons_Selector],
					Global.Icons_Colors_List[Event Player.Icons_Colors_Selector]));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Event Player.Icons_Colors_Selector == 14);
				Event Player.Icons_Colors_Selector = 0;
			Else;
				Event Player.Icons_Colors_Selector += 1;
			End;
			Small Message(Event Player, Custom String("  {0}", Global.Icons_Colors_List[Event Player.Icons_Colors_Selector]));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			If(Player Closest To Reticle(Event Player, All Teams).Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons from player and try again (limit reached: 2)"));
				Abort;
			End;
			Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
				Event Player, All Teams), Heart, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Player Closest To Reticle(Event Player, All Teams).Icon_ID = Append To Array(Player Closest To Reticle(Event Player, All Teams)
				.Icon_ID, Last Created Entity);
			Small Message(All Players (All Teams), Custom String("  {0} gave {1} to {2}", Event Player, Icon String(Heart), Player Closest To Reticle(Event Player,
				All Teams)));
			Wait(0.300, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Melee)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			If(Player Closest To Reticle(Event Player, All Teams).Icon_ID[1] != Null);
				Small Message(Event Player, Custom String("  Remove Icons from player and try again (limit reached: 2)"));
				Abort;
			End;
			Create Icon(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || Event Player.Is_Invisible)), Player Closest To Reticle(
				Event Player, All Teams), Fire, Visible To, Global.Icons_Colors_List[Event Player.Icons_Colors_Selector], False);
			Player Closest To Reticle(Event Player, All Teams).Icon_ID = Append To Array(Player Closest To Reticle(Event Player, All Teams)
				.Icon_ID, Last Created Entity);
			Small Message(All Players (All Teams), Custom String("  {0} gave {1} to {2}", Event Player, Icon String(Fire), Player Closest To Reticle(Event Player,
				All Teams)));
			Wait(0.300, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			"Remove first icons from player"
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[0]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[1]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[2]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[3]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[4]);
			Destroy Icon(Player Closest To Reticle(Event Player, All Teams).Icon_ID[5]);
			"Set validator back to default, so you can add two new icons"
			Player Closest To Reticle(Event Player, All Teams).Icon_ID = Empty Array;
			Small Message(Event Player, Custom String("  Icons removed from {0}", Player Closest To Reticle(Event Player, All Teams)));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String("  {0} removed icons from you", Event Player));
			Wait(0.300, Ignore Condition);
		End;
	}
}

rule("Mode_23_24 - Show message with selected Icon")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		((Event Player.Mode_Cycle == 23 || Event Player.Mode_Cycle == 24) ||
		Event Player.Mode_Cycle_Default == 9) == True;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		Small Message(Event Player, Custom String("{0}, {1}", Global.Icons_List_For_Menu[Event Player.Icons_Selector],
			Global.Icons_Colors_List[Event Player.Icons_Colors_Selector]));
	}
}

rule("Mode_25 - Ghost_Mode")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 25;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Ghost_Mode);
			Player Closest To Reticle(Event Player, All Teams).Ghost_Mode = True;
			Disable Movement Collision With Environment(Player Closest To Reticle(Event Player, All Teams), False);
			Disable Movement Collision With Players(Player Closest To Reticle(Event Player, All Teams));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Ghost_Mode == False);
			Player Closest To Reticle(Event Player, All Teams).Ghost_Mode = False;
			Enable Movement Collision With Environment(Player Closest To Reticle(Event Player, All Teams));
			Enable Movement Collision With Players(Player Closest To Reticle(Event Player, All Teams));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Ghost_Mode == False);
				Event Player.Ghost_Mode = True;
				Disable Movement Collision With Environment(Event Player, False);
				Disable Movement Collision With Players(Event Player);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			Else;
				Event Player.Ghost_Mode = False;
				Enable Movement Collision With Environment(Event Player);
				Enable Movement Collision With Players(Event Player);
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Event Player, 1);
			End;
		End;
	}
}

rule("Mode_26 - Slowmotion_&_Slow_Projectile")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 26 || Event Player.Mode_Cycle_Default == 10) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Slow_Projectile);
			Player Closest To Reticle(Event Player, All Teams).Slow_Projectile = True;
			Set Projectile Speed(Player Closest To Reticle(Event Player, All Teams), 1);
			Set Projectile Gravity(Player Closest To Reticle(Event Player, All Teams), 0);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).High_Rank || Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Slow_Projectile == False);
			Player Closest To Reticle(Event Player, All Teams).Slow_Projectile = False;
			Set Projectile Speed(Player Closest To Reticle(Event Player, All Teams), 100);
			Set Projectile Gravity(Player Closest To Reticle(Event Player, All Teams), 100);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Slow_Projectile == False);
				Event Player.Slow_Projectile = True;
				If(Event Player.High_Rank || Event Player.Mod_Rank);
					Set Projectile Speed(Event Player, 1);
				Else;
					Set Projectile Speed(Event Player, 50);
				End;
				Set Projectile Gravity(Event Player, 0);
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
			Else If(Event Player.Slow_Projectile);
				Event Player.Slow_Projectile = False;
				Set Projectile Speed(Event Player, 100);
				Set Projectile Gravity(Event Player, 100);
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Yellow), Event Player, 1);
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Abort If((Event Player.High_Rank || (Event Player == Host Player)) == False);
			If(Global.Slowmotion == False);
				Global.Slowmotion = True;
				Set Slow Motion(10);
				Big Message(All Players(All Teams), Custom String("Time Flows So Slowly"));
			Else;
				Global.Slowmotion = False;
				Set Slow Motion(100);
				Big Message(All Players(All Teams), Custom String("Back In The Flow Of Time"));
			End;
		End;
	}
}

rule("Mode_27 - Mute")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 27;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Restricted[0]);
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))));
			Abort If(Player Closest To Reticle(Event Player, All Teams).UNO_Ingame);
			Abort If(Player Closest To Reticle(Event Player, All Teams) == Host Player && Event Player.Mod_Rank);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Mod_Rank && Event Player.Mod_Rank &&
				Not(Player Closest To Reticle(Event Player, All Teams).Promoted_Rank));
			Abort If(Is Dummy Bot(Player Closest To Reticle(Event Player, All Teams)));
			Player Closest To Reticle(Event Player, All Teams).Restricted[0] = True;
			Player Closest To Reticle(Event Player, All Teams).Restricted[1] = True;
			If(Player Closest To Reticle(Event Player, All Teams).Protection);
				Clear Status(Player Closest To Reticle(Event Player, All Teams), Phased Out);
			End;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
			Create Effect(All Players(All Teams), Sphere, Color(Black), Position Of(Player Closest To Reticle(Event Player, All Teams)),
				3.500, Visible To);
			
			Global.Jail_List[0] = Append To Array(Global.Jail_List[0], Custom String("{0}", Player Closest To Reticle(Event Player, All Teams)));
			Global.Jail_List[1] = Append To Array(Global.Jail_List[1], Last Created Entity);
			Global.Jail_List[2] = Append To Array(Global.Jail_List[2], Position Of(Player Closest To Reticle(Event Player, All Teams)));
			Global.Jail_List[3] = Append To Array(Global.Jail_List[3], True);
			"Disable text and voice chats"
			Disable Text Chat(Player Closest To Reticle(Event Player, All Teams));
			Disable Voice Chat(Player Closest To Reticle(Event Player, All Teams), True, True, True);
			"Disable all skills and meele"
			Set Ability 1 Enabled(Player Closest To Reticle(Event Player, All Teams), False);
			Set Ability 2 Enabled(Player Closest To Reticle(Event Player, All Teams), False);

			Set Melee Enabled(Player Closest To Reticle(Event Player, All Teams), False);
			Set Primary Fire Enabled(Player Closest To Reticle(Event Player, All Teams), False);
			Set Secondary Fire Enabled(Player Closest To Reticle(Event Player, All Teams), False);
			Set Ultimate Ability Enabled(Player Closest To Reticle(Event Player, All Teams), False);
			Player Closest To Reticle(Event Player, All Teams).Last_Position_Facing[0] = Position Of(Player Closest To Reticle(Event Player,
				All Teams));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Abort If(Player Closest To Reticle(Event Player, All Teams).Restricted[0] == False);
			Abort If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))));
			Abort If(Player Closest To Reticle(Event Player, All Teams) == Host Player && Event Player.Mod_Rank);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Mod_Rank && Event Player.Mod_Rank &&
				Not(Player Closest To Reticle(Event Player, All Teams).Promoted_Rank));
			Player Closest To Reticle(Event Player, All Teams).Restricted[0] = False;
			Player Closest To Reticle(Event Player, All Teams).Restricted[1] = False;
			If(Player Closest To Reticle(Event Player, All Teams).Protection);
				Set Status(Player Closest To Reticle(Event Player, All Teams), Null, Phased Out, 9999);
			End;
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
			
			Event Player.Index_Help = Index Of Array Value(Global.Jail_List[0], Custom String("{0}", Player Closest To Reticle(Event Player, All Teams)));
			Destroy Effect(Global.Jail_List[1][Event Player.Index_Help]);
			Global.Jail_List[0] = Filtered Array(Global.Jail_List[0], Current Array Index != Event Player.Index_Help);
			Global.Jail_List[1] = Filtered Array(Global.Jail_List[1], Current Array Index != Event Player.Index_Help);
			Global.Jail_List[2] = Filtered Array(Global.Jail_List[2], Current Array Index != Event Player.Index_Help);
			Global.Jail_List[3] = Filtered Array(Global.Jail_List[3], Current Array Index != Event Player.Index_Help);

			"Enable text and voice chats"
			Enable Text Chat(Player Closest To Reticle(Event Player, All Teams));
			Enable Voice Chat(Player Closest To Reticle(Event Player, All Teams));
			"Enable skills and meele"
			Set Ability 1 Enabled(Player Closest To Reticle(Event Player, All Teams), True);
			Set Ability 2 Enabled(Player Closest To Reticle(Event Player, All Teams), True);
			Set Melee Enabled(Player Closest To Reticle(Event Player, All Teams), True);
			Set Primary Fire Enabled(Player Closest To Reticle(Event Player, All Teams), True);
			Set Secondary Fire Enabled(Player Closest To Reticle(Event Player, All Teams), True);
			Set Ultimate Ability Enabled(Player Closest To Reticle(Event Player, All Teams), True);
			Player Closest To Reticle(Event Player, All Teams).Last_Position_Facing[0] = Null;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Event Player.Restricted[0] == False);
				Event Player.Restricted[0] = True;
				Event Player.Restricted[1] = False;
				If(Event Player.Protection);
					Clear Status(Event Player, Phased Out);
				End;
				Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player, 1);
				Create Effect(All Players(All Teams), Sphere, Color(Black), Position Of(Event Player), 3.500, Visible To);
				
				Global.Jail_List[0] = Append To Array(Global.Jail_List[0], Custom String("{0}", Event Player));
				Global.Jail_List[1] = Append To Array(Global.Jail_List[1], Last Created Entity);
				Global.Jail_List[2] = Append To Array(Global.Jail_List[2], Position Of(Event Player));
				Global.Jail_List[3] = Append To Array(Global.Jail_List[3], False);
				
				Disable Text Chat(Event Player);
				Disable Voice Chat(Event Player, True, True, True);
				Set Ability 1 Enabled(Event Player, False);
				Set Ability 2 Enabled(Event Player, False);
				Set Melee Enabled(Event Player, False);
				Set Primary Fire Enabled(Event Player, False);
				Set Secondary Fire Enabled(Event Player, False);
				Set Ultimate Ability Enabled(Event Player, False);
				Event Player.Last_Position_Facing[0] = Position Of(Event Player);
			Else;
				If(Event Player.Restricted[1]);
					Small Message(Event Player, Custom String("  Cannot unlock yourself - jailed by somebody else!"));
					Abort;
				End;
				Event Player.Restricted[0] = False;
				Event Player.Restricted[1] = False;
				If(Event Player.Protection);
					Set Status(Event Player, Null, Phased Out, 9999);
				End;
				Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
				
				Event Player.Index_Help = Index Of Array Value(Global.Jail_List[0], Custom String("{0}", Event Player));
				Destroy Effect(Global.Jail_List[1][Event Player.Index_Help]);
				Global.Jail_List[0] = Filtered Array(Global.Jail_List[0], Current Array Index != Event Player.Index_Help);
				Global.Jail_List[1] = Filtered Array(Global.Jail_List[1], Current Array Index != Event Player.Index_Help);
				Global.Jail_List[2] = Filtered Array(Global.Jail_List[2], Current Array Index != Event Player.Index_Help);
				Global.Jail_List[3] = Filtered Array(Global.Jail_List[3], Current Array Index != Event Player.Index_Help);

				Enable Text Chat(Event Player);
				Enable Voice Chat(Event Player);
				Set Ability 1 Enabled(Event Player, True);
				Set Ability 2 Enabled(Event Player, True);
				Set Melee Enabled(Event Player, True);
				Set Primary Fire Enabled(Event Player, True);
				Set Secondary Fire Enabled(Event Player, True);
				Set Ultimate Ability Enabled(Event Player, True);
				Event Player.Last_Position_Facing[0] = Null;
			End;
		End;
	}
}

rule("Mode_27 - Cage")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Restricted[0] == True;
		Distance Between(Event Player, Event Player.Last_Position_Facing[0]) > 3;
		Is Alive(Event Player) == True;
	}

	actions
	{
		While(Distance Between(Event Player, Event Player.Last_Position_Facing[0]) > 3);
			Apply Impulse(Event Player, Direction Towards(Event Player, Event Player.Last_Position_Facing[0]), 20, To World,
				Cancel Contrary Motion);
			Wait(0.100, Ignore Condition);
			If(Distance Between(Event Player, Event Player.Last_Position_Facing[0]) > 4);
				Cancel Primary Action(Event Player);
				Teleport(Event Player, Event Player.Last_Position_Facing[0]);
			End;
		End;
	}
}

rule("Mode_27 - Jail_List_Update")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Wait(5, Ignore Condition);
		For Global Variable(Jail_Helper, 0, Count Of (Global.Jail_List[0]), 1);
			If(Array Contains(Mapped Array(All Players(All Teams),Custom String("{0}",Current Array Element)), Global.Jail_List[0][Global.Jail_Helper]) == False);
				Destroy Effect(Global.Jail_List[1][Global.Jail_Helper]);
			End;
		End;
		Loop;
	}
}

rule ("Subroutine: Jail_Leaver")
{
    event 
	{
		Subroutine;
		Jail_Leaver;
    }
	actions
	{
		Event Player.Index_Help = Index Of Array Value(Global.Jail_List[0], Custom String("{0}", Event Player));
		
		Wait(0.020, Ignore Condition);
		Teleport(Event Player, Global.Jail_List[2][Event Player.Index_Help]);
		Wait(0.020, Ignore Condition);
		
		Global.Jail_List[0] = Filtered Array(Global.Jail_List[0], Current Array Index != Event Player.Index_Help);
		Global.Jail_List[1] = Filtered Array(Global.Jail_List[1], Current Array Index != Event Player.Index_Help);
		Global.Jail_List[2] = Filtered Array(Global.Jail_List[2], Current Array Index != Event Player.Index_Help);
		Global.Jail_List[3] = Filtered Array(Global.Jail_List[3], Current Array Index != Event Player.Index_Help);
				
		If(Event Player.Protection);
			Clear Status(Event Player, Phased Out);
		End;
		Create Effect(All Players(All Teams), Sphere, Color(Black), Position Of(Event Player),
			3.500, Visible To);
				
		Global.Jail_List[0] = Append To Array(Global.Jail_List[0], Custom String("{0}", Event Player));
		Global.Jail_List[1] = Append To Array(Global.Jail_List[1], Last Created Entity);
		Global.Jail_List[2] = Append To Array(Global.Jail_List[2], Position Of(Event Player));
		Global.Jail_List[3] = Append To Array(Global.Jail_List[3], Event Player.Restricted[1]);

		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);

		Set Melee Enabled(Event Player, False);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ultimate Ability Enabled(Event Player, False);
		Event Player.Last_Position_Facing[0] = Position Of(Event Player);
	}
}

rule("Mode_28 - Kick_&_Ban")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 28;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Abort If((Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == False);
		"Permission Check"
		Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Event Player.Target_Lock == Null);
		Abort If(Not(Event Player.High_Rank || Event Player == Host Player));
		If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Lock)) || (Event Player.High_Rank && Not(Event Player.Heaven_Strike_ID[2]) && Event Player != Host Player) ||
			(Event Player == Host Player && Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player.Target_Lock)) && Event Player.Promoted_Rank && 
			Not(Event Player.Target_Lock.Promoted_Rank)));
			Small Message(Event Player, Custom String("   You lack authorization to kick/ban this target."));
			Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String("{0} {1} - tried to kick/ban you {0}", Icon String(Exclamation Mark), Event Player));
			Abort;
		End;
		"Authorization Accepted"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.Target_Lock, 1);
			Small Message(All Players(All Teams), Custom String("{0} is kicked by {1}", Event Player.Target_Lock, Event Player));
			Wait(0.5, Ignore Condition);
			Remove Player(Event Player.Target_Lock);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
			Small Message(All Players(All Teams), Custom String("{0} is banned by {1}", Event Player.Target_Lock, Event Player));
			Modify Global Variable(Temp_Banned, Append To Array, Custom String("{0}", Event Player.Target_Lock));
		End;
		Wait(1, Ignore Condition);
		Event Player.Target_Lock = Custom String("--- No Target ---");
	}
}

rule("Mode_29 - Promote/Demote_And_Teamswap")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 29 || Event Player.Mode_Cycle_Default == 11) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Discuss that highrank can demote auto-angel, Check for bugs, check abusive teamswap"
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If(Not(Event Player.High_Rank || (Event Player == Host Player) || (Event Player.Mod_Rank && 
				Not(Event Player.Promoted_Rank))));
				Small Message(Event Player, Custom String("  Available only to Host or Angels."));
				Abort;
			End;
			If(Array Contains(Global.Demoted, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))));
				Small Message(Event Player, Custom String("  Can't promote {0}, please contact team for support.", 
					Player Closest To Reticle(Event Player, All Teams))); 
				Abort;
			End;
			Abort If(Player Closest To Reticle(Event Player, All Teams).UNO_Ingame);
			If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))) ||
				(Array Contains(Global.Mod_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))) &&
				Not(Player Closest To Reticle(Event Player, All Teams).Promoted_Rank) && Not(Event Player.Heaven_Strike_ID[2])) ||
				((Player Closest To Reticle(Event Player, All Teams) == Host Player) && Not(Event Player.Heaven_Strike_ID[2])) ||
				Player Closest To Reticle(Event Player, All Teams).Promoted_Rank);
				Small Message(Event Player, Custom String("  {0} is already promoted.", Player Closest To Reticle(Event Player, All Teams)));
				Abort;
			End;
			Player Closest To Reticle(Event Player, All Teams).Promoted_Rank = True;
			Modify Global Variable(Promoted_List, Append To Array, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams)));
			Modify Global Variable(Mod_Rank, Append To Array, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams)));
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Not(Event Player.High_Rank || (Event Player == Host Player) || (Event Player.Mod_Rank && 
				Not(Event Player.Promoted_Rank))));
				Small Message(Event Player, Custom String("  Available only to Host or Angels."));
				Abort;
			End;
			Abort If(Player Closest To Reticle(Event Player, All Teams).UNO_Ingame);
			If(Array Contains(Global.High_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))) ||
				(Array Contains(Global.Mod_Rank, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams))) &&
				Not(Player Closest To Reticle(Event Player, All Teams).Promoted_Rank) && Not(Event Player.Heaven_Strike_ID[2])) ||
				((Player Closest To Reticle(Event Player, All Teams) == Host Player) && Not(Event Player.Heaven_Strike_ID[2])));
				Small Message(Event Player, Custom String("  Cannot demote {0}.", Player Closest To Reticle(Event Player, All Teams)));
				Small Message(Player Closest To Reticle(Event Player, All Teams), Custom String(" Note: {0} tried to demote you.", Event Player));
				Abort;
			End;
			Player Closest To Reticle(Event Player, All Teams).Promoted_Rank = False;
			Modify Global Variable(Promoted_List, Remove From Array By Value, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams)));
			Modify Global Variable(Mod_Rank, Remove From Array By Value, Custom String("{0}", Player Closest To Reticle(Event Player, All Teams)));
			Destroy In-World Text(Player Closest To Reticle(Event Player, All Teams).Protection_ID);
			Create In-World Text(Filtered Array(All Players(All Teams), !(Current Array Element.Is_Crouch_On || 
				Evaluate Once(Player Closest To Reticle(Event Player, All Teams)).Is_Invisible)), 
				Custom String("{0}\r\n\r\n", Ability Icon String(Hero(Baptiste), Button(Ability 2))),
				Evaluate Once(Player Closest To Reticle(Event Player, All Teams)), 0.8, Clip Against Surfaces, Visible To and Position, Color(Blue), Default Visibility);
			Player Closest To Reticle(Event Player, All Teams).Protection_ID = Last Text ID;
			Player Closest To Reticle(Event Player, All Teams).Full_Protection = False;
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Player Closest To Reticle(Event Player, All Teams), 1);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Team Of(Event Player) == Team 1);
				If(Number of Players(Team 2) <= 5);
					Move Player to Team(Event Player, Host Player, -1);
					Wait(0.250, Ignore Condition);
					Move Player to Team(Event Player, Team 2, -1);
				Else;
					Small Message(Event Player, Custom String("  Other team is full!"));
					Abort;
				End;
			Else If(Team Of(Event Player) == Team 2);
				If(Number of Players(Team 1) <= 5);
					Move Player to Team(Event Player, Host Player, -1);
					Wait(0.250, Ignore Condition);
					Move Player to Team(Event Player, Team 1, -1);
				Else;
					Small Message(Event Player, Custom String("  Other team is full!"));
					Abort;
				End;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Event Player.Target_Lock = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Target_Lock == Null);
			If(Not(Event Player.High_Rank || (Event Player == Host Player) || (Event Player.Mod_Rank && 
				Not(Event Player.Promoted_Rank))));
				Small Message(Event Player, Custom String("  Available only to Host or Angels."));
				Abort;
			End;
			Abort If(Event Player.Target_Lock.UNO_Ingame);
			If(Array Contains(Global.High_Rank, Custom String("{0}", Event Player.Target_Lock)) ||
				(Array Contains(Global.Mod_Rank, Custom String("{0}", Event Player.Target_Lock)) &&
				Not(Event Player.Target_Lock.Promoted_Rank) && Not(Event Player.Heaven_Strike_ID[2])) ||
				((Event Player.Target_Lock == Host Player) && Not(Event Player.Heaven_Strike_ID[2])));
				Small Message(Event Player, Custom String("  Cannot Switch Team of {0}.", Event Player.Target_Lock));
				Abort;
			End;
			If(Team Of(Event Player.Target_Lock) == Team 1);
				If(Number of Players(Team 2) <= 5);
					Move Player to Team(Event Player.Target_Lock, Host Player, -1);
					Wait(0.250, Ignore Condition);
					Move Player to Team(Event Player.Target_Lock, Team 2, -1);
				Else;
					Small Message(Event Player, Custom String("  Other team is full!"));
				End;
			Else If(Team Of(Event Player.Target_Lock) == Team 2);
				If(Number of Players(Team 1) <= 5);
					Move Player to Team(Event Player.Target_Lock, Host Player, -1);
					Wait(0.250, Ignore Condition);
					Move Player to Team(Event Player.Target_Lock, Team 1, -1);
				Else;
					Small Message(Event Player, Custom String("  Other team is full!"));
				End;
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Move Player to Team(Event Player, Host Player, -1);
		End;
		Event Player.Target_Lock = Custom String("--- No Target ---");
	}
}


rule("Mode_30 - Match_Time")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 30;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: If needed readjust permissions"
		Abort If(Event Player.Promoted_Rank && (Event Player != Host Player));
		If(Is Button Held(Event Player, Button(Primary Fire)));
			If((Total Time Elapsed + Match Time + If-Then-Else(Match Time >= 3300, 3600 - Match Time, 300)) >= 5400);
				Set Match Time(5400 - Total Time Elapsed);
				Big Message(All Players(All Teams), Custom String("{0} extended Remaining Time to maximum", Event Player));
				Small Message(Event Player, Custom String("  Cannot extend time further!"));
			Else;
				If((Match Time + 300) >= 3600);
					Set Match Time(3600);
					Small Message(All Players(All Teams), Custom String("  {0} set match time to 60 min", Event Player));
				Else;
					Set Match Time(Match Time + 300);
					Small Message(All Players(All Teams), Custom String("  {0} added 5 min to match time", Event Player));
				End;
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If((Total Time Elapsed + Match Time + If-Then-Else(Match Time >= 1800, 3600 - Match Time, 1800)) >= 5400);
				Set Match Time(5400 - Total Time Elapsed);
				Big Message(All Players(All Teams), Custom String("{0} extened Remaining Time to maximum", Event Player));
				Small Message(Event Player, Custom String("  Cannot extend time further!"));
			Else;
				If((Match Time + 1800) >= 3600);
					Set Match Time(3600);
					Small Message(All Players(All Teams), Custom String("  {0} set match time to 60 min", Event Player));
				Else;
					Set Match Time(Match Time + 1800);
					Small Message(All Players(All Teams), Custom String("  {0} added 30 min to match time", Event Player));
				End;
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			If(Total Time Elapsed >= 5390);
				Small Message(Event Player, Custom String("  Cannot extend time further!"));
				Abort;
			End;
			Set Match Time(10);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Declare Match Draw;
			Wait(27, Ignore Condition);
			Restart Match;
		End;
	}
}

rule("Mode_31 - Special_Camera")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 31 || Event Player.Mode_Cycle_Default == 12) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Not(Is Button Held(Event Player, Button(Melee))));
			Destroy Effect(Event Player.Camera_Info_Array[5]);
			Destroy In-World Text(Event Player.Camera_Info_Array[4]);
			Event Player.Camera_Info_Array[0] = False;
			Event Player.Camera_Info_Array[1] = False;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Wait Until(Not(Is Button Held(Event Player, Button(Primary Fire))), 1);
			If(Is Button Held(Event Player, Button(Primary Fire)));
				Event Player.Camera_Position = Eye Position(Event Player) + Vector(0,0.5,0);
			Else;
				Event Player.Camera_Position = Subtract(Ray Cast Hit Position(Eye Position(Event Player), 
					Eye Position(Event Player) + 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
					Null, Event Player, True),  Multiply(Vector(0.3, 0.3, 0.3), Event Player.Scale_Real * Facing Direction Of(Event Player)));
			End;
			Start Camera(Event Player, Event Player.Camera_Position, Update Every Frame(Eye Position(Event Player)), 200);
			
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String("Cam following {0}\r\n", Event Player),Event Player.Camera_Position, 0.1, 
				Clip Against Surfaces, Visible To, Color(White), Visible Never);
			Event Player.Camera_Info_Array[4] = Last Text ID;

			Create Effect(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Sphere, Color(White), 
				Event Player.Camera_Position, 0.1, Position and Radius);
			Event Player.Camera_Info_Array[5] = Last Created Entity;
			
			Event Player.Camera = 5;
			Small Message(Event Player, Custom String("  Camera: Look at player, no LOS"));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Wait Until(Not(Is Button Held(Event Player, Button(Secondary Fire))), 1);
			If(Is Button Held(Event Player, Button(Secondary Fire)));
				Event Player.Camera_Position = Eye Position(Event Player) + Vector(0,0.5,0);
			Else;
				Event Player.Camera_Position = Subtract(Ray Cast Hit Position(Eye Position(Event Player), 
					Eye Position(Event Player) + 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
					Null, Event Player, True),  Multiply(Vector(0.3, 0.3, 0.3), Event Player.Scale_Real * Facing Direction Of(Event Player)));
			End;
			
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String("Cam with LOS check of {0}\r\n", Event Player), Event Player.Camera_Position, 0.1, 
				Clip Against Surfaces, Visible To, Color(White), Visible Never);
			Event Player.Camera_Info_Array[4] = Last Text ID;

			Create Effect(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Sphere, Color(White), 
				Event Player.Camera_Position, 0.1, Position and Radius);
			Event Player.Camera_Info_Array[5] = Last Created Entity;
			
			Event Player.Camera = 6;
			Small Message(Event Player, Custom String("  Camera: Look at player, with LOS"));
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
				Eye Position(Event Player) + -1 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
				Null, Event Player, True)), Update Every Frame(Eye Position(Event Player) + 10 * Event Player.Scale_Real * Facing Direction Of(Event Player)), 200);
			Wait(0.1, Ignore Condition);
			Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
				Eye Position(Event Player) + -1 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
				Null, Event Player, True)), Update Every Frame(Eye Position(Event Player) + 2 * Event Player.Scale_Real * Facing Direction Of(Event Player)), 0.5);
			
			Event Player.Camera = 7;
			Small Message(Event Player, Custom String(" Camera: Cinematic"));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Wait Until(Not(Is Button Held(Event Player, Button(Ultimate))), 1);
			If(Is Button Held(Event Player, Button(Ultimate)));
				Event Player.Camera_Position = Eye Position(Event Player) + 0.05 * Facing Direction Of(Event Player) * -1 + Vector(0,0.5,0);
				Event Player.Camera_Info_Array[6] = Eye Position(Event Player) + Vector(0,0.5,0);
			Else;
				Event Player.Camera_Position = Subtract(Ray Cast Hit Position(Eye Position(Event Player), 
					Eye Position(Event Player) + 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
					Null, Event Player, True),  Multiply(Vector(0.3, 0.3, 0.3), Event Player.Scale_Real * Facing Direction Of(Event Player)));
				Event Player.Camera_Info_Array[6] = Eye Position(Event Player);
			End;
			Start Camera(Event Player, Event Player.Camera_Position, Event Player.Camera_Info_Array[6], 200);
			
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String("Static Cam of {0}\r\n", Event Player), Event Player.Camera_Position, 0.1, 
				Clip Against Surfaces, Visible To, Color(White), Visible Never);
			Event Player.Camera_Info_Array[4] = Last Text ID;

			Create Effect(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Sphere, Color(White), 
				Event Player.Camera_Position, 0.1, Position and Radius);
			Event Player.Camera_Info_Array[5] = Last Created Entity;
			
			Event Player.Camera_Info_Array[4] = Last Text ID;
			Event Player.Camera = 8;
			Small Message(Event Player, Custom String("  Camera: Static"));
		Else If(Is Button Held(Event Player, Button(Reload)));
			Start Camera(Event Player, Subtract(Ray Cast Hit Position(Eye Position(Event Player), 
				World Vector Of(Vector(0,15,0), Event Player, Rotation And Translation), 
				Null, Event Player, True), Multiply(Vector(0.3, 0.3, 0.3), Direction Towards 
				(Eye Position(Event Player),World Vector Of(Vector(0,15,0), Event Player, Rotation And Translation)))), Update Every Frame(Eye Position(Event Player)), 200);
			
			Event Player.Camera = 9;
			Small Message(Event Player, Custom String("  Camera: Top-Down"));
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			Abort If(Player Closest To Reticle(Event Player, All Teams).Full_Protection);
			Event Player.Camera_Info_Array[3] = Player Closest To Reticle(Event Player, All Teams);
			Abort If(Event Player.Camera_Info_Array[3] == Null || Not(Has Spawned(Event Player.Camera_Info_Array[3])));
			Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player.Camera_Info_Array[3]), 
				Eye Position(Event Player.Camera_Info_Array[3]) + -3 * Event Player.Camera_Info_Array[3].Scale_Real * Facing Direction Of(Event Player), 
				Null, Event Player.Camera_Info_Array[3], True)), Update Every Frame(Eye Position(Event Player.Camera_Info_Array[3]) + 
				10 * Event Player.Camera_Info_Array[3].Scale_Real * Facing Direction Of(Event Player)), 200);
			
			Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String("Camera of {0}", Event Player),
				Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player.Camera_Info_Array[3]), 
				Eye Position(Event Player.Camera_Info_Array[3]) + -3 * Event Player.Camera_Info_Array[3].Scale_Real * Facing Direction Of(Event Player), 
				Null, Event Player.Camera_Info_Array[3], True)), 0.1, Clip Against Surfaces, Visible To and Position, Color(White), Visible Never);
			Event Player.Camera_Info_Array[4] = Last Text ID;

			Event Player.Camera = 10;
			Small Message(Event Player, Custom String("  Camera: Follow {0}" , Player Closest To Reticle(Event Player, All Teams)));
		Else If(Is Button Held(Event Player, Button(Melee)));
			Abort If((Event Player.High_Rank || Event Player.Mod_Rank) == False);
			If(Not(Event Player.Camera_Info_Array[1]));
				Destroy Effect(Event Player.Camera_Info_Array[5]);
				Destroy In-World Text(Event Player.Camera_Info_Array[4]);
				
				Wait Until(Not(Is Button Held(Event Player, Button(Melee))), 1);
				If(Is Button Held(Event Player, Button(Melee)));
					Event Player.Camera_Position = Eye Position(Event Player) + 0.05 * Facing Direction Of(Event Player) * -1;
				Else;
					Event Player.Camera_Position = Subtract(Ray Cast Hit Position(Eye Position(Event Player), 
						Eye Position(Event Player) + 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
						Null, Event Player, True),  Multiply(Vector(0.3, 0.3, 0.3), Event Player.Scale_Real * Facing Direction Of(Event Player)));
				End;
			
				Event Player.Camera_Target = Custom String("Currently No Target");
				Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player || Current Array Element.Camera_Info_Array[0] == False), 
					Custom String("Security Cam of {0}\r\n{1}\r\n", Event Player, Event Player.Camera_Target), Event Player.Camera_Position, 0.1, 
					Clip Against Surfaces, Visible To and String, Color(White), Visible Never);
				Event Player.Camera_Info_Array[4] = Last Text ID;

				Create Effect(Filtered Array(All Players(All Teams), Current Array Element != Event Player || Current Array Element.Camera_Info_Array[0] == False), Sphere, Color(White), 
					Event Player.Camera_Position, 0.1, Position and Radius);
				Event Player.Camera_Info_Array[5] = Last Created Entity;

				Event Player.Camera_Helper = Null;
				Event Player.Camera_Info_Array[6] = Eye Position(Event Player);

				Event Player.Camera = 11;

				Event Player.Camera_Info_Array[0] = False;
				Event Player.Camera_Info_Array[1] = True;

				Small Message(Event Player, Custom String("  Security Camera placed!"));
			Else;
				If(Event Player.Camera_Info_Array[0]);
					Event Player.Camera_Target = Custom String("Currently No Target");
					Event Player.Camera_Info_Array[0] = False;
					Event Player.Camera = 0;
				Else;
					Event Player.Camera_Helper = Null;
					Event Player.Camera_Info_Array[0] = True;
					Small Message(Event Player, Custom String("  Camera: Security"));
					Event Player.Camera = 11;
				End;
			End;
		End;
		Destroy Effect(Event Player.Camera_Info_Array[2]);
	}
}

rule("Mode_31 - Cam_Preview_On")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 31 || Event Player.Mode_Cycle_Default == 12) == True;
		Event Player.Camera <= 4;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		Create Effect(Event Player, Sphere, Color(White), Update Every Frame(Subtract(Ray Cast Hit Position(Eye Position(Event Player), 
			Eye Position(Event Player) + 20 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
			Null, Event Player, True), Multiply(Vector(0.3, 0.3, 0.3), Event Player.Scale_Real * Facing Direction Of(Event Player)))), 0.1, Position and Radius);
		Event Player.Camera_Info_Array[2] = Last Created Entity;
	}
}

rule("Mode_31 - Cam_Preview_Off")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle != 31;
		Event Player.Mode_Cycle_Default != 12;
		Event Player.Is_Menu_Active == True;
	}

	actions
	{
		Destroy Effect(Event Player.Camera_Info_Array[2]);
	}
}


rule("Mode_31 - Cam_LOS_True")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 6;
		Is In Line of Sight(Event Player.Camera_Position, Eye Position(Event Player), Barriers Do Not Block LOS) == True;
	}

	actions
	{
		Event Player.Camera_Smooth = 0.1;
		Start Camera(Event Player, Event Player.Camera_Position, Update Every Frame(Eye Position(Event Player)), Event Player.Camera_Smooth);
	}
}

rule("Mode_31 - Cam_LOS_False")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 6;
		Is In Line of Sight(Event Player.Camera_Position, Eye Position(Event Player), Barriers Do Not Block LOS) == False;
	}

	actions
	{
		Event Player.Camera_Smooth = 0.1;
		Start Camera(Event Player, Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), 
			Eye Position(Event Player) + -1 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
			Null, Event Player, True)), Update Every Frame(Eye Position(Event Player) + 10 * Facing Direction Of(Event Player)), Event Player.Camera_Smooth);
	}
}

rule("Mode_31 - Security_LOS_True")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 11;
		Event Player.Camera_Info_Array[0] == True;
		Is True For Any(Filtered Array(All Living Players(All Teams), Has Spawned(Current Array Element)), 
			Is In Line of Sight(Event Player.Camera_Position, Current Array Element, Barriers Do Not Block LOS)) == True;
	}

	actions
	{
		Event Player.Camera_LOS = Empty Array;
		For Player Variable(Event Player, Camera_Loop, 0, Count Of(Filtered Array(All Living Players(All Teams), Has Spawned(Current Array Element))), 1);
			If(Is In Line of Sight(Event Player.Camera_Position, Eye Position(Filtered Array(All Living Players(All Teams), Has Spawned(Current Array Element))[Event Player.Camera_Loop]), 
				Barriers Do Not Block LOS));
				Modify Player Variable(Event Player, Camera_LOS, Append To Array, Filtered Array(All Living Players(All Teams), Has Spawned(Current Array Element))[Event Player.Camera_Loop]);
			End;
		End;
		If(Event Player.Camera_LOS == Empty Array);
			Wait(0.1, Ignore Condition);
			Loop If Condition Is True;
		End;
		If(Event Player.Camera_Helper != Sorted Array(Event Player.Camera_LOS, Distance Between(Event Player.Camera_Position, Eye Position(Current Array Element)))[0]);
			Event Player.Camera_Smooth = 0.1;
			Event Player.Camera_Helper = Sorted Array(Event Player.Camera_LOS, Distance Between(Event Player.Camera_Position, Eye Position(Current Array Element)))[0];
			Event Player.Camera_Target = Custom String("Currently spectating: {0}", Event Player.Camera_Helper);
			Start Camera(Event Player, Event Player.Camera_Position, Update Every Frame(Eye Position(Event Player.Camera_Helper)), Event Player.Camera_Smooth);
		End;
		Wait(0.1, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Mode_31 - Security_LOS_False")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Camera == 11;
		Event Player.Camera_Info_Array[0] == True;
		Is True For Any(Filtered Array(All Living Players(All Teams), Has Spawned(Current Array Element)), 
			Is In Line of Sight(Event Player.Camera_Position, Current Array Element, Barriers Do Not Block LOS)) == False;
	}

	actions
	{
		Event Player.Camera_Helper = Null;
		Event Player.Camera_Target = Custom String("Currently No Target");
		Event Player.Camera_Smooth = 0.1;
		Start Camera(Event Player, Event Player.Camera_Position, Event Player.Camera_Info_Array[6], Event Player.Camera_Smooth);
	}
}

rule("Mode_32 - UNO_Main")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 32 || Event Player.Mode_Cycle_Default == 13) == True;
		Event Player.UNO_Ingame == False;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		"TODO: Ingame interaction with other functions"
		If(Is Button Held(Event Player, Button(Primary Fire)) );
			If(Global.UNO_Started);
				Small Message(Event Player, Custom String("  Game already in progress"));
				Abort;
			End;
			If(Array Contains(Global.UNO_Players, Event Player));
				Small Message(Event Player, Custom String("  Already in queue"));
				Abort;
			Else;
				Modify Global Variable(UNO_Players, Append To Array, Event Player);
				Small Message(All Players(All Teams), Custom String("  {0} has entered UNO queue", Event Player));
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			If(Array Contains(Global.UNO_Players, Event Player));
				Modify Global Variable(UNO_Players, Remove From Array By Value, Event Player);
				Small Message(All Players(ALl Teams), Custom String("  {0} has left UNO queue", Event Player));
			Else;
				Small Message(Event Player, Custom String("  Not in queue"));
				Abort;
			End;
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Wait Until(Is Button Held(Event Player, Button(Ultimate)) == False, 9999);
			If(Count Of(Global.UNO_Players) < 2);
				Small Message(Event Player, Custom String("  Minimum 2 players"));
				Abort;
			End;
			If(Global.UNO_Started);
				Small Message(Event Player, Custom String("  Game already in progress"));
				Abort;
			End;
			If(Not(Array Contains(Global.UNO_Players, Event Player)));
				Small Message(Event Player, Custom String("  Can only start if in queue"));
				Abort;
			End;
			Big Message(All Players(All Teams), Custom String("  UNO Match started!"));
			Global.UNO_Timer = 100;
			Global.UNO_Started = True;
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Global.UNO_Started);
				Small Message(Event Player, Custom String("  Game already in progress"));
				Abort;
			End;
			If(Global.UNO_Inworld[0]);
				Global.UNO_Inworld[0] = False;
				Global.UNO_Inworld[1] = Null;
				Destroy In-World Text(Global.UNO_Inworld[2]);
				Destroy In-World Text(Global.UNO_Inworld[3]);
				Small Message(Event Player, Custom String("  In-World UNO deck removed"));
			Else;
				Global.UNO_Inworld[1] = Add(Ray Cast Hit Position(Eye Position(Event Player), 
					Eye Position(Event Player) + 5 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
					Null, Event Player, True), Vector(0,1,0));
				Create In-World Text(All Players(All Teams), Custom String("UNO"), Global.UNO_Inworld[1], 1.8, 
					Clip Against Surfaces, Visible To String and Color, Global.Rainbow_Color, Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
				Create In-World Text(All Players(All Teams), Custom String("Current player Display\r\nNext Player Display\r\n"), Global.UNO_Inworld[1], 1.2, 
					Clip Against Surfaces, Visible To and String, Color(White), Visible Never);
				Global.UNO_Inworld[3] = Last Text ID;
				Global.UNO_Inworld[0] = True;
				Small Message(Event Player, Custom String("  In-World UNO deck placed"));
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Count Of(Global.UNO_Players) < 1);
				Small Message(Event Player, Custom String("   No Players in queue"));
				Abort;
			End;
			If(Global.UNO_Started);
				Small Message(Event Player, Custom String("  Game in progress. Players:"));
			Else;
				Small Message(Event Player, Custom String("  Players In Queue:"));
			End;
			For Player Variable(Event Player, Print, 0, Count Of(Global.UNO_Players), 1);
				Small Message(Event Player, Custom String("  {0}: {1}", Event Player.Print + 1, Global.UNO_Players[Event Player.Print]));
				Wait(0.1, Ignore Condition);
			End;
		End;
	}
}

rule("UNO_Game_Started")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.UNO_Started == True;
	}

	actions
	{
		For Global Variable(UNO_Looper, 0, Count Of(Global.UNO_Players), 1);

			Destroy Progress Bar HUD Text(Global.UNO_Players[Global.UNO_Looper].Scale_Hud_ID);
			Destroy HUD Text(Global.UNO_Players[Global.UNO_Looper].Mode_Hud_ID);
			Destroy HUD Text(Global.UNO_Players[Global.UNO_Looper].Mode_Description);
			Global.UNO_Players[Global.UNO_Looper].UNO_Hand = Empty Array;
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[1] = 7;
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[3] = False;
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[0] = 0;
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[4] = False;
			Global.UNO_Players[Global.UNO_Looper].Is_Flying = False;
			Global.UNO_Players[Global.UNO_Looper].UNO_Ingame = True;
			If((Global.UNO_Players[Global.UNO_Looper].High_Rank || Global.UNO_Players[Global.UNO_Looper].Mod_Rank));
				Global.UNO_Players[Global.UNO_Looper].Mode_Cycle = 32;
			Else;
				Global.UNO_Players[Global.UNO_Looper].Mode_Cycle_Default = 13;
			End;
			
			Create HUD Text(Evaluate Once(Global.UNO_Players[Global.UNO_Looper]), Null, Custom String("UNO Instructions:"),
				Custom String("Crouch must be held for all inputs.\r\n{0}/{1} : Cycle Cards.\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Play Selected Card.\r\nReload : Draw Card.\r\n{1}",
					Input Binding String(Button(Ultimate)),
				Custom String("{0} : End Turn.\r\nMelee : Hold for 5 sec to leave match.\r\nUNO is called automatically.",
					Input Binding String(Button(Ability 2))
				))), Left, 0, Color(White), Global.Rainbow_Color, Color(White), Visible To and String, Visible Never);
			Set Player Variable(Global.UNO_Players[Global.UNO_Looper], Mode_Description, Last Text ID);
			
		End;
		
		
		Global.UNO_Help = First Of(Global.UNO_Players);
		Global.UNO_Help.UNO_Info_Array[3] = True;

		Destroy HUD Text(Global.UNO_Deck[2]);
		Destroy Progress Bar HUD Text(Global.UNO_Deck[3]);
		If(Global.UNO_Inworld[0]);
			Destroy In-World Text(Global.UNO_Inworld[2]);
			Destroy In-World Text(Global.UNO_Inworld[3]);
			Create In-World Text(All Players(All Teams), Custom String("Current Player: {0}\r\nNext Player: {1}\r\n", 
			Global.UNO_Players[0], Global.UNO_Players[1]), Global.UNO_Inworld[1], 1.2, Clip Against Surfaces, Visible To and String, Color(White), Visible Never);
			Global.UNO_Inworld[3] = Last Text ID;
		End;
		
		Chase Global Variable Over Time(UNO_Timer, 0, 45, None);

		Create Progress Bar HUD Text(Global.UNO_Players, Global.UNO_Timer, 
			Custom String(" \r\nCurrent Player: {0}\r\nNext Player: {1}\r\n",
			Global.UNO_Players[0], Global.UNO_Players[1]), Top, 1, 
			Color(Blue), Color(White), Visible To and Values, Visible Never);
		Global.UNO_Deck[3] = Last Text ID;

		Create HUD Text(Global.UNO_Players, Null, Custom String("UNO Cards:"),
			Custom String("{0} : Next player skipped.\r\n +  : Next player +2 cards/skipped.\r\n{1}", 
				Icon String(No),  
			Custom String("{0} : Reverse Play direction.\r\n{1} : Pick Color.\r\n{2}",
				Icon String(Recycle), Ability Icon String(Hero(Sombra), Button(Ability 2)),
			Custom String("{0} : Pick color. Next player \r\n   +4 cards/skipped.",
				Ability Icon String(Hero(Baptiste), Button(Ability 1))
			))), Right, 5, Color(White), Global.Rainbow_Color, Color(White), Visible To, Visible Never);
		Global.UNO_Info = Last Text ID;
		
		Global.UNO_Deck[0] = Random Integer(1, 4);
		Global.UNO_Deck[1] = Random Integer(0, 9);
		If(Global.UNO_Deck[1] == 0);
			Global.UNO_Deck[1] = Random Integer(0, 9);
		End;

		Call Subroutine(UNO_Update_Deck);
	}
}

rule("UNO_Play")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UNO_Ingame == True;
		Event Player.UNO_Info_Array[6] == False;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.UNO_Info_Array[0] += 1;
			If(Event Player.UNO_Info_Array[0] >= Count Of(Event Player.UNO_Hand));
				Event Player.UNO_Info_Array[0] = 0;
			End;
			For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
				Event Player.UNO_Hand[Event Player.UNO_Loop] = Array(Event Player.UNO_Hand[Event Player.UNO_Loop][0], 
					Event Player.UNO_Hand[Event Player.UNO_Loop][1], Event Player.UNO_Hand[Event Player.UNO_Loop][2], Custom String(""));
			End;
			Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]] = Array(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0], 
				Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1], Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][2], Custom String("{0}", Icon String(Arrow: Left)));
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Event Player.UNO_Info_Array[0] -= 1;
			If(Event Player.UNO_Info_Array[0] <= -1);
				Event Player.UNO_Info_Array[0] = Count Of(Event Player.UNO_Hand) - 1;
			End;
			For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
				Event Player.UNO_Hand[Event Player.UNO_Loop] = Array(Event Player.UNO_Hand[Event Player.UNO_Loop][0], 
					Event Player.UNO_Hand[Event Player.UNO_Loop][1], Event Player.UNO_Hand[Event Player.UNO_Loop][2], Custom String(""));
			End;
			Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]] = Array(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0], 
				Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1], Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][2], Custom String("{0}", Icon String(Arrow: Left)));
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Wait Until(Not(Is Button Held(Event Player, Button(Ultimate))) , 9999);
			If(Not(Event Player.UNO_Info_Array[3]));
				Small Message(Event Player, Custom String("  It's not your turn yet."));
				Abort;
			End;
			
			If(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0] == 0);
				If(Count Of (Event Player.UNO_Hand) == 1);
					Big Message(All Players(All Teams), Custom String("{0} has won in UNO!", Event Player));
					Call Subroutine(UNO_End);
					Abort;
				End;
				
				Event Player.UNO_Info_Array[2] = 1;
				Create HUD Text(Event Player, Custom String("   {0}   ", Global.UNO_Colorblind[Event Player.UNO_Info_Array[2]]), Null, 
					Custom String("{0} : Cycle Color\r\n{1} : Select\r\n{2} : Abort", 
						Input Binding String(Button(Ultimate)), Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire))
					), Top, 3, Global.Card_Colors[Event Player.UNO_Info_Array[2]], Color(White), Color(White), String and Color, Visible Never);
				Event Player.UNO_Info_Array[7] = Last Text ID;
				
				Event Player.UNO_Info_Array[6] = True;

			Else If((Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0] == Global.UNO_Deck[0]) || (Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1] == Global.UNO_Deck[1]));
				Global.UNO_Deck[0] = Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][0];
				Global.UNO_Deck[1] = Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1];
				Call Subroutine(UNO_Update_Deck);

				Destroy HUD Text(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][2]);
				Modify Player Variable(Event Player, UNO_Hand, Remove From Array By Index, Event Player.UNO_Info_Array[0]);

				If(Event Player.UNO_Hand == Empty Array);
					Big Message(All Players(All Teams), Custom String("{0} has won in UNO!", Event Player));
					Call Subroutine(UNO_End);
					Abort;
				End;
				
				If(Count Of (Event Player.UNO_Hand) == 1);
					Big Message(Global.UNO_Players, Custom String("{0}: UNO!", Event Player));
				End;
				
				Event Player.UNO_Info_Array[3] = False;
				Event Player.UNO_Info_Array[4] = False;

				Call Subroutine(UNO_Update_Hand);
				
				If((Global.UNO_Deck[1] == 10) || (Global.UNO_Deck[1] == 12));
					
					Global.UNO_Help = First Of(Global.UNO_Players);
					Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
					Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);

					If(Global.UNO_Deck[1] == 12);
						
						Global.UNO_Help = First Of(Global.UNO_Players);
						Global.UNO_Help.UNO_Info_Array[1] = 2;
						Small Message(Global.UNO_Players, Custom String("  {0} gave +2 to {1}", Event Player, Global.UNO_Players[1]));
					Else;
						
						Small Message(Global.UNO_Players, Custom String("  {0} skipped {1}", Event Player, Global.UNO_Players[1]));
					End;
					
					Global.UNO_Help = First Of(Global.UNO_Players);
					Play Effect(Global.UNO_Help, Explosion Sound, Null, Global.UNO_Help, 30);

					Global.UNO_Help = First Of(Global.UNO_Players);
					Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
					Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				Else If(Global.UNO_Deck[1] == 11);
					If(Count Of(Global.UNO_Players) == 2);
						
						Global.UNO_Help = Last Of(Global.UNO_Players);
						Play Effect(Global.UNO_Help, Explosion Sound, Null, Global.UNO_Help, 30);
					Else;
						Global.UNO_Players = Sorted Array(Global.UNO_Players, Current Array Index * -1);
					End;
					Small Message(Global.UNO_Players, Custom String("  {0} reversed direction", Event Player));
				Else;
					
					Global.UNO_Help = First Of(Global.UNO_Players);
					Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
					Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				End;
				
				Global.UNO_Help = First Of(Global.UNO_Players);
				Global.UNO_Help.UNO_Info_Array[3] = True;
				Play Effect(Global.UNO_Help, Buff Impact Sound, Null, Global.UNO_Help, 20);
				Global.UNO_Timer = 100;
			Else;
				Small Message(Event Player, Custom String("  Cannot play this card."));
				Abort;
			End;
		Else If(Is Button Held(Event Player, Button(Reload)));
			If(Not(Event Player.UNO_Info_Array[3]));
				Small Message(Event Player, Custom String("  It's not your turn yet."));
				Abort;
			End;
			If(Event Player.UNO_Info_Array[4]);
				Small Message(Event Player, Custom String("  You have already drawn a card."));
				Abort;
			Else;
				Call Subroutine(UNO_Draw);
				Call Subroutine(UNO_Update_Hand);
				Small Message(Global.UNO_Players, Custom String("  {0} draws a card", Event Player));
				Event Player.UNO_Info_Array[4] = True;
			End;
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			If(Not(Event Player.UNO_Info_Array[3]));
				Small Message(Event Player, Custom String("  It's not your turn yet."));
				Abort;
			End;
			If(Event Player.UNO_Info_Array[4]);
				Event Player.UNO_Info_Array[3] = False;
				Event Player.UNO_Info_Array[4] = False;
				
				Global.UNO_Help = First Of(Global.UNO_Players);
				Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
				Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				
				Global.UNO_Help = First Of(Global.UNO_Players);
				Global.UNO_Help.UNO_Info_Array[3] = True;
				Play Effect(Global.UNO_Help, Buff Impact Sound, Null, Global.UNO_Help, 20);
				Small Message(Global.UNO_Players, Custom String("  {0} ends turn", Event Player));
				Global.UNO_Timer = 100;
			Else;
				Small Message(Event Player, Custom String("  You must have drawn a card to end turn."));
				Abort;
			End;
		Else If(Is Button Held(Event Player, Button(Melee)));
			Wait Until(Not(Is Button Held(Event Player, Button(Melee))), 5);
			If(Is Button Held(Event Player, Button(Melee)));
				If(Count Of(Global.UNO_Players) == 2);
					If(Event Player.UNO_Info_Array[3]);
						Big Message(All Players(All Teams), Custom String("{0} has left UNO, so {1} wins!", Event Player, Last Of(Global.UNO_Players)));
					Else;
						Big Message(All Players(All Teams), Custom String("{0} has left UNO, so {1} wins!", Event Player, First Of(Global.UNO_Players)));
					End;
					Call Subroutine(UNO_End);
				Else;
					Big Message(Global.UNO_Players, Custom String("{0} has left the match!", Event Player));
					Modify Global Variable(UNO_Players, Remove From Array By Value, Event Player);
					If(Event Player.UNO_Info_Array[3]);
						Global.UNO_Help = First Of(Global.UNO_Players);
						Global.UNO_Help.UNO_Info_Array[3] = True;
					End;
					Event Player.UNO_Info_Array[5] = True;
				End;
			Else;
				Small Message(Event Player, Custom String("  Hold {0} for 5 sec to leave the match.", Input Binding String(Button(Melee))));
			End;
		End;
	}
}

rule ("UNO_Black_Logic")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
	conditions
	{
		Event Player.UNO_Info_Array[6] == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		If(Is Button Held(Event Player, Button(Ultimate)));
			Event Player.UNO_Info_Array[2] += 1;
			If(Event Player.UNO_Info_Array[2] >= 5);
				Event Player.UNO_Info_Array[2] = 1;
			End;
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Wait Until(Not(Is Button Held(Event Player, Button(Secondary Fire))), 9999);
			Abort If (Not(Event Player.UNO_Info_Array[6]));
			Small Message(Event Player, Custom String("  Aborted black card placement"));
			Destroy HUD Text(Event Player.UNO_Info_Array[7]);
			Event Player.UNO_Info_Array[6] = False;
		Else If(Is Button Held(Event Player, Button(Primary Fire)));
			Wait Until(Not(Is Button Held(Event Player, Button(Primary Fire))), 9999);
			Abort If (Not(Event Player.UNO_Info_Array[6]));
			Event Player.UNO_Info_Array[3] = False;
			Global.UNO_Deck[0] = Event Player.UNO_Info_Array[2];
			Global.UNO_Deck[1] = Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][1];
			Call Subroutine(UNO_Update_Deck);

			Destroy HUD Text(Event Player.UNO_Hand[Event Player.UNO_Info_Array[0]][2]);
			Modify Player Variable(Event Player, UNO_Hand, Remove From Array By Index, Event Player.UNO_Info_Array[0]);

			Call Subroutine(UNO_Update_Hand);
			
			If(Global.UNO_Deck[1] == 14);
				
				Global.UNO_Help = First Of(Global.UNO_Players);
				Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
				Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				Small Message(Global.UNO_Players, Custom String("  {0} changed color and gave +4 to {1}", Event Player, Global.UNO_Players[1]));
				
				
				Global.UNO_Help = First Of(Global.UNO_Players);
				Global.UNO_Help.UNO_Info_Array[1] = 4;
			
				
				Global.UNO_Help = First Of(Global.UNO_Players);
				Play Effect(Global.UNO_Help, Explosion Sound, Null, Global.UNO_Help, 30);

				
				Global.UNO_Help = First Of(Global.UNO_Players);
				Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
				Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
			Else;
				
				Global.UNO_Help = First Of(Global.UNO_Players);
				Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
				Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);
				Small Message(Global.UNO_Players, Custom String("  {0} changed color", Event Player));
			End;
			
			Event Player.UNO_Info_Array[4] = False;
			
			Global.UNO_Help = First Of(Global.UNO_Players);
			Global.UNO_Help.UNO_Info_Array[3] = True;
			Play Effect(Global.UNO_Help, Buff Impact Sound, Null, Global.UNO_Help, 20);
			
			Destroy HUD Text(Event Player.UNO_Info_Array[7]);
			If(Count Of (Event Player.UNO_Hand) == 1);
				Big Message(Global.UNO_Players, Custom String("{0}: UNO!", Event Player));
			End;
			Global.UNO_Timer = 100;
			Event Player.UNO_Info_Array[6] = False;
		End;
	}
}

rule ("UNO_Draw_Some")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
	conditions
	{
		Event Player.UNO_Info_Array[1] > 0;
	}

	actions
	{
		While(Event Player.UNO_Info_Array[1] > 0);
			Call Subroutine(UNO_Draw);
			Event Player.UNO_Info_Array[1] -= 1;
		End;

		Call Subroutine(UNO_Update_Hand);

		Event Player.UNO_Info_Array[1] = 0;
	}
}

rule("UNO_Restore")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.UNO_Info_Array[5] == True;
	}

	actions
	{
		For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
			Destroy HUD Text(Event Player.UNO_Hand[Event Player.UNO_Loop][2]);
		End;

		Event Player.UNO_Ingame = False;
		Event Player.UNO_Hand = Empty Array;
		Event Player.UNO_Info_Array[3] = False;
		Event Player.UNO_Info_Array[0] = 0;
		Event Player.UNO_Info_Array[4] = False;
		Destroy HUD Text(Event Player.Mode_Description);
		Event Player.Mode_Headline = Custom String("U N O");
		If(Event Player.High_Rank || Event Player.Mod_Rank);
			Event Player.Mode_Cycle = 32;
			
			Create HUD Text(Event Player, Event Player.Mode_Cycle, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
				Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
				Global.Rainbow_Color, Color(Yellow), Global.Rainbow_Color, String and Color, Visible Never);
			Event Player.Mode_Hud_ID = Last Text ID;
			
			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nMod Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Enter UNO match\r\n{1} : Leave UNO Match\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("Ultimate : Start UNO Match\r\n\nPlayers in queue: {0}\r\n{1}",
					Count Of(Global.UNO_Players),
				Custom String("{0} : Show who is in queue\r\nReload (Optional):\r\nPlace/Remove In-world UNO deck",
					Input Binding String(Button(Ability 2))
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			Event Player.Mode_Description = Last Text ID;
		Else;
			Event Player.Mode_Cycle_Default = 13;

			Create HUD Text(Event Player, Event Player.Mode_Cycle_Default, Custom String("{0} {1}", Hero Icon String(Hero Of(Player Closest To Reticle(
				Event Player, All Teams))), Player Closest To Reticle(Event Player, All Teams)), Event Player.Mode_Headline, Left, 0,
				Global.Rainbow_Color, Color(Yellow), Global.Rainbow_Color, String and Color, Visible Never);
			Event Player.Mode_Hud_ID = Last Text ID;

			Create HUD Text(Event Player, Null, Custom String("| Press Crouch + Interact/Jump to change pages |\nPlayer Menu: Press Crouch + input for action\n{0}",
				Custom String("{0} : Enter UNO match\r\n{1} : Leave UNO Match\r\n{2}", 
					Input Binding String(Button(Primary Fire)), Input Binding String(Button(Secondary Fire)), 
				Custom String("{0} : Start UNO Match\r\n\nPlayers in queue: {1}\r\n{2}",
					Input Binding String(Button(Ultimate)), Count Of(Global.UNO_Players),
				Custom String("{0} : Show who is in queue\r\nReload : (Optional):\r\nPlace/Remove In-world UNO deck",
					Input Binding String(Button(Ability 2))
				)))), Null, Left, 1, Color(White), Color(White), Color(White), String, Visible Never);
			Event Player.Mode_Description = Last Text ID;
		End;
		
		
		Event Player.UNO_Info_Array[5] = False;
	}
}

rule ("UNO_Timer")
{
	event
	{
		Ongoing - Global;
	}
	
	conditions
	{
		Global.UNO_Started == True;
		Global.UNO_Timer == 0;
	}

	actions
	{
		Global.UNO_Help = First Of(Global.UNO_Players);
		Play Effect(Global.UNO_Help, Explosion Sound, Null, Global.UNO_Help, 30);
		If(Global.UNO_Help.UNO_Info_Array[4]);
			Global.UNO_Help.UNO_Info_Array[4] = False;
			Small Message(Global.UNO_Players, Custom String("  {0} ends turn", Global.UNO_Help));
		Else;
			Global.UNO_Help.UNO_Info_Array[1] = 1;
			Small Message(Global.UNO_Players, Custom String("  {0} didn't play a card", Global.UNO_Help));
		End;
		Destroy HUD Text(Global.UNO_Help.UNO_Info_Array[7]);
		Global.UNO_Help.UNO_Info_Array[3] = False;
		Global.UNO_Help.UNO_Info_Array[6] = False;
		Wait(0.01, Ignore Condition);
		Modify Global Variable(UNO_Players, Remove From Array By Index, 0);
		Modify Global Variable(UNO_Players, Append To Array, Global.UNO_Help);

		Global.UNO_Help = First Of(Global.UNO_Players);
		Global.UNO_Help.UNO_Info_Array[3] = True;
		Play Effect(Global.UNO_Help, Buff Impact Sound, Null, Global.UNO_Help, 20);
		Global.UNO_Timer = 100;
	}
}

rule("Cards_Leaver_Handler")
{
	event
	{
		Player Left Match;
		All;
		All;
	}

	conditions
	{
		Array Contains(Global.UNO_Players, Event Player) == True;
	}

	actions
	{
		If(Global.UNO_Started && Array Contains(Global.UNO_Players, Event Player));
			Modify Global Variable(UNO_Players, Remove From Array By Value, Event Player);
			If(Count Of(Global.UNO_Players) == 1);
				Global.UNO_Help = First Of(Global.UNO_Players);
				Big Message(All Players(All Teams), Custom String("{0} has left UNO, so {1} wins!", Event Player, Global.UNO_Help));
				Call Subroutine(UNO_End);
			Else;
				Big Message(Global.UNO_Players, Custom String("{0} has left the match!", Event Player));
				If(Not(Is True For Any(Global.UNO_Players, Current Array Element.UNO_Info_Array[3])));
					Global.UNO_Help = First Of(Global.UNO_Players);
					Global.UNO_Help.UNO_Info_Array[3] = True;
				End;
			End;
		Else;
			Modify Global Variable(UNO_Players, Remove From Array By Value, Event Player);
			Small Message(All Players(ALl Teams), Custom String("  {0} was removed from UNO queue", Event Player));
		End;
	}
}

rule ("Subroutine: UNO_Draw_Card")
{
    event 
	{
		Subroutine;
		UNO_Draw;
    }

    actions 
	{	
		"Uno Cards colors: 1=red, 2=green, 3=blue, 4=yellow, 0=black"
		"Uno Cards meaning: 0-9=normal, 10=skip, 11=reverse, 12=draw2, 13=pick, 14=draw4"

		Event Player.UNO_Helper = Array(Null, Null, Null, Null);
		Event Player.UNO_Helper[0] = Random Value In Array(Global.UNO_Random);
		If(Event Player.UNO_Helper[0] == 0);
			Event Player.UNO_Helper[1] = Random Integer(13, 14);
		Else;
			Event Player.UNO_Helper[1] = Random Integer(0, 12);
			If(Event Player.UNO_Helper[1] == 0);
				Event Player.UNO_Helper[1] = Random Integer(0, 12);
			End;
		End;

		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Array(Event Player.UNO_Helper));
    }
}

rule ("Subroutine: UNO_Update_Hand")
{
    event 
	{
		Subroutine;
		UNO_Update_Hand;
    }

    actions 
	{	
		For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
			Destroy HUD Text(Event Player.UNO_Hand[Event Player.UNO_Loop][2]);
		End;

		Event Player.UNO_Sorter[0] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 0), Current Array Element[1]);
		Event Player.UNO_Sorter[1] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 1), Current Array Element[1]);
		Event Player.UNO_Sorter[2] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 2), Current Array Element[1]);
		Event Player.UNO_Sorter[3] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 3), Current Array Element[1]);
		Event Player.UNO_Sorter[4] = Sorted Array(Filtered Array(Event Player.UNO_Hand, Current Array Element[0] == 4), Current Array Element[1]);
		Event Player.UNO_Hand = Empty Array;
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[0]);
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[1]);
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[2]);
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[3]);
		Modify Player Variable(Event Player, UNO_Hand, Append To Array, Event Player.UNO_Sorter[4]);
		
		For Player Variable(Event Player, UNO_Loop, 0, Count Of(Event Player.UNO_Hand), 1);
			
			If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 13);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} D ", Ability Icon String(Hero(Sombra), Button(Ability 2)))), 
					Null, Event Player.UNO_Hand[Evaluate Once(Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5, Color(Black), Color(White), Color(White), String, Visible Never);
			Else If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 14);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} D ", Ability Icon String(Hero(Baptiste), Button(Ability 1)))), 
					Null, Event Player.UNO_Hand[Evaluate Once(Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5, Color(Black), Color(White), Color(White), String, Visible Never);
			Else If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 10);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} {1} ", Icon String(No), Global.UNO_Colorblind[Event Player.UNO_Hand[Event Player.UNO_Loop][0]])), 
					Null, Event Player.UNO_Hand[Evaluate Once(Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5, 
					Global.Card_Colors[Event Player.UNO_Hand[Event Player.UNO_Loop][0]], Color(White), Color(White), String, Visible Never);
			Else If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 11);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} {1} ", Icon String(Recycle), Global.UNO_Colorblind[Event Player.UNO_Hand[Event Player.UNO_Loop][0]])), 
					Null, Event Player.UNO_Hand[Evaluate Once(Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5, 
					Global.Card_Colors[Event Player.UNO_Hand[Event Player.UNO_Loop][0]], Color(White), Color(White), String, Visible Never);
			Else If(Event Player.UNO_Hand[Event Player.UNO_Loop][1] == 12);
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} {1} ", Icon String(Plus), Global.UNO_Colorblind[Event Player.UNO_Hand[Event Player.UNO_Loop][0]])), 
					Null, Event Player.UNO_Hand[Evaluate Once(Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5, 
					Global.Card_Colors[Event Player.UNO_Hand[Event Player.UNO_Loop][0]], Color(White), Color(White), String, Visible Never);
			Else;
				Create HUD Text(Event Player, Evaluate Once(Custom String(" {0} {1} ", Event Player.UNO_Hand[Event Player.UNO_Loop][1], Global.UNO_Colorblind[Event Player.UNO_Hand[Event Player.UNO_Loop][0]])), 
					Null, Event Player.UNO_Hand[Evaluate Once(Event Player.UNO_Loop)][3], Left, Event Player.UNO_Loop + 5, 
					Global.Card_Colors[Event Player.UNO_Hand[Event Player.UNO_Loop][0]], Color(White), Color(White), String, Visible Never);
			End;

			Event Player.UNO_Hand[Event Player.UNO_Loop] = Array(Event Player.UNO_Hand[Event Player.UNO_Loop][0], 
				Event Player.UNO_Hand[Event Player.UNO_Loop][1], Last Text ID, Custom String(""));
		End;

		Event Player.UNO_Info_Array[0] = 0;
		Event Player.UNO_Hand[0] =  Array(Event Player.UNO_Hand[0][0], Event Player.UNO_Hand[0][1],  Event Player.UNO_Hand[0][2], Custom String("{0}", Icon String(Arrow: Left)));
    }
}

rule ("Subroutine: UNO_Update_Deck")
{
    event 
	{
		Subroutine;
		UNO_Update_Deck;
    }

    actions 
	{	
		Destroy HUD Text(Global.UNO_Deck[2]);
		If(Global.UNO_Inworld[0]);
			Destroy In-World Text(Global.UNO_Inworld[2]);
		End;
		If(Global.UNO_Deck[1] == 13);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Ability Icon String(Hero(Sombra), Button(Ability 2)), Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, 
				Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Ability Icon String(Hero(Sombra), Button(Ability 2)), Global.UNO_Colorblind[Global.UNO_Deck[0]]), 
					Global.UNO_Inworld[1], 1.8, Clip Against Surfaces, Visible To String and Color, Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else If(Global.UNO_Deck[1] == 14);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Ability Icon String(Hero(Baptiste), Button(Ability 1)), Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, 
				Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Ability Icon String(Hero(Baptiste), Button(Ability 1)), Global.UNO_Colorblind[Global.UNO_Deck[0]]), 
					Global.UNO_Inworld[1], 1.8, Clip Against Surfaces, Visible To String and Color, Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else If(Global.UNO_Deck[1] == 10);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Icon String(No), Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, 
				Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Icon String(No), Global.UNO_Colorblind[Global.UNO_Deck[0]]), 
					Global.UNO_Inworld[1], 1.8, Clip Against Surfaces, Visible To String and Color, Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else If(Global.UNO_Deck[1] == 11);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}  \r\n ", Icon String(Recycle), Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, 
				Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Icon String(Recycle), Global.UNO_Colorblind[Global.UNO_Deck[0]]), 
					Global.UNO_Inworld[1], 1.8, Clip Against Surfaces, Visible To String and Color, Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else If(Global.UNO_Deck[1] == 12);
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ", Icon String(Plus), Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, 
				Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}", Icon String(Plus), Global.UNO_Colorblind[Global.UNO_Deck[0]]), 
					Global.UNO_Inworld[1], 1.8, Clip Against Surfaces, Visible To String and Color, Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		Else;
			Create HUD Text(Global.UNO_Players, Custom String(" \r\n   {0} {1}   \r\n ",  Global.UNO_Deck[1], Global.UNO_Colorblind[Global.UNO_Deck[0]]), Null, Null, Top, 2, 
				Global.Card_Colors[Global.UNO_Deck[0]], Color(White), Color(White), Visible To String and Color, Visible Never);
			Global.UNO_Deck[2] = Last Text ID;
			If(Global.UNO_Inworld[0]);
				Create In-World Text(All Players(All Teams), Custom String("{0} {1}",  Global.UNO_Deck[1], Global.UNO_Colorblind[Global.UNO_Deck[0]]), 
					Global.UNO_Inworld[1], 1.8, Clip Against Surfaces, Visible To String and Color, Global.Card_Colors[Global.UNO_Deck[0]], Visible Never);
				Global.UNO_Inworld[2] = Last Text ID;
			End;
		End;

    }
}

rule ("Subroutine: UNO_End")
{
    event 
	{
		Subroutine;
		UNO_End;
    }

    actions 
	{	
		Destroy HUD Text(Global.UNO_Info);
		Global.UNO_Started = False;
		Destroy HUD Text(Global.UNO_Deck[2]);
		Destroy Progress Bar HUD Text(Global.UNO_Deck[3]);
		If(Global.UNO_Inworld[0]);
			Destroy In-World Text(Global.UNO_Inworld[2]);
			Destroy In-World Text(Global.UNO_Inworld[3]);
			Create In-World Text(All Players(All Teams), Custom String("UNO"), Global.UNO_Inworld[1], 1.8, 
				Clip Against Surfaces, Visible To String and Color, Global.Rainbow_Color, Visible Never);
			Global.UNO_Inworld[2] = Last Text ID;
			Create In-World Text(All Players(All Teams), Custom String("Current player Display\r\nNext Player Display\r\n"), Global.UNO_Inworld[1], 1.2, 
				Clip Against Surfaces, Visible To String and Color, Color(White), Visible Never);
			Global.UNO_Inworld[3] = Last Text ID;
		End;
		Global.UNO_Deck = Array(Null, Null, Null, Null);
		For Global Variable(UNO_Looper, 0, Count Of(Global.UNO_Players), 1);
			Global.UNO_Players[Global.UNO_Looper].UNO_Info_Array[5] = True;
		End;
		Global.UNO_Players = Empty Array;
    }
}

rule("Mode_33 - Invisible")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Mode_Cycle == 33;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
		Abort If(Event Player.Promoted_Rank && (Event Player != Host Player));
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Event Player.Is_Invisible = True;
			Set Invisible(Event Player, All);
			Small Message(Event Player, Custom String("Invisible On"));
			Wait(1, Ignore Condition);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Set Invisible(Event Player, None);
			Small Message(Event Player, Custom String("Invisible Off"));
			Event Player.Is_Invisible = False;
			Wait(1, Ignore Condition);
		End;
	}
}

rule("Mode_34 - Communication")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Event Player.Mode_Cycle == 34 || Event Player.Mode_Cycle_Default == 14) == True;
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;

		Event Player.Comms_Target = Player Closest To Reticle(Event Player, All Teams);
		Abort If(Not(Is Dummy Bot(Event Player.Comms_Target)));
		If(Event Player.Comms_Target.Bot_CD > 0);
			Small Message(Event Player, Custom String("  {0} sec CD", Event Player.Comms_Target.Bot_CD));
			Abort;
		End;
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Communicate(Event Player, Hello);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.9, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), 
				Eye Position(Event Player))),
				300, To World, Direction and Turn Rate);
			Wait(0.2, Ignore Condition);
			Communicate(Event Player.Comms_Target, Hello);
		Else If(Is Button Held(Event Player, Button(Secondary Fire)));
			Communicate(Event Player, Goodbye);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.9, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), 
				Eye Position(Event Player))),
				300, To World, Direction and Turn Rate);
			Wait(0.2, Ignore Condition);
			Communicate(Event Player.Comms_Target, Goodbye);
		Else If(Is Button Held(Event Player, Button(Ability 2)));
			Communicate(Event Player, Yes);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.9, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), 
				Eye Position(Event Player))),
				300, To World, Direction and Turn Rate);
			Wait(0.2, Ignore Condition);
			Communicate(Event Player.Comms_Target, Thanks);
		Else If(Is Button Held(Event Player, Button(Reload)));
			Communicate(Event Player, No);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.9, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), 
				Eye Position(Event Player))),
				300, To World, Direction and Turn Rate);
			Wait(0.2, Ignore Condition);
			Communicate(Event Player.Comms_Target, Sorry);
		Else If(Is Button Held(Event Player, Button(Ultimate)));
			Communicate(Event Player, Thanks);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.9, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), 
				Eye Position(Event Player))),
				300, To World, Direction and Turn Rate);
			Wait(0.2, Ignore Condition);
			Communicate(Event Player.Comms_Target, Yes);
		Else If(Is Button Held(Event Player, Button(Ability 1)));
			Communicate(Event Player, Sorry);
			Event Player.Comms_Target.Bot_CD = 3;
			Wait(0.9, Ignore Condition);
			Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), 
				Eye Position(Event Player))),
				300, To World, Direction and Turn Rate);
			Wait(0.2, Ignore Condition);
			Communicate(Event Player.Comms_Target, No);
		End;
		Wait(1, Ignore Condition);
		Start Facing(Event Player.Comms_Target, Update Every Frame(Direction Towards(Eye Position(Event Player.Comms_Target), 
			Eye Position(Closest Player To(Event Player.Comms_Target, All Teams)))),
			300, To World, Direction and Turn Rate);
	}
}

disabled rule("")
{
	event
	{
		Ongoing - Global;
	}
}

rule("Extra_1 - Zen Kick")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Is Meleeing(Event Player) == True;
		Distance Between(Position Of(Event Player), Position Of(Closest Player To(Event Player, All Teams))) <= 2;
	}

	actions
	{
		Abort If(Closest Player To(Event Player, All Teams).Protection);
		Apply Impulse(Closest Player To(Event Player, All Teams), Vector(0, 1, 0), 20, To World, Cancel Contrary Motion);
		Apply Impulse(Closest Player To(Event Player, All Teams), Direction Towards(Position Of(Event Player), Position Of(
			Closest Player To(Event Player, All Teams))), 200, To World, Incorporate Contrary Motion);
		Set Status(Closest Player To(Event Player, All Teams), Event Player, Knocked Down, 4);
	}
}

rule("Extra_2 - Self Rez")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player == Is Dead(Event Player);
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Is Button Held(Event Player, Button(Jump)) == True;
	}

	actions
	{
		"Kanezaka falling out of map hardcoded fix"
		If(Current Map == Map(Kanezaka));
			Teleport(Event Player, Random Value In Array(Global.Kanezaka_Teleports));
			Resurrect(Event Player);
			Heal(Event Player, Null, 12000);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		Else;
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
			Resurrect(Event Player);
			Heal(Event Player, Null, 12000);
			Wait(0.100, Ignore Condition);
			Play Effect(All Players(All Teams), Good Pickup Effect, Color(Blue), Event Player, 1);
		End;
	}
}

rule("Extra_3 - Short Hop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Is Button Held(Event Player, Button(Ability 1)) && Is Button Held(Event Player, Button(Crouch))) == True;
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Is Alive(Event Player) == True;
		Event Player.Mode_Cycle != 6;
		Event Player.Mode_Cycle != 31;
		Event Player.Mode_Cycle != 34;
	}

	actions
	{
		Cancel Primary Action(Event Player);
		Play Effect(Event Player, Good Explosion, Global.Rainbow_Color, Position Of(Event Player), 0.75);
		Teleport(Event Player, Position Of(Event Player) + Facing Direction Of(Event Player) * 12.500);
		Wait(0.1, Ignore Condition);
		Play Effect(Event Player, Good Explosion, Global.Rainbow_Color, Position Of(Event Player), 0.75);
		Apply Impulse(Event Player, Up, 2, To World, Cancel Contrary Motion);
	}
}

rule("Extra_4 - Mercy sleep darts")
{
	event
	{
		Player Dealt Damage;
		All;
		Mercy;
	}

	conditions
	{
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Event Ability == Button(Primary Fire);
	}

	actions
	{
		Set Status(Victim, Event Player, Asleep, 4);
		Heal(Victim, Null, 50);
	}
}

rule("Extra_5 - Ultimate reset for mods+")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		(Event Player.High_Rank || Event Player.Mod_Rank) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Event Player.Restricted[0] == False;
		((Hero Of(Event Player) == Hero(Zarya) || Hero Of(Event Player) == Hero(Sigma) || Hero Of(Event Player) == Hero(Lifeweaver)) && Event Player.Promoted_Rank) == False;
		Hero Of(Event Player) != Hero(Ashe);
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("Extra_6 - Mercy Movement Collision")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Hero Of(Event Player) == Hero(Mercy);
		((Event Player.High_Rank || Event Player.Mod_Rank) == True);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 150);
		Disable Movement Collision With Environment(Event Player, True);
		Wait Until(Not(Is Using Ultimate(Event Player)) || (Hero Of(Event Player) != Hero (Mercy)), 9999);
		Set Move Speed(Event Player, 100);
		Enable Movement Collision With Environment(Event Player);
	}
}

rule("Extra_7 - No Cooldowns")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		((Event Player.High_Rank || Event Player.Mod_Rank) == True);
		Event Player.No_CD == True;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button (Primary Fire), 0);
		Set Ability Cooldown(Event Player, Button (Secondary Fire), 0);
		Set Ability Cooldown(Event Player, Button (Ability 1), 0);
		Set Ability Cooldown(Event Player, Button (Ability 2), 0);
		Wait(0.1, Abort When False);
		Loop If Condition Is True;
	}
}

rule("Extra_8 - Ana Nano")
{
	event
	{
		Player Dealt Healing;
		All;
		Ana;
	}

	conditions
	{
		((Event Player.High_Rank || Event Player.Mod_Rank) == True);
		Event Ability == Button(Ultimate);

	}

	actions
	{
		Stop Chasing Player Variable(Healee, Extra12_Timer);
		Healee.Extra12_Timer = 20;
		Chase Player Variable Over Time(Healee, Extra12_Timer, 0, 10, None);
		Start Modifying Hero Voice Lines(Healee, (Sine From Radians(Healee.Extra12_Timer))/1.7 + 1, true);
	}
}

rule("Extra_8 - Ana Target Reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Extra12_Timer == 0;
	}

	actions
	{
		Stop Chasing Player Variable(Event Player, Extra12_Timer);
		Stop Modifying Hero Voice Lines(Event Player);
		Event Player.Extra12_Timer = -1;
	}
}

rule("Extra_9 - GIVE PETS")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Hero Of(Event Player) == Hero (Ramattra) || Hero Of(Event Player) == Hero (Sombra) || Hero Of(Event Player) == Hero (Sigma) || 
			Hero Of(Event Player) == Hero(Moira)) == True;
		Is Firing Secondary(Event Player) == True;
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Create Icon(All Players(All Teams), Update Every Frame(Eye Position(Event Player) + World Vector Of(
			Vector(If-Then-Else(Hero Of(Event Player) == Hero(Moira), -0.08, 0.18), If-Then-Else(Hero Of(Event Player) == Hero(Moira), -0.4, -0.25), 0), Event Player, Rotation) + 
			Event Player.Scale_Real * Facing Direction Of(Event Player) * If-Then-Else(Hero Of(Event Player) == Hero(Sombra), 0.6, 1)), 
			Heart, Visible To and Position, Color(Red), False);
		Event Player.Extra10_ID = Last Created Entity;
		Wait Until(!Is Firing Secondary(Event Player) || Is In Alternate Form(Event Player), 9999);
		Destroy Icon(Event Player.Extra10_ID);
	}
}

rule("Extra_10: Doom Hug")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		((Event Player.High_Rank || Event Player.Mod_Rank) == True);
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Event Player.Extra10_Player = Closest Player To(Event Player, All Teams);
		Abort If((Event Player.Extra10_Player.Full_Protection && Not(Is Dummy Bot(Event Player.Extra10_Player))) 
			|| Has Status(Event Player.Extra10_Player, Knocked Down));
		Abort If(Distance Between(Event Player,Event Player.Extra10_Player) >= 1.5 || Not(Is In View Angle(Event Player, Event Player.Extra10_Player, 120)));
		Attach Players(Event Player.Extra10_Player, Event Player, Vector(0,0.3,0.6));
		If(Event Player.Extra10_Player.Protection);
			Clear Status(Event Player.Extra10_Player, Phased Out);
		End;
		Set Status(Event Player.Extra10_Player, Event Player, Stunned, 10);
		If(Event Player.Extra10_Player.Protection);
			Set Status(Event Player.Extra10_Player, Null, Phased Out, 9999);
		End;
		Wait(0.01, Ignore Condition);
		Set Facing(Event Player.Extra10_Player, Direction Towards(Eye Position(Event Player.Extra10_Player), Eye Position(Event Player)), To World);
		Disallow Button(Event Player.Extra10_Player, Button(Ultimate));
		Wait Until(Not(Is Using Ability 2(Event Player)), 4);
		If(Is Using Ability 1(Event Player));
			Wait Until(Not(Is Using Ability 1(Event Player)), 9999);
			Clear Status(Event Player.Extra10_Player, Stunned);
			Wait(0.01, Ignore Condition);
			If(Event Player.Extra10_Player.Protection);
				Clear Status(Event Player.Extra10_Player, Phased Out);
			End;
			Set Status(Event Player.Extra10_Player, Event Player, Knocked Down, 2.6);
			If(Event Player.Extra10_Player.Protection);
				Set Status(Event Player.Extra10_Player, Null, Phased Out, 9999);
			End;
		End;
		Detach Players(Event Player.Extra10_Player);
		Allow Button(Event Player.Extra10_Player, Button(Ultimate));
		Clear Status(Event Player.Extra10_Player, Stunned);
	}
}

rule("Extra_11: Cass HE HE")
{
	event
	{
		Ongoing - Each Player;
		All;
		Cassidy;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Accelerating(Event Player, Throttle Of(Event Player) * -1, 300, If-Then-Else(Throttle Of(Event Player)== Vector(0,0,0), 0, 4), To Player, Direction Rate and Max Speed);
		Wait(0.5, Ignore Condition);
		Wait Until(Not(Is Using Ultimate(Event Player)), 9999);
		Stop Accelerating(Event Player);
	}
}

rule("Extra_12: Ashe Low Bob")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ashe;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.Is_Crouch_On == False;
	}

	actions
	{
		Abort If(Ultimate Charge Percent(Event Player)!=0 && Not(Event Player.High_Rank || Event Player.Mod_Rank));
		Cancel Primary Action(Event Player);
		Set Ultimate Charge(Event Player, 2);
		Set Max Health(Event Player, 20);
		Wait(0.01, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Wait(0.01, Ignore Condition);
		Press Button(Event Player, Button(Ultimate));
		Set Max Health(Event Player, Event Player.Player_Modification[4]);
		Wait(0.01, Ignore Condition);
		Heal(Event Player, Null, 10000);
	}
}

rule("Extra_13: Widow Laserpointer")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Destroy Effect(Event Player.Extra14_ID);
		Wait(0.4, Abort When False);
		Create Beam Effect(Filtered Array(All Players(All Teams), Not(Current Array Element == Event Player && Current Array Element.Camera == 0)), 
			Good Beam, Update Every Frame(Update Every Frame(Eye Position(Event Player)) 
			+ 0.4 * Event Player.Scale_Real * Update Every Frame(Facing Direction Of(Event Player))), 
			Update Every Frame(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 150 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
			All Players(All Teams), Event Player, False)), Color(Red), Visible To Position and Radius);
		Event Player.Extra14_ID = Last Created Entity;
		Wait Until(Not(Is Firing Secondary(Event Player)), 9999);
		Destroy Effect(Event Player.Extra14_ID);
	}
}

rule("Extra_14: Broccoli Shield")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Firing Secondary(Event Player) == True;
	}

	actions
	{
		Start Scaling Barriers(Event Player, (Sine From Radians(Global.Main_Chaser * 3))*1.5 + 1.6, true);
		Wait Until(Not(Is Firing Secondary(Event Player) || Hero Of(Event Player) != Hero(Brigitte)), 9999);
		Stop Scaling Barriers(Event Player);
	}
}

rule("Extra_15: Spider Hog")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		((Event Player.High_Rank || Event Player.Mod_Rank) == True);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Wait(0.16, Ignore Condition);
		Event Player.Extra17_Pos = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 21 * Event Player.Scale_Real * Facing Direction Of(Event Player), 
			All Players(All Teams), Event Player, False);
		Abort If(Distance Between(Event Player, Event Player.Extra17_Pos) > 20.5);
		Wait(0.14, Ignore Condition);
		Apply Impulse(Event Player, Direction Towards(Event Player, Event Player.Extra17_Pos), Distance Between(Event Player, Event Player.Extra17_Pos) * 3 * Event Player.Scale_Real, 
			To World, Cancel Contrary Motion XYZ);
	}
}

rule("Extra_16: Pharah Float")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		((Event Player.High_Rank || Event Player.Mod_Rank) == True);
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Start Forcing Player Position(Event Player, Update Every Frame(Position Of(Event Player) + World Vector Of(Throttle Of(Event Player) * Vector(0.1, 0, 0.1), Event Player, Rotation)
			+ If-Then-Else(Is Button Held(Event Player, Button(Jump)), Vector(0,0.1,0), Vector(0,0,0)) + If-Then-Else(Is Button Held(Event Player, Button(Crouch)), Vector(0,-0.1,0), Vector(0,0,0))), True);
		Wait Until(Not(Is Using Ultimate(Event Player)), 9999);
		Stop Forcing Player Position(Event Player);
	}
}

rule("Extra_17: Orisacopter")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		((Event Player.High_Rank || Event Player.Mod_Rank) == True);
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		While(Is Using Ability 2(Event Player));
			Apply Impulse(Event Player, Facing Direction Of(Event Player), 1, To World, Incorporate Contrary Motion);
			Wait(0.05, Ignore Condition);
		End;
		Set Gravity(Event Player, Event Player.Player_Modification[3]);
	}
}

rule("Extra_18: Reaper Ghost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		((Event Player.High_Rank || Event Player.Mod_Rank) == True);
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Set Gravity(Event Player, 10);
		Disable Movement Collision With Environment(Event Player, False);
		Wait Until(Not(Is Using Ability 1(Event Player)), 9999);
		Enable Movement Collision With Environment(Event Player);
		Set Gravity(Event Player, Event Player.Player_Modification[3]);
	}
}

rule("Extra_19: Florenzio Bandaid")
{
	event
	{
		Ongoing - Each Player;
		All;
		Lifeweaver;
	}

	conditions
	{

		Is True For Any(All Players(All Teams), Current Array Element.Full_Protection &&
			Distance Between(Current Array Element, Event Player) <= 31 && Current Array Element != Event Player) == True;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Wait Until(Not(Is True For Any(All Players(All Teams), Current Array Element.Full_Protection &&
			Distance Between(Current Array Element, Event Player) <= 31 && Current Array Element != Event Player))
			|| Not(Hero Of(Event Player) == Hero(Lifeweaver)), 9999);
		Wait Until(Hero Of(Event Player) != Hero(Mei), 9999);
		Set Ability 1 Enabled(Event Player, True);
	}
}

rule("Extra_20: Sombra sneaky sneaky")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
	}

	actions
	{
		Event Player.Is_Invisible = True;
		Wait Until(Not(Is Using Ability 1(Event Player) || Hero Of(Event Player) != Hero(Sombra)), 9999);
		Event Player.Is_Invisible = False;
	}
}

rule("Extra_21: Screw Mei")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Wait Until(Hero Of(Event Player) != Hero(Mei), 9999);
		Set Ability 1 Enabled(Event Player, True);
	}
}

rule("Tp effects per Map")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		If(Current Map == Map(Havana));
			Global.Map_Teleport_Locations = Array(Vector(-39.470, 6, -28.170), Vector(-17.710, 5.950, -18.280), Vector(24.920, 5.950, -33.410),
				Vector(40.780, 8, 10.420), Vector(-34.180, 5.840, -33.220));
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[0], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[1], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[2], 1.300, Visible To Position and Radius);
		Else If(Current Map == Map(Rialto));
			Global.Map_Teleport_Locations = Array(Vector(50.350, -1.250, 4.500), Vector(-11.920, -1.250, -21.900), Vector(5.420, -1.250, 20.590),
				Vector(0.750, -1.250, 35.670), Vector(52.720, -1.250, -9.320));
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[0], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[1], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[3], 1.300, Visible To Position and Radius);
		Else If(Current Map == Map(Lijiang Tower) || Current Map == Map(Lijiang Tower Lunar New Year));
			Global.Map_Teleport_Locations = Array(Vector(2.7, 94, 187.8), Vector(-2.7, 94, 187.8), Vector(5, 0, -14),
				Vector(5.7, 267.17, 290));
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[0], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[1], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[2], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[3], 1.300, Visible To Position and Radius);
		Else If(Current Map == Map(Busan));
			Global.Map_Teleport_Locations = Array(Vector(-331.9, 14.1, 176.8), Vector(-325.2, 14.1, 176.8), Vector(51.9, 6.05, -100.2),
				Vector(208.35, 17.2, 208.8));
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[0], 1.100, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[1], 1.100, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[2], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[3], 1.300, Visible To Position and Radius);
		Else If(Current Map == Map(Oasis));
			Global.Map_Teleport_Locations = Array(Vector(128.85, 2.5, -207.5), Vector(101.6, 2.5, -235.45), Vector(120.7, 1, 230.7),
				Vector(-184.6, 9, 0));
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[0], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[1], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[2], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[3], 1.300, Visible To Position and Radius);
		Else If(Current Map == Map(Ilios));
			Global.Map_Teleport_Locations = Array(Vector(-190, 1.05, -3.05), Vector(-195.1, 1.05, 2.05), Vector(20.1, 61.4, -142.5),
				Vector(316.6, -23.7, -38.2));
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[0], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[1], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[2], 1.100, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[3], 1.300, Visible To Position and Radius);
		Else If(Current Map == Map(Nepal));
			Global.Map_Teleport_Locations = Array(Vector(-20, 13, -2), Vector(-20, 13, 2), Vector(90, 128, -10),
				Vector(-209, -94.1, -16));
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[0], 1.200, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[1], 1.200, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[2], 1.100, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[3], 1.300, Visible To Position and Radius);
		Else If(Current Map == Map(Antarctic Peninsula));
			Global.Map_Teleport_Locations = Array(Vector(276.9, -10.95, -261), Vector(291.39, -10.95, -261), Vector(270, 41.3, 144.7),
				Vector(-125.3, -152.5, 60));
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[0], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[1], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[2], 1.300, Visible To Position and Radius);
			Create Effect(All Players(All Teams), Ring, Color(Rose), Global.Map_Teleport_Locations[3], 1.300, Visible To Position and Radius);
		End;
		Modify Global Variable(High_Rank, Remove From Array By Index, 0);
		Modify Global Variable(High_Rank, Remove From Array By Index, 1);
		Modify Global Variable(High_Rank, Remove From Array By Index, 1);
		Modify Global Variable(High_Rank, Remove From Array By Index, 6);

		Wait(20, Ignore Condition);
		Wait(3, Ignore Condition);
		If(String Length(Global.Credits[0])!=61 || String Length(Global.Credits[1])!=70 || 
			Custom String("E{1}t{2}em{0}", Char In String(Global.Credits[0], 49), Char In String(Global.Credits[0], 30), Char In String(Global.Credits[0], 18)) != Custom String("Extremo") ||
			Custom String("OVE{2}W{0}E{1}MING", Char In String(Global.Credits[1], 54), Char In String(Global.Credits[1], 21), Char In String(Global.Credits[1], 57)) != Custom String("OVERWHELMING"));
			For Global Variable(Drawing_Obj_Storage, 0, 128, 1);
				Global.Drawing_Obj_Storage -= 1;
			End;
		End;
	}
}

rule("Teleports Lijiang")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		(Current Map == Map(Lijiang Tower) || Current Map == Map(Lijiang Tower Lunar New Year)) == True;
		(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[1], Event Player)
			<= 1.300 || Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300) == True;
	}

	actions
	{
		"Seeking for player in selected points"
		If(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[2], Vector(-3.9,0,0)));
			Set Facing(Event Player, Vector(6,0,1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[3], Vector(0,0.16,-5)));
			Set Facing(Event Player, Vector(0,0,1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[0], Vector(0,0,-3)));
			Set Facing(Event Player, Vector(0,0,1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[1], Vector(0,0,-3)));
			Set Facing(Event Player, Vector(0,0,1), To World);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Teleports Rialto")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Current Map == Map(Rialto);
		(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.300 || 
		Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300 || Distance Between(Vector(34, -1.25, 66.4), Event Player) <= 0.5 || 
		Distance Between(Vector(66.8, 50.45, 70.5), Event Player) <= 0.5 ) == True;
	}

	actions
	{
		"Seeking for player in selected points"
		If(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300);
			Teleport(Event Player, Global.Map_Teleport_Locations[2]);
			Set Facing(Event Player, Vector(-0.25,0 , 0.75), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.300);
			Teleport(Event Player, Global.Map_Teleport_Locations[2]);
			Set Facing(Event Player, Vector(-0.25 ,0, 0.75), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300);
			Teleport(Event Player, Global.Map_Teleport_Locations[4]);
			Set Facing(Event Player, Vector(-0.15 ,0, 0.85), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Vector(34, -1.25, 66.4), Event Player) <= 0.5);
			Teleport(Event Player, Vector(63.7, 48.75, 66));
			Set Facing(Event Player, Vector(-0.7 ,0 ,-0.3 ), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Vector(66.8, 50.45, 70.5), Event Player) <= 0.5);
			Teleport(Event Player, Vector(35, -1.25, 70));
			Set Facing(Event Player, Vector(-0.25 ,0 ,-0.75 ), To World);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Teleports Havana")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Current Map == Map(Havana);
		(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.300 || 
		Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300) == True;
	}

	actions
	{
		"Seeking for player in selected points"
		If(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300);
			Teleport(Event Player, Global.Map_Teleport_Locations[3]);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.300);
			Teleport(Event Player, Global.Map_Teleport_Locations[4]);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300);
			Teleport(Event Player, Global.Map_Teleport_Locations[4]);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Teleports Busan")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Current Map == Map(Busan);
		(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.100 || Distance Between(Global.Map_Teleport_Locations[1], Event Player)
			<= 1.100 || Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300) == True;
	}

	actions
	{
		"Seeking for player in selected points"
		If(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.100);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[2], Vector(0,0,4)));
			Set Facing(Event Player, Vector(0,0,-1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.100);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[3], Vector(1.5,0,4)));
			Set Facing(Event Player, Vector(-0.45,0,-1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[0], Vector(0,0,3)));
			Set Facing(Event Player, Vector(0,0,-1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[1], Vector(0,0,3)));
			Set Facing(Event Player, Vector(0,0,-1), To World);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Teleports Oasis")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Current Map == Map(Oasis);
		(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[1], Event Player)
			<= 1.300 || Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300) == True;
	}

	actions
	{
		"Seeking for player in selected points"
		If(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[2], Vector(-2,0,2)));
			Set Facing(Event Player, Vector(0.5,0,-0.5), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[3], Vector(2.7,0.1,0)));
			Set Facing(Event Player, Vector(-1,0,0), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[0], Vector(-2,0,2)));
			Set Facing(Event Player, Vector(0.5,0,-0.5), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[1], Vector(-2,0,2)));
			Set Facing(Event Player, Vector(0.5,0,-0.5), To World);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Teleports Ilios")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Current Map == Map(Ilios);
		(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[1], Event Player)
			<= 1.300 || Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.100 || Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300) == True;
	}

	actions
	{
		"Seeking for player in selected points"
		If(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[2], Vector(0,0,-3)));
			Set Facing(Event Player, Vector(0,0,1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[3], Vector(2,0,-2)));
			Set Facing(Event Player, Vector(-0.5,0,0.5), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.100);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[0], Vector(-2,0,-2)));
			Set Facing(Event Player, Vector(0.5,0,0.5), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[1], Vector(-2,0,-2)));
			Set Facing(Event Player, Vector(0.5,0,0.5), To World);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Teleports Nepal")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Current Map == Map(Nepal);
		(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.200 || Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.200 || 
		Distance Between(Global.Map_Teleport_Locations[2], Event Player)  <= 1.100 || Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300 ||
		Distance Between(Vector(79, 84, 11), Event Player)  <= 0.5 || Distance Between(Vector(69.3, 128.7, -60.5), Event Player) <= 0.5) == True;
	}

	actions
	{
		"Seeking for player in selected points"
		If(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.200);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[2], Vector(-3,0,0)));
			Set Facing(Event Player, Vector(1,0,0), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.200);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[3], Vector(0,0,3)));
			Set Facing(Event Player, Vector(0,0,-1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.100);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[0], Vector(-3,0,0)));
			Set Facing(Event Player, Vector(1,0,0), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[1], Vector(-3,0,0)));
			Set Facing(Event Player, Vector(1,0,0), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Vector(79, 84, 11), Event Player) <= 0.5);
			Teleport(Event Player, Vector(67.3, 128.7, -62.5));
			Set Facing(Event Player, Vector(0.5,0,0.5), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Vector(69.3, 128.7, -60.5), Event Player) <= 0.5);
			Teleport(Event Player,Vector(77, 84, 9));
			Set Facing(Event Player, Vector(0.5,0,0.5), To World);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Teleports Antarctic")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Current Map == Map(Antarctic Peninsula);
		(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[1], Event Player)
			<= 1.300 || Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300 || Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300) == True;
	}

	actions
	{
		"Seeking for player in selected points"
		If(Distance Between(Global.Map_Teleport_Locations[0], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[2], Vector(0,0,3)));
			Set Facing(Event Player, Vector(0,0,-1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[1], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[3], Vector(0,0,-4)));
			Set Facing(Event Player, Vector(0,0,1), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[2], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[0], Vector(4,0,0)));
			Set Facing(Event Player, Vector(-1,0,0), To World);
			Wait(2, Ignore Condition);
		End;
		If(Distance Between(Global.Map_Teleport_Locations[3], Event Player) <= 1.300);
			Teleport(Event Player, Add(Global.Map_Teleport_Locations[1], Vector(-4,0,0)));
			Set Facing(Event Player, Vector(1,0,0), To World);
			Wait(2, Ignore Condition);
		End;
	}
}

rule("Spawn Moe-Bot")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is True For Any(All Players(All Teams), Custom String("Moe Szyslak") == Custom String("{0}", Current Array Element)) == False;
		Count Of(All Players(All Teams)) < 12;
	}

	actions
	{
		Wait(3, Abort When False);
		If(Count Of(All Players(Team 1)) < 6);
			Create Dummy Bot(Hero(Soldier: 76), Team 1, -1, Vector(0, 100, 0), Vector(0,0,1));
		Else;
			Create Dummy Bot(Hero(Soldier: 76), Team 2, -1, Vector(0, 100, 0), Vector(0,0,1));
		End;
		Start Forcing Dummy Bot Name(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) && 
			Hero Of(Current Array Element) == Hero(Soldier: 76)), Custom String("Moe Szyslak"));
	}
}

rule("Moe-Bot Behavior")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(0.1, Ignore Condition);
		Start Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), 
			Eye Position(Closest Player To(Event Player, All Teams)))),
			300, To World, Direction and Turn Rate);
		Chase Player Variable At Rate(Event Player, Bot_CD, 0, 1, Destination and Rate);
		Set Max Health(Event Player, 10000);
		Set Knockback Received(Event Player, 0);
		Start Heal Over Time(Event Player, Null, 9999, 500);
		Global.Moe_Position = Vector(0,100,0);
		Abort If(Not(Custom String("{0}", Event Player) == Custom String("Moe Szyslak")));
		Event Player.Full_Protection = True;
		"TODO: Autorespawn OFF or ON?"
		Event Player.Auto_Respawn = False;
		Wait(0.1, Ignore Condition);
		If(Current Map == Map(Kanezaka));
			Global.Moe_Position = Vector(6.5, 6, 14);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Hanamura) || Current Map == Map(Hanamura Winter));
			Global.Moe_Position = Vector(49.4, -1, -0.2);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(King's Row) || Current Map == Map(King's Row Winter));
			Global.Moe_Position = Vector(-76.8, 0.5, -37);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Dorado));
			Global.Moe_Position = Vector(71.6, 7, -30.27);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Nepal));
			Global.Moe_Position = Vector(72.2, 84, -11.26);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Nepal Sanctum));
			Global.Moe_Position = Vector(89.9, 132.91, -45);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Nepal Shrine));
			Global.Moe_Position = Vector(-18.35, 13, 0);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Nepal Village));
			Global.Moe_Position = Vector(-211.55, -88, -2.4);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Paris));
			Global.Moe_Position = Vector(-36.9, 11.99, 26.2);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Blizzard World) || Current Map == Map(Blizzard World Winter));
			Global.Moe_Position = Vector(-131.34, 1.74, 107.87);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Busan));
			Global.Moe_Position = Vector(223.5, 10, 211.5);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Busan Downtown Lunar New Year));
			Global.Moe_Position = Vector(51.9, 21.4, -127.3);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Busan Sanctuary Lunar New Year));
			Global.Moe_Position = Vector(-328.9, 8.07, 179.33);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Numbani));
			Global.Moe_Position = Vector(19.95, 0.25, 4.4);
			Start Forcing Player Position(Event Player, Vector(19.95, 0.25, 4.4), False);
		Else If(Current Map == Map(Colosseo));
			Disable Movement Collision With Environment(Event Player, False);
			Wait(0.1, Ignore Condition);
			Global.Moe_Position = Vector(-11.3, 2, -10.2);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(New Queen Street));
			Global.Moe_Position = Vector(-53, 2, -5.25);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Esperança));
			Global.Moe_Position = Vector(0, 0, 19.65);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Château Guillard) || Current Map == Map(Château Guillard Halloween));
			Global.Moe_Position = Vector(206.5, 0.6, 89.7);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Black Forest) || Current Map == Map(Black Forest Winter));
			Global.Moe_Position = Vector(3.7, 15.56, -10.07);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Castillo));
			Global.Moe_Position = Vector(-121.14, 34.57, 71.82);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Watchpoint: Gibraltar));
			Global.Moe_Position = Vector(57.87, 9.44, -117.95);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Ecopoint: Antarctica) || Current Map == Map(Ecopoint: Antarctica Winter));
			Global.Moe_Position = Vector(26, 9.25, 0);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Malevento));
			Global.Moe_Position = Vector(-34.36, -1, 25.2);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Necropolis));
			Global.Moe_Position = Vector(2.75, 3, -26.85);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Petra));
			Global.Moe_Position = Vector(-17.38, -8.08, 28.85);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Circuit Royal));
			Global.Moe_Position = Vector(15.78, 11.37, -43.46);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Havana));
			Disable Movement Collision With Environment(Event Player, False);
			Global.Moe_Position = Vector(-58, 3.95, -29.44);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Hollywood));
			Global.Moe_Position = Vector(-11.1, 0.01, 41);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Hollywood Halloween));
			Global.Moe_Position = Vector(0.4, 6.4, -104.92);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Eichenwalde) || Current Map == Map(Eichenwalde Halloween));
			Global.Moe_Position = Vector(125.6, 14.73, -18.6);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Horizon Lunar Colony));
			Global.Moe_Position = Vector(86.3, 6.62, -60.85);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Ilios) || Current Map == Map(Ilios Lighthouse));
			Global.Moe_Position = Vector(358.48, 23.41, -51.67);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Ilios Ruins));
			Global.Moe_Position = Vector(41.6, 69, -163.7);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Ilios Well));
			Global.Moe_Position = Vector(-184.3, 1, -22.65);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Junkertown));
			Global.Moe_Position = Vector(-22.87, 4.76, -53.75);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Oasis) || Current Map == Map(Oasis University));
			Global.Moe_Position = Vector(-128, 11.1, 0);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Oasis City Center));
			Global.Moe_Position = Vector(114.04, 0.8, 218.04);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Oasis Gardens));
			Global.Moe_Position = Vector(129.9, 15.3, -236.15);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Rialto));
			Disable Movement Collision With Environment(Event Player, True);
			Global.Moe_Position = Vector(10.95, -0.45, -85.87);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Route 66));
			Global.Moe_Position = Vector(-33.22, 3.21, -11.76);
			Teleport(Event Player,Global.Moe_Position);
		Else If(Current Map == Map(Shambali Monastery));
			Global.Moe_Position = Vector(-27.95, 73.79, 195.38);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Temple Of Anubis));
			Global.Moe_Position = Vector(15.86, 10.04, 11.82);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Midtown));
			Global.Moe_Position = Vector(62, 8.11, 13.9);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Lijiang Tower) || Current Map == Map(Lijiang Control Center) 
			|| Current Map == Map(Lijiang Tower Lunar New Year) || Current Map == Map(Lijiang Control Center Lunar New Year));
			Global.Moe_Position = Vector(-17.3, 270, 330.7);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Lijiang Night Market) || Current Map == Map(Lijiang Night Market Lunar New Year));
			Global.Moe_Position = Vector(0, 95.3, 129.8);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Ayutthaya));
			Global.Moe_Position = Vector( 16, 1, 50.64);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Volskaya Industries));
			Global.Moe_Position = Vector(-8.2, -4.23, 39.75);
			Teleport(Event Player, Global.Moe_Position);
		Else If(Current Map == Map(Antarctic Peninsula));
			Global.Moe_Position = Vector(318.4, -27, -132.2);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		Else If(Current Map == Map(Paraíso));
			Global.Moe_Position = Vector(-39.5, -2, 65.8);
			Start Forcing Player Position(Event Player, Global.Moe_Position, False);
		End;
	}
}

rule("Moe-Bot Respawn")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Custom String("{0}", Event Player) == Custom String("Moe Szyslak");
	}

	actions
	{
		Wait Until(Is Alive(Event Player), 9999);
		Wait(1, Ignore Condition);
		Teleport(Event Player, Global.Moe_Position);
	}
}

rule("Moe-Bot Aggro")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		If(Event Player.Bot_CD == 0);
			Event Player.Bot_CD = 2;
			Wait(0.2, Ignore Condition);
			Communicate(Event Player, Thanks);
		End;
		Event Player.Bot_Aggro += Event Damage;
		If(Event Player.Bot_Aggro >= 5000);
			Set Ultimate Ability Enabled(Event Player, True);
			Set Ultimate Charge(Event Player, 100);
			Press Button(Event Player, Button(Ultimate));
			Press Button(Event Player, Button(Primary Fire));
			Wait(0.01, Ignore Condition);
			Start Holding Button(Event Player, Button(Primary Fire));
			While(Is Using Ultimate(Event Player));
				Wait(0.01, Ignore Condition);
				Set Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), 
					Eye Position(Random Value In Array(Filtered Array(All Players(All Teams), 
					Is In Line Of Sight(Eye Position(Event Player), Eye Position(Current Array Element),Barriers Do Not Block LOS)))))), To World);
				Event Player.Bot_No += 1;
				If(Event Player.Bot_No >= 60);
					Communicate(Event Player, No);
					Event Player.Bot_No = 0;
				End;
			End;
			Event Player.Bot_Aggro = 0;
			Event Player.Bot_No = 0;
			Stop Holding Button(Event Player, Button(Primary Fire));
			Start Facing(Event Player, Update Every Frame(Direction Towards(Eye Position(Event Player), 
				Eye Position(Closest Player To(Event Player, All Teams)))),
				300, To World, Direction and Turn Rate);
		End;
	}
}

rule("individual effect: kwally (is moving)")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Has Spawned(Event Player) == True;
		Event Player.Is_Invisible == False;
	}

	actions
	{
		If(Custom String("{0}", Event Player) == Custom String("kwally"));
			Play Effect(All Players(All Teams), Ring Explosion, Color(Blue), Position Of(Event Player) + Vector(X Component Of(
				Event Player), 0.022, Z Component Of(Event Player)), 1.3);
			Wait(0.050, Ignore Condition);
		End;
		Loop If Condition Is True;
	}
}

rule("Moooush's_Effect")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Effect_Storage != Null;
		Event Player.Effect_Storage != Empty Array;
		Is Communicating Any(Event Player) == False;
		Is Moving(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Event Player.Effect_Storage[1] == Custom String("Rainbow"));
			Play Effect(All Players(All Teams), Ring Explosion, Global.Rainbow_Color, Position Of(Event Player), 2);
		Else;
			Play Effect(All Players(All Teams), Ring Explosion, Event Player.Effect_Storage[1], Position Of(Event Player), 2);
		End;
		Wait(0.35, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Signal Catch Failsave")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.Signal == True;
	}

	actions
	{
		Event Player.Signal = False;
	}
}
